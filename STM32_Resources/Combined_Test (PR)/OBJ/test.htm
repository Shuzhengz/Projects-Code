<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [..\OBJ\test.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image ..\OBJ\test.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Fri May 22 21:50:36 2020
<BR><P>
<H3>Maximum Stack Usage =       1048 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main_task &rArr; net_play &rArr; net_test &rArr; t9_check &rArr; t9_process &rArr; t9_pinyin_process &rArr; t9_vbtn_process &rArr; t9_draw &rArr; t9_draw_vbtn &rArr; btn_draw &rArr; btn_draw_picbtn &rArr; minibmp_decode &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Erase_Sector &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[286]">__user_initial_stackheap</a>
 <LI><a href="#[3bc]">OS_CPU_SR_Save</a>
 <LI><a href="#[3bd]">OS_CPU_SR_Restore</a>
 <LI><a href="#[3e0]">OSStartHighRdy</a>
 <LI><a href="#[3f2]">OSCtxSw</a>
 <LI><a href="#[3c8]">OSIntCtxSw</a>
 <LI><a href="#[54]">PendSV_Handler</a>
 <LI><a href="#[351]">map67_0</a>
 <LI><a href="#[354]">map67_</a>
 <LI><a href="#[33a]">map89_</a>
 <LI><a href="#[33b]">mapAB_</a>
 <LI><a href="#[33c]">mapCD_</a>
 <LI><a href="#[33d]">mapEF_</a>
 <LI><a href="#[85d]">map89ABCDEF_</a>
 <LI><a href="#[47]">PPU_W</a>
 <LI><a href="#[3f]">PPU_R</a>
 <LI><a href="#[9b]">_00</a>
 <LI><a href="#[9c]">_01</a>
 <LI><a href="#[9f]">_05</a>
 <LI><a href="#[a0]">_06</a>
 <LI><a href="#[a2]">_08</a>
 <LI><a href="#[a3]">_09</a>
 <LI><a href="#[a4]">_0A</a>
 <LI><a href="#[a5]">_0D</a>
 <LI><a href="#[a6]">_0E</a>
 <LI><a href="#[a7]">_10</a>
 <LI><a href="#[a8]">_11</a>
 <LI><a href="#[aa]">_15</a>
 <LI><a href="#[ab]">_16</a>
 <LI><a href="#[ac]">_18</a>
 <LI><a href="#[ad]">_19</a>
 <LI><a href="#[ae]">_1D</a>
 <LI><a href="#[af]">_1E</a>
 <LI><a href="#[b0]">_20</a>
 <LI><a href="#[b1]">_21</a>
 <LI><a href="#[b2]">_24</a>
 <LI><a href="#[b3]">_25</a>
 <LI><a href="#[b4]">_26</a>
 <LI><a href="#[b5]">_28</a>
 <LI><a href="#[b6]">_29</a>
 <LI><a href="#[b7]">_2A</a>
 <LI><a href="#[b8]">_2C</a>
 <LI><a href="#[b9]">_2D</a>
 <LI><a href="#[ba]">_2E</a>
 <LI><a href="#[bb]">_30</a>
 <LI><a href="#[bc]">_31</a>
 <LI><a href="#[bd]">_35</a>
 <LI><a href="#[be]">_36</a>
 <LI><a href="#[bf]">_38</a>
 <LI><a href="#[c0]">_39</a>
 <LI><a href="#[c1]">_3D</a>
 <LI><a href="#[c2]">_3E</a>
 <LI><a href="#[c3]">_40</a>
 <LI><a href="#[c4]">_41</a>
 <LI><a href="#[c5]">_45</a>
 <LI><a href="#[c6]">_46</a>
 <LI><a href="#[c7]">_48</a>
 <LI><a href="#[c8]">_49</a>
 <LI><a href="#[c9]">_4A</a>
 <LI><a href="#[ca]">_4C</a>
 <LI><a href="#[cb]">_4D</a>
 <LI><a href="#[cc]">_4E</a>
 <LI><a href="#[cd]">_50</a>
 <LI><a href="#[ce]">_51</a>
 <LI><a href="#[cf]">_55</a>
 <LI><a href="#[d0]">_56</a>
 <LI><a href="#[d1]">_58</a>
 <LI><a href="#[d2]">_59</a>
 <LI><a href="#[d3]">_5D</a>
 <LI><a href="#[d4]">_5E</a>
 <LI><a href="#[d5]">_60</a>
 <LI><a href="#[d6]">_61</a>
 <LI><a href="#[d7]">_65</a>
 <LI><a href="#[d8]">_66</a>
 <LI><a href="#[da]">_68</a>
 <LI><a href="#[db]">_69</a>
 <LI><a href="#[dc]">_6A</a>
 <LI><a href="#[dd]">_6C</a>
 <LI><a href="#[de]">_6D</a>
 <LI><a href="#[df]">_6E</a>
 <LI><a href="#[e0]">_70</a>
 <LI><a href="#[e1]">_71</a>
 <LI><a href="#[e2]">_75</a>
 <LI><a href="#[e3]">_76</a>
 <LI><a href="#[e4]">_78</a>
 <LI><a href="#[e5]">_79</a>
 <LI><a href="#[e6]">_7D</a>
 <LI><a href="#[e7]">_7E</a>
 <LI><a href="#[e8]">_81</a>
 <LI><a href="#[e9]">_84</a>
 <LI><a href="#[ea]">_85</a>
 <LI><a href="#[eb]">_86</a>
 <LI><a href="#[ec]">_88</a>
 <LI><a href="#[ed]">_8A</a>
 <LI><a href="#[ee]">_8C</a>
 <LI><a href="#[ef]">_8D</a>
 <LI><a href="#[f0]">_8E</a>
 <LI><a href="#[f1]">_90</a>
 <LI><a href="#[f2]">_91</a>
 <LI><a href="#[f3]">_94</a>
 <LI><a href="#[f4]">_95</a>
 <LI><a href="#[f5]">_96</a>
 <LI><a href="#[f6]">_98</a>
 <LI><a href="#[f7]">_99</a>
 <LI><a href="#[f8]">_9A</a>
 <LI><a href="#[f9]">_9D</a>
 <LI><a href="#[fa]">_A0</a>
 <LI><a href="#[fb]">_A1</a>
 <LI><a href="#[fc]">_A2</a>
 <LI><a href="#[fd]">_A4</a>
 <LI><a href="#[fe]">_A5</a>
 <LI><a href="#[ff]">_A6</a>
 <LI><a href="#[100]">_A8</a>
 <LI><a href="#[101]">_A9</a>
 <LI><a href="#[102]">_AA</a>
 <LI><a href="#[103]">_AC</a>
 <LI><a href="#[104]">_AD</a>
 <LI><a href="#[105]">_AE</a>
 <LI><a href="#[106]">_B0</a>
 <LI><a href="#[107]">_B1</a>
 <LI><a href="#[108]">_B4</a>
 <LI><a href="#[109]">_B5</a>
 <LI><a href="#[10a]">_B6</a>
 <LI><a href="#[10b]">_B8</a>
 <LI><a href="#[10c]">_B9</a>
 <LI><a href="#[10d]">_BA</a>
 <LI><a href="#[10e]">_BC</a>
 <LI><a href="#[10f]">_BD</a>
 <LI><a href="#[110]">_BE</a>
 <LI><a href="#[111]">_C0</a>
 <LI><a href="#[112]">_C1</a>
 <LI><a href="#[113]">_C4</a>
 <LI><a href="#[114]">_C5</a>
 <LI><a href="#[115]">_C6</a>
 <LI><a href="#[116]">_C8</a>
 <LI><a href="#[117]">_C9</a>
 <LI><a href="#[118]">_CA</a>
 <LI><a href="#[119]">_CC</a>
 <LI><a href="#[11a]">_CD</a>
 <LI><a href="#[11b]">_CE</a>
 <LI><a href="#[11c]">_D0</a>
 <LI><a href="#[11d]">_D1</a>
 <LI><a href="#[11e]">_D5</a>
 <LI><a href="#[11f]">_D6</a>
 <LI><a href="#[120]">_D8</a>
 <LI><a href="#[121]">_D9</a>
 <LI><a href="#[122]">_DD</a>
 <LI><a href="#[123]">_DE</a>
 <LI><a href="#[124]">_E0</a>
 <LI><a href="#[125]">_E1</a>
 <LI><a href="#[126]">_E4</a>
 <LI><a href="#[127]">_E5</a>
 <LI><a href="#[128]">_E6</a>
 <LI><a href="#[129]">_E8</a>
 <LI><a href="#[12a]">_E9</a>
 <LI><a href="#[12b]">_EA</a>
 <LI><a href="#[12c]">_EC</a>
 <LI><a href="#[12d]">_ED</a>
 <LI><a href="#[12e]">_EE</a>
 <LI><a href="#[12f]">_F0</a>
 <LI><a href="#[130]">_F1</a>
 <LI><a href="#[131]">_F5</a>
 <LI><a href="#[132]">_F6</a>
 <LI><a href="#[133]">_F8</a>
 <LI><a href="#[134]">_F9</a>
 <LI><a href="#[136]">_FD</a>
 <LI><a href="#[137]">_FE</a>
 <LI><a href="#[138]">_FF</a>
 <LI><a href="#[135]">_FB</a>
 <LI><a href="#[a9]">_14</a>
 <LI><a href="#[d9]">_67</a>
 <LI><a href="#[9e]">_03</a>
 <LI><a href="#[a1]">_07</a>
 <LI><a href="#[9d]">_xx</a>
 <LI><a href="#[4b]">exit_run</a>
 <LI><a href="#[29a]">VecCont</a>
 <LI><a href="#[40]">IO_R</a>
 <LI><a href="#[48]">IO_W</a>
 <LI><a href="#[1fa]">apu_w</a>
 <LI><a href="#[1fc]">apu_4015w</a>
 <LI><a href="#[1fe]">apu_4017w</a>
 <LI><a href="#[1f7]">apu_4015R</a>
 <LI><a href="#[1fb]">dma_W</a>
 <LI><a href="#[1fd]">joy0_W</a>
 <LI><a href="#[1f8]">joy0_R</a>
 <LI><a href="#[1f9]">joy1_R</a>
 <LI><a href="#[1ff]">Mapper_W</a>
 <LI><a href="#[7f2]">empty_R</a>
 <LI><a href="#[3e]">ram_R</a>
 <LI><a href="#[46]">ram_W</a>
 <LI><a href="#[41]">sram_R</a>
 <LI><a href="#[49]">sram_W</a>
 <LI><a href="#[42]">rom_R80</a>
 <LI><a href="#[43]">rom_RA0</a>
 <LI><a href="#[44]">rom_RC0</a>
 <LI><a href="#[45]">rom_RE0</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[4d]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4d]">NMI_Handler</a><BR>
 <LI><a href="#[4f]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4f]">MemManage_Handler</a><BR>
 <LI><a href="#[50]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[50]">BusFault_Handler</a><BR>
 <LI><a href="#[51]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[51]">UsageFault_Handler</a><BR>
 <LI><a href="#[52]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[52]">SVC_Handler</a><BR>
 <LI><a href="#[53]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[53]">DebugMon_Handler</a><BR>
 <LI><a href="#[68]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[68]">ADC1_2_IRQHandler</a><BR>
 <LI><a href="#[1c3]">LCD_Fill</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c3]">LCD_Fill</a><BR>
 <LI><a href="#[5c6]">netconn_drain</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5c6]">netconn_drain</a><BR>
 <LI><a href="#[4b3]">app_get_numlen</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4b3]">app_get_numlen</a><BR>
 <LI><a href="#[4eb]">exf_fdsize</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4eb]">exf_fdsize</a><BR>
 <LI><a href="#[4ed]">exf_fdcopy</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4ed]">exf_fdcopy</a><BR>
 <LI><a href="#[761]">set_search_caption</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[761]">set_search_caption</a><BR>
 <LI><a href="#[23a]">QuickSort</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[23a]">QuickSort</a><BR>
 <LI><a href="#[7e1]">usmart_strcmp</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7e1]">usmart_strcmp</a><BR>
 <LI><a href="#[7ea]">usmart_strcopy</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7ea]">usmart_strcopy</a><BR>
 <LI><a href="#[7e6]">usmart_search_nextc</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7e6]">usmart_search_nextc</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[68]">ADC1_2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[85]">ADC3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[201]">BEEP_CGI_Handler</a> from httpd_cgi_ssi.o(i.BEEP_CGI_Handler) referenced from httpd_cgi_ssi.o(.constdata)
 <LI><a href="#[50]">BusFault_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[6b]">CAN1_RX1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[6c]">CAN1_SCE_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[b]">DM9000_ReadReg</a> from dm9000.o(i.DM9000_ReadReg) referenced 2 times from usmart_config.o(.data)
 <LI><a href="#[a]">DM9000_WriteReg</a> from dm9000.o(i.DM9000_WriteReg) referenced 2 times from usmart_config.o(.data)
 <LI><a href="#[61]">DMA1_Channel1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[62]">DMA1_Channel2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[63]">DMA1_Channel3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[64]">DMA1_Channel4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[65]">DMA1_Channel5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[66]">DMA1_Channel6_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[67]">DMA1_Channel7_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[8e]">DMA2_Channel1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[8f]">DMA2_Channel2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[90]">DMA2_Channel3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[91]">DMA2_Channel4_5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[53]">DebugMon_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2e]">EP1_IN_Callback</a> from usb_endp.o(i.EP1_IN_Callback) referenced 2 times from usb_istr.o(.data)
 <LI><a href="#[30]">EP2_OUT_Callback</a> from usb_endp.o(i.EP2_OUT_Callback) referenced 2 times from usb_istr.o(.data)
 <LI><a href="#[5c]">EXTI0_IRQHandler</a> from exti.o(i.EXTI0_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[7e]">EXTI15_10_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[5d]">EXTI1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[5e]">EXTI2_IRQHandler</a> from exti.o(i.EXTI2_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[5f]">EXTI3_IRQHandler</a> from exti.o(i.EXTI3_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[60]">EXTI4_IRQHandler</a> from exti.o(i.EXTI4_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[6d]">EXTI9_5_IRQHandler</a> from exti.o(i.EXTI9_5_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[5a]">FLASH_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[86]">FSMC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1b7]">FT5206_Scan</a> from ft5206.o(i.FT5206_Scan) referenced from touch.o(i.TP_Init)
 <LI><a href="#[1b6]">GT9147_Scan</a> from gt9147.o(i.GT9147_Scan) referenced from touch.o(i.TP_Init)
 <LI><a href="#[1ab]">Get_Max_Lun</a> from usb_prop.o(i.Get_Max_Lun) referenced from usb_prop.o(i.MASS_Data_Setup)
 <LI><a href="#[4e]">HardFault_Handler</a> from test.o(i.HardFault_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[76]">I2C1_ER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[75]">I2C1_EV_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[78]">I2C2_ER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[77]">I2C2_EV_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[40]">IO_R</a> from 6502.o(io_code) referenced 2 times from 6502.o(wram_globals0)
 <LI><a href="#[48]">IO_W</a> from 6502.o(io_code) referenced 2 times from 6502.o(wram_globals0)
 <LI><a href="#[1c4]">LCD_Color_Fill</a> from ili93xx.o(i.LCD_Color_Fill) referenced from gui.o(i.gui_init)
 <LI><a href="#[1c2]">LCD_Fast_DrawPoint</a> from ili93xx.o(i.LCD_Fast_DrawPoint) referenced from gui.o(i.gui_init)
 <LI><a href="#[1c2]">LCD_Fast_DrawPoint</a> from ili93xx.o(i.LCD_Fast_DrawPoint) referenced from piclib.o(i.piclib_init)
 <LI><a href="#[1c2]">LCD_Fast_DrawPoint</a> from ili93xx.o(i.LCD_Fast_DrawPoint) referenced from spb.o(i.spb_init)
 <LI><a href="#[1c3]">LCD_Fill</a> from ili93xx.o(i.LCD_Fill) referenced from gui.o(i.gui_init)
 <LI><a href="#[1c3]">LCD_Fill</a> from ili93xx.o(i.LCD_Fill) referenced from piclib.o(i.piclib_init)
 <LI><a href="#[1c1]">LCD_ReadPoint</a> from ili93xx.o(i.LCD_ReadPoint) referenced from gui.o(i.gui_init)
 <LI><a href="#[1c1]">LCD_ReadPoint</a> from ili93xx.o(i.LCD_ReadPoint) referenced from piclib.o(i.piclib_init)
 <LI><a href="#[1c1]">LCD_ReadPoint</a> from ili93xx.o(i.LCD_ReadPoint) referenced from spb.o(i.spb_init)
 <LI><a href="#[200]">LEDS_CGI_Handler</a> from httpd_cgi_ssi.o(i.LEDS_CGI_Handler) referenced from httpd_cgi_ssi.o(.constdata)
 <LI><a href="#[13c]">MAP0_Reset</a> from nes_mapper.o(i.MAP0_Reset) referenced from nes_mapper.o(i.MAP0_Init)
 <LI><a href="#[13e]">MAP113_MemoryWrite</a> from nes_mapper.o(i.MAP113_MemoryWrite) referenced from nes_mapper.o(i.MAP113_Init)
 <LI><a href="#[13f]">MAP113_MemoryWriteLow</a> from nes_mapper.o(i.MAP113_MemoryWriteLow) referenced from nes_mapper.o(i.MAP113_Init)
 <LI><a href="#[13d]">MAP113_Reset</a> from nes_mapper.o(i.MAP113_Reset) referenced from nes_mapper.o(i.MAP113_Init)
 <LI><a href="#[141]">MAP11_MemoryWrite</a> from nes_mapper.o(i.MAP11_MemoryWrite) referenced from nes_mapper.o(i.MAP11_Init)
 <LI><a href="#[140]">MAP11_Reset</a> from nes_mapper.o(i.MAP11_Reset) referenced from nes_mapper.o(i.MAP11_Init)
 <LI><a href="#[143]">MAP13_MemoryWrite</a> from nes_mapper.o(i.MAP13_MemoryWrite) referenced from nes_mapper.o(i.MAP13_Init)
 <LI><a href="#[142]">MAP13_Reset</a> from nes_mapper.o(i.MAP13_Reset) referenced from nes_mapper.o(i.MAP13_Init)
 <LI><a href="#[145]">MAP15_MemoryWrite</a> from nes_mapper.o(i.MAP15_MemoryWrite) referenced from nes_mapper.o(i.MAP15_Init)
 <LI><a href="#[144]">MAP15_Reset</a> from nes_mapper.o(i.MAP15_Reset) referenced from nes_mapper.o(i.MAP15_Init)
 <LI><a href="#[148]">MAP16_HSync</a> from nes_mapper.o(i.MAP16_HSync) referenced from nes_mapper.o(i.MAP16_Init)
 <LI><a href="#[147]">MAP16_MemoryWrite</a> from nes_mapper.o(i.MAP16_MemoryWrite) referenced from nes_mapper.o(i.MAP16_Init)
 <LI><a href="#[146]">MAP16_Reset</a> from nes_mapper.o(i.MAP16_Reset) referenced from nes_mapper.o(i.MAP16_Init)
 <LI><a href="#[14b]">MAP17_HSync</a> from nes_mapper.o(i.MAP17_HSync) referenced from nes_mapper.o(i.MAP17_Init)
 <LI><a href="#[14a]">MAP17_MemoryWriteLow</a> from nes_mapper.o(i.MAP17_MemoryWriteLow) referenced from nes_mapper.o(i.MAP17_Init)
 <LI><a href="#[149]">MAP17_Reset</a> from nes_mapper.o(i.MAP17_Reset) referenced from nes_mapper.o(i.MAP17_Init)
 <LI><a href="#[14e]">MAP189_HSync</a> from nes_mapper.o(i.MAP189_HSync) referenced from nes_mapper.o(i.MAP189_Init)
 <LI><a href="#[14d]">MAP189_MemoryWrite</a> from nes_mapper.o(i.MAP189_MemoryWrite) referenced from nes_mapper.o(i.MAP189_Init)
 <LI><a href="#[14c]">MAP189_Reset</a> from nes_mapper.o(i.MAP189_Reset) referenced from nes_mapper.o(i.MAP189_Init)
 <LI><a href="#[151]">MAP18_HSync</a> from nes_mapper.o(i.MAP18_HSync) referenced from nes_mapper.o(i.MAP18_Init)
 <LI><a href="#[150]">MAP18_MemoryWrite</a> from nes_mapper.o(i.MAP18_MemoryWrite) referenced from nes_mapper.o(i.MAP18_Init)
 <LI><a href="#[14f]">MAP18_Reset</a> from nes_mapper.o(i.MAP18_Reset) referenced from nes_mapper.o(i.MAP18_Init)
 <LI><a href="#[154]">MAP19_HSync</a> from nes_mapper.o(i.MAP19_HSync) referenced from nes_mapper.o(i.MAP19_Init)
 <LI><a href="#[153]">MAP19_MemoryWrite</a> from nes_mapper.o(i.MAP19_MemoryWrite) referenced from nes_mapper.o(i.MAP19_Init)
 <LI><a href="#[152]">MAP19_Reset</a> from nes_mapper.o(i.MAP19_Reset) referenced from nes_mapper.o(i.MAP19_Init)
 <LI><a href="#[156]">MAP1_MemoryWrite</a> from nes_mapper.o(i.MAP1_MemoryWrite) referenced from nes_mapper.o(i.MAP1_Init)
 <LI><a href="#[155]">MAP1_Reset</a> from nes_mapper.o(i.MAP1_Reset) referenced from nes_mapper.o(i.MAP1_Init)
 <LI><a href="#[159]">MAP21_HSync</a> from nes_mapper.o(i.MAP21_HSync) referenced from nes_mapper.o(i.MAP21_Init)
 <LI><a href="#[158]">MAP21_MemoryWrite</a> from nes_mapper.o(i.MAP21_MemoryWrite) referenced from nes_mapper.o(i.MAP21_Init)
 <LI><a href="#[157]">MAP21_Reset</a> from nes_mapper.o(i.MAP21_Reset) referenced from nes_mapper.o(i.MAP21_Init)
 <LI><a href="#[15b]">MAP225_MemoryWrite</a> from nes_mapper.o(i.MAP225_MemoryWrite) referenced from nes_mapper.o(i.MAP225_Init)
 <LI><a href="#[15a]">MAP225_Reset</a> from nes_mapper.o(i.MAP225_Reset) referenced from nes_mapper.o(i.MAP225_Init)
 <LI><a href="#[15d]">MAP227_MemoryWrite</a> from nes_mapper.o(i.MAP227_MemoryWrite) referenced from nes_mapper.o(i.MAP227_Init)
 <LI><a href="#[15c]">MAP227_Reset</a> from nes_mapper.o(i.MAP227_Reset) referenced from nes_mapper.o(i.MAP227_Init)
 <LI><a href="#[15f]">MAP22_MemoryWrite</a> from nes_mapper.o(i.MAP22_MemoryWrite) referenced from nes_mapper.o(i.MAP22_Init)
 <LI><a href="#[15e]">MAP22_Reset</a> from nes_mapper.o(i.MAP22_Reset) referenced from nes_mapper.o(i.MAP22_Init)
 <LI><a href="#[162]">MAP23_HSync</a> from nes_mapper.o(i.MAP23_HSync) referenced from nes_mapper.o(i.MAP23_Init)
 <LI><a href="#[161]">MAP23_MemoryWrite</a> from nes_mapper.o(i.MAP23_MemoryWrite) referenced from nes_mapper.o(i.MAP23_Init)
 <LI><a href="#[160]">MAP23_Reset</a> from nes_mapper.o(i.MAP23_Reset) referenced from nes_mapper.o(i.MAP23_Init)
 <LI><a href="#[164]">MAP240_MemoryWriteLow</a> from nes_mapper.o(i.MAP240_MemoryWriteLow) referenced from nes_mapper.o(i.MAP240_Init)
 <LI><a href="#[163]">MAP240_Reset</a> from nes_mapper.o(i.MAP240_Reset) referenced from nes_mapper.o(i.MAP240_Init)
 <LI><a href="#[166]">MAP245_MemoryWrite</a> from nes_mapper.o(i.MAP245_MemoryWrite) referenced from nes_mapper.o(i.MAP245_Init)
 <LI><a href="#[165]">MAP245_Reset</a> from nes_mapper.o(i.MAP245_Reset) referenced from nes_mapper.o(i.MAP245_Init)
 <LI><a href="#[169]">MAP24_HSync</a> from nes_mapper.o(i.MAP24_HSync) referenced from nes_mapper.o(i.MAP24_Init)
 <LI><a href="#[168]">MAP24_MemoryWrite</a> from nes_mapper.o(i.MAP24_MemoryWrite) referenced from nes_mapper.o(i.MAP24_Init)
 <LI><a href="#[167]">MAP24_Reset</a> from nes_mapper.o(i.MAP24_Reset) referenced from nes_mapper.o(i.MAP24_Init)
 <LI><a href="#[16c]">MAP25_HSync</a> from nes_mapper.o(i.MAP25_HSync) referenced from nes_mapper.o(i.MAP25_Init)
 <LI><a href="#[16b]">MAP25_MemoryWrite</a> from nes_mapper.o(i.MAP25_MemoryWrite) referenced from nes_mapper.o(i.MAP25_Init)
 <LI><a href="#[16a]">MAP25_Reset</a> from nes_mapper.o(i.MAP25_Reset) referenced from nes_mapper.o(i.MAP25_Init)
 <LI><a href="#[16e]">MAP2_MemoryWrite</a> from nes_mapper.o(i.MAP2_MemoryWrite) referenced from nes_mapper.o(i.MAP2_Init)
 <LI><a href="#[16d]">MAP2_Reset</a> from nes_mapper.o(i.MAP2_Reset) referenced from nes_mapper.o(i.MAP2_Init)
 <LI><a href="#[170]">MAP32_MemoryWrite</a> from nes_mapper.o(i.MAP32_MemoryWrite) referenced from nes_mapper.o(i.MAP32_Init)
 <LI><a href="#[16f]">MAP32_Reset</a> from nes_mapper.o(i.MAP32_Reset) referenced from nes_mapper.o(i.MAP32_Init)
 <LI><a href="#[173]">MAP33_HSync</a> from nes_mapper.o(i.MAP33_HSync) referenced from nes_mapper.o(i.MAP33_Init)
 <LI><a href="#[172]">MAP33_MemoryWrite</a> from nes_mapper.o(i.MAP33_MemoryWrite) referenced from nes_mapper.o(i.MAP33_Init)
 <LI><a href="#[171]">MAP33_Reset</a> from nes_mapper.o(i.MAP33_Reset) referenced from nes_mapper.o(i.MAP33_Init)
 <LI><a href="#[175]">MAP34_MemoryWrite</a> from nes_mapper.o(i.MAP34_MemoryWrite) referenced from nes_mapper.o(i.MAP34_Init)
 <LI><a href="#[174]">MAP34_Reset</a> from nes_mapper.o(i.MAP34_Reset) referenced from nes_mapper.o(i.MAP34_Init)
 <LI><a href="#[177]">MAP3_MemoryWrite</a> from nes_mapper.o(i.MAP3_MemoryWrite) referenced from nes_mapper.o(i.MAP3_Init)
 <LI><a href="#[176]">MAP3_Reset</a> from nes_mapper.o(i.MAP3_Reset) referenced from nes_mapper.o(i.MAP3_Init)
 <LI><a href="#[17a]">MAP4_HSync</a> from nes_mapper.o(i.MAP4_HSync) referenced from nes_mapper.o(i.MAP4_Init)
 <LI><a href="#[178]">MAP4_Reset</a> from nes_mapper.o(i.MAP4_Reset) referenced from nes_mapper.o(i.MAP4_Init)
 <LI><a href="#[179]">MAP4_Write</a> from nes_mapper.o(i.MAP4_Write) referenced from nes_mapper.o(i.MAP4_Init)
 <LI><a href="#[17d]">MAP64_HSync</a> from nes_mapper.o(i.MAP64_HSync) referenced from nes_mapper.o(i.MAP64_Init)
 <LI><a href="#[17c]">MAP64_MemoryWrite</a> from nes_mapper.o(i.MAP64_MemoryWrite) referenced from nes_mapper.o(i.MAP64_Init)
 <LI><a href="#[17b]">MAP64_Reset</a> from nes_mapper.o(i.MAP64_Reset) referenced from nes_mapper.o(i.MAP64_Init)
 <LI><a href="#[180]">MAP65_HSync</a> from nes_mapper.o(i.MAP65_HSync) referenced from nes_mapper.o(i.MAP65_Init)
 <LI><a href="#[17f]">MAP65_MemoryWrite</a> from nes_mapper.o(i.MAP65_MemoryWrite) referenced from nes_mapper.o(i.MAP65_Init)
 <LI><a href="#[17e]">MAP65_Reset</a> from nes_mapper.o(i.MAP65_Reset) referenced from nes_mapper.o(i.MAP65_Init)
 <LI><a href="#[182]">MAP66_MemoryWrite</a> from nes_mapper.o(i.MAP66_MemoryWrite) referenced from nes_mapper.o(i.MAP66_Init)
 <LI><a href="#[181]">MAP66_Reset</a> from nes_mapper.o(i.MAP66_Reset) referenced from nes_mapper.o(i.MAP66_Init)
 <LI><a href="#[185]">MAP67_HSync</a> from nes_mapper.o(i.MAP67_HSync) referenced from nes_mapper.o(i.MAP67_Init)
 <LI><a href="#[184]">MAP67_MemoryWrite</a> from nes_mapper.o(i.MAP67_MemoryWrite) referenced from nes_mapper.o(i.MAP67_Init)
 <LI><a href="#[183]">MAP67_Reset</a> from nes_mapper.o(i.MAP67_Reset) referenced from nes_mapper.o(i.MAP67_Init)
 <LI><a href="#[188]">MAP69_HSync</a> from nes_mapper.o(i.MAP69_HSync) referenced from nes_mapper.o(i.MAP69_Init)
 <LI><a href="#[187]">MAP69_MemoryWrite</a> from nes_mapper.o(i.MAP69_MemoryWrite) referenced from nes_mapper.o(i.MAP69_Init)
 <LI><a href="#[186]">MAP69_Reset</a> from nes_mapper.o(i.MAP69_Reset) referenced from nes_mapper.o(i.MAP69_Init)
 <LI><a href="#[18b]">MAP6_HSync</a> from nes_mapper.o(i.MAP6_HSync) referenced from nes_mapper.o(i.MAP6_Init)
 <LI><a href="#[18a]">MAP6_MemoryWrite</a> from nes_mapper.o(i.MAP6_MemoryWrite) referenced from nes_mapper.o(i.MAP6_Init)
 <LI><a href="#[18c]">MAP6_MemoryWriteLow</a> from nes_mapper.o(i.MAP6_MemoryWriteLow) referenced from nes_mapper.o(i.MAP6_Init)
 <LI><a href="#[189]">MAP6_Reset</a> from nes_mapper.o(i.MAP6_Reset) referenced from nes_mapper.o(i.MAP6_Init)
 <LI><a href="#[18e]">MAP70_MemoryWrite</a> from nes_mapper.o(i.MAP70_MemoryWrite) referenced from nes_mapper.o(i.MAP70_Init)
 <LI><a href="#[18d]">MAP70_Reset</a> from nes_mapper.o(i.MAP70_Reset) referenced from nes_mapper.o(i.MAP70_Init)
 <LI><a href="#[190]">MAP71_MemoryWrite</a> from nes_mapper.o(i.MAP71_MemoryWrite) referenced from nes_mapper.o(i.MAP71_Init)
 <LI><a href="#[18f]">MAP71_Reset</a> from nes_mapper.o(i.MAP71_Reset) referenced from nes_mapper.o(i.MAP71_Init)
 <LI><a href="#[192]">MAP72_MemoryWrite</a> from nes_mapper.o(i.MAP72_MemoryWrite) referenced from nes_mapper.o(i.MAP72_Init)
 <LI><a href="#[191]">MAP72_Reset</a> from nes_mapper.o(i.MAP72_Reset) referenced from nes_mapper.o(i.MAP72_Init)
 <LI><a href="#[195]">MAP73_HSync</a> from nes_mapper.o(i.MAP73_HSync) referenced from nes_mapper.o(i.MAP73_Init)
 <LI><a href="#[194]">MAP73_MemoryWrite</a> from nes_mapper.o(i.MAP73_MemoryWrite) referenced from nes_mapper.o(i.MAP73_Init)
 <LI><a href="#[193]">MAP73_Reset</a> from nes_mapper.o(i.MAP73_Reset) referenced from nes_mapper.o(i.MAP73_Init)
 <LI><a href="#[197]">MAP75_MemoryWrite</a> from nes_mapper.o(i.MAP75_MemoryWrite) referenced from nes_mapper.o(i.MAP75_Init)
 <LI><a href="#[196]">MAP75_Reset</a> from nes_mapper.o(i.MAP75_Reset) referenced from nes_mapper.o(i.MAP75_Init)
 <LI><a href="#[199]">MAP76_MemoryWrite</a> from nes_mapper.o(i.MAP76_MemoryWrite) referenced from nes_mapper.o(i.MAP76_Init)
 <LI><a href="#[198]">MAP76_Reset</a> from nes_mapper.o(i.MAP76_Reset) referenced from nes_mapper.o(i.MAP76_Init)
 <LI><a href="#[19b]">MAP78_MemoryWrite</a> from nes_mapper.o(i.MAP78_MemoryWrite) referenced from nes_mapper.o(i.MAP78_Init)
 <LI><a href="#[19a]">MAP78_Reset</a> from nes_mapper.o(i.MAP78_Reset) referenced from nes_mapper.o(i.MAP78_Init)
 <LI><a href="#[19d]">MAP79_MemoryWriteLow</a> from nes_mapper.o(i.MAP79_MemoryWriteLow) referenced from nes_mapper.o(i.MAP79_Init)
 <LI><a href="#[19c]">MAP79_Reset</a> from nes_mapper.o(i.MAP79_Reset) referenced from nes_mapper.o(i.MAP79_Init)
 <LI><a href="#[19f]">MAP7_MemoryWrite</a> from nes_mapper.o(i.MAP7_MemoryWrite) referenced from nes_mapper.o(i.MAP7_Init)
 <LI><a href="#[19e]">MAP7_Reset</a> from nes_mapper.o(i.MAP7_Reset) referenced from nes_mapper.o(i.MAP7_Init)
 <LI><a href="#[1a2]">MAP85_HSync</a> from nes_mapper.o(i.MAP85_HSync) referenced from nes_mapper.o(i.MAP85_Init)
 <LI><a href="#[1a1]">MAP85_MemoryWrite</a> from nes_mapper.o(i.MAP85_MemoryWrite) referenced from nes_mapper.o(i.MAP85_Init)
 <LI><a href="#[1a0]">MAP85_Reset</a> from nes_mapper.o(i.MAP85_Reset) referenced from nes_mapper.o(i.MAP85_Init)
 <LI><a href="#[1a4]">MAP87_MemoryWrite</a> from nes_mapper.o(i.MAP87_MemoryWrite) referenced from nes_mapper.o(i.MAP87_Init)
 <LI><a href="#[1a3]">MAP87_Reset</a> from nes_mapper.o(i.MAP87_Reset) referenced from nes_mapper.o(i.MAP87_Init)
 <LI><a href="#[1a6]">MAP88_MemoryWrite</a> from nes_mapper.o(i.MAP88_MemoryWrite) referenced from nes_mapper.o(i.MAP88_Init)
 <LI><a href="#[1a5]">MAP88_Reset</a> from nes_mapper.o(i.MAP88_Reset) referenced from nes_mapper.o(i.MAP88_Init)
 <LI><a href="#[1a8]">MAP8_MemoryWrite</a> from nes_mapper.o(i.MAP8_MemoryWrite) referenced from nes_mapper.o(i.MAP8_Init)
 <LI><a href="#[1a7]">MAP8_Reset</a> from nes_mapper.o(i.MAP8_Reset) referenced from nes_mapper.o(i.MAP8_Init)
 <LI><a href="#[1a9]">MAP99_Reset</a> from nes_mapper.o(i.MAP99_Reset) referenced from nes_mapper.o(i.MAP99_Init)
 <LI><a href="#[1aa]">MAP99_WriteHighRegs</a> from nes_mapper.o(i.MAP99_WriteHighRegs) referenced from nes_mapper.o(i.MAP99_Init)
 <LI><a href="#[35]">MASS_Data_Setup</a> from usb_prop.o(i.MASS_Data_Setup) referenced 2 times from usb_prop.o(.data)
 <LI><a href="#[39]">MASS_GetConfigDescriptor</a> from usb_prop.o(i.MASS_GetConfigDescriptor) referenced 2 times from usb_prop.o(.data)
 <LI><a href="#[38]">MASS_GetDeviceDescriptor</a> from usb_prop.o(i.MASS_GetDeviceDescriptor) referenced 2 times from usb_prop.o(.data)
 <LI><a href="#[3a]">MASS_GetStringDescriptor</a> from usb_prop.o(i.MASS_GetStringDescriptor) referenced 2 times from usb_prop.o(.data)
 <LI><a href="#[37]">MASS_Get_Interface_Setting</a> from usb_prop.o(i.MASS_Get_Interface_Setting) referenced 2 times from usb_prop.o(.data)
 <LI><a href="#[36]">MASS_NoData_Setup</a> from usb_prop.o(i.MASS_NoData_Setup) referenced 2 times from usb_prop.o(.data)
 <LI><a href="#[32]">MASS_Reset</a> from usb_prop.o(i.MASS_Reset) referenced 2 times from usb_prop.o(.data)
 <LI><a href="#[33]">MASS_Status_In</a> from usb_prop.o(i.MASS_Status_In) referenced 2 times from usb_prop.o(.data)
 <LI><a href="#[34]">MASS_Status_Out</a> from usb_prop.o(i.MASS_Status_Out) referenced 2 times from usb_prop.o(.data)
 <LI><a href="#[31]">MASS_init</a> from usb_prop.o(i.MASS_init) referenced 2 times from usb_prop.o(.data)
 <LI><a href="#[1b1]">Mapper_HSync</a> from nes_mapper.o(i.Mapper_HSync) referenced from nes_mapper.o(i.Mapper_Init)
 <LI><a href="#[1ae]">Mapper_Read</a> from nes_mapper.o(i.Mapper_Read) referenced from nes_mapper.o(i.Mapper_Init)
 <LI><a href="#[1b0]">Mapper_ReadLow</a> from nes_mapper.o(i.Mapper_ReadLow) referenced from nes_mapper.o(i.Mapper_Init)
 <LI><a href="#[1ac]">Mapper_Reset</a> from nes_mapper.o(i.Mapper_Reset) referenced from nes_mapper.o(i.Mapper_Init)
 <LI><a href="#[1b2]">Mapper_VSync</a> from nes_mapper.o(i.Mapper_VSync) referenced from nes_mapper.o(i.Mapper_Init)
 <LI><a href="#[1ff]">Mapper_W</a> from 6502.o(rom_code) referenced from 6502.o(rom_code)
 <LI><a href="#[1ad]">Mapper_Write</a> from nes_mapper.o(i.Mapper_Write) referenced from nes_mapper.o(i.Mapper_Init)
 <LI><a href="#[1af]">Mapper_WriteLow</a> from nes_mapper.o(i.Mapper_WriteLow) referenced from nes_mapper.o(i.Mapper_Init)
 <LI><a href="#[3c]">Mass_Storage_ClearFeature</a> from usb_prop.o(i.Mass_Storage_ClearFeature) referenced 2 times from usb_prop.o(.data)
 <LI><a href="#[3b]">Mass_Storage_SetConfiguration</a> from usb_prop.o(i.Mass_Storage_SetConfiguration) referenced 2 times from usb_prop.o(.data)
 <LI><a href="#[3d]">Mass_Storage_SetDeviceAddress</a> from usb_prop.o(i.Mass_Storage_SetDeviceAddress) referenced 2 times from usb_prop.o(.data)
 <LI><a href="#[4f]">MemManage_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4d]">NMI_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2f]">NOP_Process</a> from usb_core.o(i.NOP_Process) referenced 36 times from usb_istr.o(.data)
 <LI><a href="#[93]">OSTaskSwHook</a> from os_cpu_c.o(i.OSTaskSwHook) referenced from os_cpu_a.o(.text)
 <LI><a href="#[1b3]">OS_TaskIdle</a> from os_core.o(i.OS_TaskIdle) referenced from os_core.o(i.OSInit)
 <LI><a href="#[1b4]">OS_TaskStat</a> from os_core.o(i.OS_TaskStat) referenced from os_core.o(i.OSInit)
 <LI><a href="#[1b5]">OTT2001A_Scan</a> from ott2001a.o(i.OTT2001A_Scan) referenced from touch.o(i.TP_Init)
 <LI><a href="#[3f]">PPU_R</a> from 6502.o(CPU_GPU) referenced 2 times from 6502.o(wram_globals0)
 <LI><a href="#[47]">PPU_W</a> from 6502.o(CPU_GPU) referenced 2 times from 6502.o(wram_globals0)
 <LI><a href="#[57]">PVD_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[54]">PendSV_Handler</a> from os_cpu_a.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[5b]">RCC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[7f]">RTCAlarm_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[59]">RTC_IRQHandler</a> from rtc.o(i.RTC_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4c]">Reset_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[25]">SCCB_RD_Reg</a> from sccb.o(i.SCCB_RD_Reg) referenced 2 times from usmart_config.o(.data)
 <LI><a href="#[24]">SCCB_WR_Reg</a> from sccb.o(i.SCCB_WR_Reg) referenced 2 times from usmart_config.o(.data)
 <LI><a href="#[87]">SDIO_IRQHandler</a> from sdio_sdcard.o(i.SDIO_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[79]">SPI1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[7a]">SPI2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[89]">SPI3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1ca]">SSIHandler</a> from httpd_cgi_ssi.o(i.SSIHandler) referenced from httpd_cgi_ssi.o(i.httpd_ssi_init)
 <LI><a href="#[52]">SVC_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[13a]">Standard_GetConfiguration</a> from usb_core.o(i.Standard_GetConfiguration) referenced from usb_core.o(i.Data_Setup0)
 <LI><a href="#[13b]">Standard_GetInterface</a> from usb_core.o(i.Standard_GetInterface) referenced from usb_core.o(i.Data_Setup0)
 <LI><a href="#[139]">Standard_GetStatus</a> from usb_core.o(i.Standard_GetStatus) referenced from usb_core.o(i.Data_Setup0)
 <LI><a href="#[55]">SysTick_Handler</a> from delay.o(i.SysTick_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[58]">TAMPER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[6e]">TIM1_BRK_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[71]">TIM1_CC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[70]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[6f]">TIM1_UP_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[72]">TIM2_IRQHandler</a> from usmart.o(i.TIM2_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[73]">TIM3_IRQHandler</a> from timer.o(i.TIM3_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[74]">TIM4_IRQHandler</a> from remote.o(i.TIM4_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[88]">TIM5_IRQHandler</a> from timer.o(i.TIM5_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[8c]">TIM6_IRQHandler</a> from timer.o(i.TIM6_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[8d]">TIM7_IRQHandler</a> from timer.o(i.TIM7_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[81]">TIM8_BRK_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[84]">TIM8_CC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[83]">TIM8_TRG_COM_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[82]">TIM8_UP_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[7]">TP_Adjust</a> from touch.o(i.TP_Adjust) referenced 2 times from touch.o(.data)
 <LI><a href="#[5]">TP_Init</a> from touch.o(i.TP_Init) referenced 2 times from touch.o(.data)
 <LI><a href="#[6]">TP_Scan</a> from touch.o(i.TP_Scan) referenced 2 times from touch.o(.data)
 <LI><a href="#[8a]">UART4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[8b]">UART5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[7b]">USART1_IRQHandler</a> from usart.o(i.USART1_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[7c]">USART2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[7d]">USART3_IRQHandler</a> from usart3.o(i.USART3_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[80]">USBWakeUp_IRQHandler</a> from hw_config.o(i.USBWakeUp_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[69]">USB_HP_CAN1_TX_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[6a]">USB_LP_CAN1_RX0_IRQHandler</a> from hw_config.o(i.USB_LP_CAN1_RX0_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[51]">UsageFault_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[d]">VS_RD_Reg</a> from vs10xx.o(i.VS_RD_Reg) referenced 2 times from usmart_config.o(.data)
 <LI><a href="#[10]">VS_SPK_Set</a> from vs10xx.o(i.VS_SPK_Set) referenced 2 times from usmart_config.o(.data)
 <LI><a href="#[f]">VS_WRAM_Read</a> from vs10xx.o(i.VS_WRAM_Read) referenced 2 times from usmart_config.o(.data)
 <LI><a href="#[e]">VS_WRAM_Write</a> from vs10xx.o(i.VS_WRAM_Write) referenced 2 times from usmart_config.o(.data)
 <LI><a href="#[c]">W25QXX_Erase_Chip</a> from w25qxx.o(i.W25QXX_Erase_Chip) referenced 4 times from usmart_config.o(.data)
 <LI><a href="#[56]">WWDG_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[9b]">_00</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[9c]">_01</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[9e]">_03</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[9f]">_05</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[a0]">_06</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[a1]">_07</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[a2]">_08</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[a3]">_09</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[a4]">_0A</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[a5]">_0D</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[a6]">_0E</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[a7]">_10</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[a8]">_11</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[a9]">_14</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[aa]">_15</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[ab]">_16</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[ac]">_18</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[ad]">_19</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[ae]">_1D</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[af]">_1E</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[b0]">_20</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[b1]">_21</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[b2]">_24</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[b3]">_25</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[b4]">_26</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[b5]">_28</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[b6]">_29</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[b7]">_2A</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[b8]">_2C</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[b9]">_2D</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[ba]">_2E</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[bb]">_30</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[bc]">_31</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[bd]">_35</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[be]">_36</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[bf]">_38</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[c0]">_39</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[c1]">_3D</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[c2]">_3E</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[c3]">_40</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[c4]">_41</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[c5]">_45</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[c6]">_46</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[c7]">_48</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[c8]">_49</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[c9]">_4A</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[ca]">_4C</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[cb]">_4D</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[cc]">_4E</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[cd]">_50</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[ce]">_51</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[cf]">_55</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[d0]">_56</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[d1]">_58</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[d2]">_59</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[d3]">_5D</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[d4]">_5E</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[d5]">_60</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[d6]">_61</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[d7]">_65</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[d8]">_66</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[d9]">_67</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[da]">_68</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[db]">_69</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[dc]">_6A</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[dd]">_6C</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[de]">_6D</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[df]">_6E</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[e0]">_70</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[e1]">_71</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[e2]">_75</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[e3]">_76</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[e4]">_78</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[e5]">_79</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[e6]">_7D</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[e7]">_7E</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[e8]">_81</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[e9]">_84</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[ea]">_85</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[eb]">_86</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[ec]">_88</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[ed]">_8A</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[ee]">_8C</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[ef]">_8D</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[f0]">_8E</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[f1]">_90</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[f2]">_91</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[f3]">_94</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[f4]">_95</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[f5]">_96</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[f6]">_98</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[f7]">_99</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[f8]">_9A</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[f9]">_9D</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[fa]">_A0</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[fb]">_A1</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[fc]">_A2</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[fd]">_A4</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[fe]">_A5</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[ff]">_A6</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[100]">_A8</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[101]">_A9</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[102]">_AA</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[103]">_AC</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[104]">_AD</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[105]">_AE</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[106]">_B0</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[107]">_B1</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[108]">_B4</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[109]">_B5</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[10a]">_B6</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[10b]">_B8</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[10c]">_B9</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[10d]">_BA</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[10e]">_BC</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[10f]">_BD</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[110]">_BE</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[111]">_C0</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[112]">_C1</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[113]">_C4</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[114]">_C5</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[115]">_C6</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[116]">_C8</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[117]">_C9</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[118]">_CA</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[119]">_CC</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[11a]">_CD</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[11b]">_CE</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[11c]">_D0</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[11d]">_D1</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[11e]">_D5</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[11f]">_D6</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[120]">_D8</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[121]">_D9</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[122]">_DD</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[123]">_DE</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[124]">_E0</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[125]">_E1</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[126]">_E4</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[127]">_E5</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[128]">_E6</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[129]">_E8</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[12a]">_E9</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[12b]">_EA</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[12c]">_EC</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[12d]">_ED</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[12e]">_EE</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[12f]">_F0</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[130]">_F1</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[131]">_F5</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[132]">_F6</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[133]">_F8</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[134]">_F9</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[135]">_FB</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[136]">_FD</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[137]">_FE</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[138]">_FF</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[202]">__main</a> from __main.o(!!!main) referenced from startup_stm32f10x_hd.o(.text)
 <LI><a href="#[94]">_get_lc_ctype</a> from lc_ctype_c.o(locale$$code) referenced from rt_ctype_table.o(.text)
 <LI><a href="#[96]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[99]">_sbackspace</a> from _sgetc.o(.text) referenced from strtod.o(.text)
 <LI><a href="#[98]">_sgetc</a> from _sgetc.o(.text) referenced from strtod.o(.text)
 <LI><a href="#[95]">_sputc</a> from _sputc.o(.text) referenced 2 times from c89vsprintf.o(.text)
 <LI><a href="#[9d]">_xx</a> from 6502.o(cpu_code) referenced 99 times from 6502.o(cpu_code)
 <LI><a href="#[1be]">accept_function</a> from api_msg.o(i.accept_function) referenced from api_msg.o(i.do_listen)
 <LI><a href="#[26]">ai_load_picfile</a> from piclib.o(i.ai_load_picfile) referenced 2 times from usmart_config.o(.data)
 <LI><a href="#[1f2]">app_boot_cpdmsg</a> from common.o(i.app_boot_cpdmsg) referenced from test.o(i.system_init)
 <LI><a href="#[1f7]">apu_4015R</a> from 6502.o(io_code) referenced from 6502.o(io_code)
 <LI><a href="#[1fc]">apu_4015w</a> from 6502.o(io_code) referenced from 6502.o(io_code)
 <LI><a href="#[1fe]">apu_4017w</a> from 6502.o(io_code) referenced from 6502.o(io_code)
 <LI><a href="#[1fa]">apu_w</a> from 6502.o(io_code) referenced 20 times from 6502.o(io_code)
 <LI><a href="#[1d0]">arp_timer</a> from timers.o(i.arp_timer) referenced from timers.o(i.arp_timer)
 <LI><a href="#[1d0]">arp_timer</a> from timers.o(i.arp_timer) referenced from lwip_comm.o(i.lwip_comm_delete_next_timeout)
 <LI><a href="#[1d0]">arp_timer</a> from timers.o(i.arp_timer) referenced from timers.o(i.sys_timeouts_init)
 <LI><a href="#[1b8]">audio_play_task</a> from audioplay.o(i.audio_play_task) referenced from audioplay.o(i.audio_task_creat)
 <LI><a href="#[13]">bmp_encode</a> from bmp.o(i.bmp_encode) referenced 2 times from usmart_config.o(.data)
 <LI><a href="#[1b9]">dhcp_recv</a> from dhcp.o(i.dhcp_recv) referenced from dhcp.o(i.dhcp_start)
 <LI><a href="#[1d1]">dhcp_timer_coarse</a> from timers.o(i.dhcp_timer_coarse) referenced from timers.o(i.dhcp_timer_coarse)
 <LI><a href="#[1d1]">dhcp_timer_coarse</a> from timers.o(i.dhcp_timer_coarse) referenced from lwip_comm.o(i.lwip_comm_delete_next_timeout)
 <LI><a href="#[1d1]">dhcp_timer_coarse</a> from timers.o(i.dhcp_timer_coarse) referenced from timers.o(i.sys_timeouts_init)
 <LI><a href="#[1d2]">dhcp_timer_fine</a> from timers.o(i.dhcp_timer_fine) referenced from timers.o(i.dhcp_timer_fine)
 <LI><a href="#[1d2]">dhcp_timer_fine</a> from timers.o(i.dhcp_timer_fine) referenced from lwip_comm.o(i.lwip_comm_delete_next_timeout)
 <LI><a href="#[1d2]">dhcp_timer_fine</a> from timers.o(i.dhcp_timer_fine) referenced from timers.o(i.sys_timeouts_init)
 <LI><a href="#[1fb]">dma_W</a> from 6502.o(io_code) referenced from 6502.o(io_code)
 <LI><a href="#[1d9]">do_bind</a> from api_msg.o(i.do_bind) referenced from api_lib.o(i.netconn_bind)
 <LI><a href="#[1da]">do_close</a> from api_msg.o(i.do_close) referenced from api_lib.o(i.netconn_close_shutdown)
 <LI><a href="#[1db]">do_connect</a> from api_msg.o(i.do_connect) referenced from api_lib.o(i.netconn_connect)
 <LI><a href="#[1bd]">do_connected</a> from api_msg.o(i.do_connected) referenced from api_msg.o(i.do_connect)
 <LI><a href="#[1dc]">do_delconn</a> from api_msg.o(i.do_delconn) referenced from api_lib.o(i.netconn_delete)
 <LI><a href="#[1dd]">do_disconnect</a> from api_msg.o(i.do_disconnect) referenced from api_lib.o(i.netconn_disconnect)
 <LI><a href="#[1de]">do_getaddr</a> from api_msg.o(i.do_getaddr) referenced from api_lib.o(i.netconn_getaddr)
 <LI><a href="#[1df]">do_listen</a> from api_msg.o(i.do_listen) referenced from api_lib.o(i.netconn_listen_with_backlog)
 <LI><a href="#[1e0]">do_newconn</a> from api_msg.o(i.do_newconn) referenced from api_lib.o(i.netconn_new_with_proto_and_callback)
 <LI><a href="#[1e1]">do_recv</a> from api_msg.o(i.do_recv) referenced from api_lib.o(i.netconn_recv_data)
 <LI><a href="#[1e2]">do_send</a> from api_msg.o(i.do_send) referenced from api_lib.o(i.netconn_send)
 <LI><a href="#[1e3]">do_write</a> from api_msg.o(i.do_write) referenced from api_lib.o(i.netconn_write_partly)
 <LI><a href="#[1bc]">err_tcp</a> from api_msg.o(i.err_tcp) referenced from api_msg.o(i.do_close_internal)
 <LI><a href="#[1bc]">err_tcp</a> from api_msg.o(i.err_tcp) referenced from api_msg.o(i.setup_tcp)
 <LI><a href="#[1bf]">etharp_output</a> from etharp.o(i.etharp_output) referenced from ethernetif.o(i.ethernetif_init)
 <LI><a href="#[1d5]">ethernetif_init</a> from ethernetif.o(i.ethernetif_init) referenced from lwip_comm.o(i.lwip_comm_init)
 <LI><a href="#[4b]">exit_run</a> from 6502.o(cpu_run) referenced from 6502.o(cpu_run)
 <LI><a href="#[4b]">exit_run</a> from 6502.o(cpu_run) referenced 2 times from 6502.o(wram_globals0)
 <LI><a href="#[97]">fputc</a> from usart.o(i.fputc) referenced from _printf_char_file.o(.text)
 <LI><a href="#[12]">gui_color_chg</a> from gui.o(i.gui_color_chg) referenced 2 times from usmart_config.o(.data)
 <LI><a href="#[2d]">gui_get_key</a> from gui.o(i.gui_get_key) referenced 2 times from gui.o(.data)
 <LI><a href="#[11]">gui_show_ptstr</a> from gui.o(i.gui_show_ptstr) referenced 2 times from usmart_config.o(.data)
 <LI><a href="#[1c9]">http_accept</a> from httpd.o(i.http_accept) referenced from httpd.o(i.httpd_init_addr)
 <LI><a href="#[1c6]">http_err</a> from httpd.o(i.http_err) referenced from httpd.o(i.http_accept)
 <LI><a href="#[1c7]">http_poll</a> from httpd.o(i.http_poll) referenced from httpd.o(i.http_accept)
 <LI><a href="#[1c7]">http_poll</a> from httpd.o(i.http_poll) referenced from httpd.o(i.http_close_conn)
 <LI><a href="#[1c5]">http_recv</a> from httpd.o(i.http_recv) referenced from httpd.o(i.http_accept)
 <LI><a href="#[1c8]">http_sent</a> from httpd.o(i.http_sent) referenced from httpd.o(i.http_accept)
 <LI><a href="#[1cf]">ip_reass_timer</a> from timers.o(i.ip_reass_timer) referenced from timers.o(i.ip_reass_timer)
 <LI><a href="#[1cf]">ip_reass_timer</a> from timers.o(i.ip_reass_timer) referenced from lwip_comm.o(i.lwip_comm_delete_next_timeout)
 <LI><a href="#[1cf]">ip_reass_timer</a> from timers.o(i.ip_reass_timer) referenced from timers.o(i.sys_timeouts_init)
 <LI><a href="#[1cb]">ipfrag_free_pbuf_custom</a> from ip_frag.o(i.ipfrag_free_pbuf_custom) referenced from ip_frag.o(i.ip_frag)
 <LI><a href="#[9a]">isspace</a> from isspace.o(.text) referenced from strtod.o(.text)
 <LI><a href="#[1f8]">joy0_R</a> from 6502.o(io_code) referenced from 6502.o(io_code)
 <LI><a href="#[1fd]">joy0_W</a> from 6502.o(io_code) referenced from 6502.o(io_code)
 <LI><a href="#[1f9]">joy1_R</a> from 6502.o(io_code) referenced from 6502.o(io_code)
 <LI><a href="#[1cc]">jpeg_in_func</a> from tjpgd.o(i.jpeg_in_func) referenced from tjpgd.o(i.jpg_decode)
 <LI><a href="#[1ce]">jpeg_out_func_fill</a> from tjpgd.o(i.jpeg_out_func_fill) referenced from tjpgd.o(i.jpg_decode)
 <LI><a href="#[1cd]">jpeg_out_func_point</a> from tjpgd.o(i.jpeg_out_func_point) referenced from tjpgd.o(i.jpg_decode)
 <LI><a href="#[1c0]">low_level_output</a> from ethernetif.o(i.low_level_output) referenced from ethernetif.o(i.ethernetif_init)
 <LI><a href="#[1d3]">lwip_dhcp_task</a> from lwip_comm.o(i.lwip_dhcp_task) referenced from lwip_comm.o(i.lwip_comm_dhcp_creat)
 <LI><a href="#[1d6]">lwip_dm9000_input_task</a> from lwip_comm.o(i.lwip_dm9000_input_task) referenced from lwip_comm.o(i.lwip_comm_init)
 <LI><a href="#[1ee]">main_task</a> from test.o(i.main_task) referenced from test.o(i.start_task)
 <LI><a href="#[16]">mf_close</a> from fattester.o(i.mf_close) referenced 2 times from usmart_config.o(.data)
 <LI><a href="#[20]">mf_fmkfs</a> from fattester.o(i.mf_fmkfs) referenced 2 times from usmart_config.o(.data)
 <LI><a href="#[1d]">mf_lseek</a> from fattester.o(i.mf_lseek) referenced 2 times from usmart_config.o(.data)
 <LI><a href="#[21]">mf_mkdir</a> from fattester.o(i.mf_mkdir) referenced 2 times from usmart_config.o(.data)
 <LI><a href="#[14]">mf_mount</a> from fattester.o(i.mf_mount) referenced 2 times from usmart_config.o(.data)
 <LI><a href="#[15]">mf_open</a> from fattester.o(i.mf_open) referenced 2 times from usmart_config.o(.data)
 <LI><a href="#[19]">mf_opendir</a> from fattester.o(i.mf_opendir) referenced 2 times from usmart_config.o(.data)
 <LI><a href="#[17]">mf_read</a> from fattester.o(i.mf_read) referenced 2 times from usmart_config.o(.data)
 <LI><a href="#[1a]">mf_readdir</a> from fattester.o(i.mf_readdir) referenced 2 times from usmart_config.o(.data)
 <LI><a href="#[23]">mf_rename</a> from fattester.o(i.mf_rename) referenced 2 times from usmart_config.o(.data)
 <LI><a href="#[1b]">mf_scan_files</a> from fattester.o(i.mf_scan_files) referenced 4 times from usmart_config.o(.data)
 <LI><a href="#[1c]">mf_showfree</a> from fattester.o(i.mf_showfree) referenced 2 times from usmart_config.o(.data)
 <LI><a href="#[1f]">mf_size</a> from fattester.o(i.mf_size) referenced 2 times from usmart_config.o(.data)
 <LI><a href="#[1e]">mf_tell</a> from fattester.o(i.mf_tell) referenced 2 times from usmart_config.o(.data)
 <LI><a href="#[22]">mf_unlink</a> from fattester.o(i.mf_unlink) referenced 2 times from usmart_config.o(.data)
 <LI><a href="#[18]">mf_write</a> from fattester.o(i.mf_write) referenced 2 times from usmart_config.o(.data)
 <LI><a href="#[1d8]">mp3_file_seek</a> from mp3player.o(i.mp3_file_seek) referenced from mp3player.o(i.mp3_play_song)
 <LI><a href="#[2b]">my_mem_init</a> from malloc.o(i.my_mem_init) referenced 2 times from malloc.o(.data)
 <LI><a href="#[2c]">my_mem_perused</a> from malloc.o(i.my_mem_perused) referenced 2 times from malloc.o(.data)
 <LI><a href="#[1e4]">pbuf_free_ooseq_callback</a> from pbuf.o(i.pbuf_free_ooseq_callback) referenced from pbuf.o(i.pbuf_pool_is_empty)
 <LI><a href="#[1e7]">phone_incall_task</a> from phoneplay.o(i.phone_incall_task) referenced from phoneplay.o(i.phone_incall_task_creat)
 <LI><a href="#[1e8]">piclib_draw_hline</a> from piclib.o(i.piclib_draw_hline) referenced from piclib.o(i.piclib_init)
 <LI><a href="#[1e9]">piclib_fill_color</a> from piclib.o(i.piclib_fill_color) referenced from piclib.o(i.piclib_init)
 <LI><a href="#[1e9]">piclib_fill_color</a> from piclib.o(i.piclib_fill_color) referenced from spb.o(i.spb_init)
 <LI><a href="#[1bb]">poll_tcp</a> from api_msg.o(i.poll_tcp) referenced from api_msg.o(i.do_close_internal)
 <LI><a href="#[1bb]">poll_tcp</a> from api_msg.o(i.poll_tcp) referenced from api_msg.o(i.setup_tcp)
 <LI><a href="#[3e]">ram_R</a> from 6502.o(rwram_code) referenced 2 times from 6502.o(wram_globals0)
 <LI><a href="#[46]">ram_W</a> from 6502.o(rwram_code) referenced 2 times from 6502.o(wram_globals0)
 <LI><a href="#[8]">read_addr</a> from usmart.o(i.read_addr) referenced 2 times from usmart_config.o(.data)
 <LI><a href="#[1e5]">recv_raw</a> from api_msg.o(i.recv_raw) referenced from api_msg.o(i.pcb_new)
 <LI><a href="#[1ea]">recv_tcp</a> from api_msg.o(i.recv_tcp) referenced from api_msg.o(i.setup_tcp)
 <LI><a href="#[1e6]">recv_udp</a> from api_msg.o(i.recv_udp) referenced from api_msg.o(i.pcb_new)
 <LI><a href="#[42]">rom_R80</a> from 6502.o(rwram_code) referenced 2 times from 6502.o(wram_globals0)
 <LI><a href="#[43]">rom_RA0</a> from 6502.o(rwram_code) referenced 2 times from 6502.o(wram_globals0)
 <LI><a href="#[44]">rom_RC0</a> from 6502.o(rwram_code) referenced 2 times from 6502.o(wram_globals0)
 <LI><a href="#[45]">rom_RE0</a> from 6502.o(rwram_code) referenced 2 times from 6502.o(wram_globals0)
 <LI><a href="#[1ba]">sent_tcp</a> from api_msg.o(i.sent_tcp) referenced from api_msg.o(i.do_close_internal)
 <LI><a href="#[1ba]">sent_tcp</a> from api_msg.o(i.sent_tcp) referenced from api_msg.o(i.setup_tcp)
 <LI><a href="#[1ec]">slcd_draw_point</a> from spblcd.o(i.slcd_draw_point) referenced from spb.o(i.spb_init)
 <LI><a href="#[1ed]">slcd_fill_color</a> from spblcd.o(i.slcd_fill_color) referenced from spb.o(i.spb_init)
 <LI><a href="#[1eb]">slcd_read_point</a> from spblcd.o(i.slcd_read_point) referenced from spb.o(i.spb_init)
 <LI><a href="#[41]">sram_R</a> from 6502.o(rwram_code) referenced 2 times from 6502.o(wram_globals0)
 <LI><a href="#[49]">sram_W</a> from 6502.o(rwram_code) referenced 2 times from 6502.o(wram_globals0)
 <LI><a href="#[1d7]">start_task</a> from test.o(i.start_task) referenced from test.o(i.main)
 <LI><a href="#[1f1]">sysset_system_update_cpymsg</a> from settings.o(i.sysset_system_update_cpymsg) referenced from settings.o(i.sysset_system_update)
 <LI><a href="#[1f4]">tcp_accept_null</a> from tcp.o(i.tcp_accept_null) referenced from tcp.o(i.tcp_listen_with_backlog)
 <LI><a href="#[1f3]">tcp_recv_null</a> from tcp.o(i.tcp_recv_null) referenced from tcp.o(i.tcp_alloc)
 <LI><a href="#[1d4]">tcpip_input</a> from tcpip.o(i.tcpip_input) referenced from lwip_comm.o(i.lwip_comm_init)
 <LI><a href="#[1f5]">tcpip_tcp_timer</a> from timers.o(i.tcpip_tcp_timer) referenced from timers.o(i.tcp_timer_needed)
 <LI><a href="#[1f5]">tcpip_tcp_timer</a> from timers.o(i.tcpip_tcp_timer) referenced from timers.o(i.tcpip_tcp_timer)
 <LI><a href="#[1f6]">tcpip_thread</a> from tcpip.o(i.tcpip_thread) referenced from tcpip.o(i.tcpip_init)
 <LI><a href="#[1ef]">usart_task</a> from test.o(i.usart_task) referenced from test.o(i.start_task)
 <LI><a href="#[28]">usmart_cmd_rec</a> from usmart.o(i.usmart_cmd_rec) referenced 2 times from usmart_config.o(.data)
 <LI><a href="#[29]">usmart_exe</a> from usmart.o(i.usmart_exe) referenced 2 times from usmart_config.o(.data)
 <LI><a href="#[27]">usmart_init</a> from usmart.o(i.usmart_init) referenced 2 times from usmart_config.o(.data)
 <LI><a href="#[2a]">usmart_scan</a> from usmart.o(i.usmart_scan) referenced 2 times from usmart_config.o(.data)
 <LI><a href="#[4a]">void</a> from 6502.o(rwram_code) referenced 8 times from 6502.o(wram_globals0)
 <LI><a href="#[1f0]">watch_task</a> from test.o(i.watch_task) referenced from test.o(i.start_task)
 <LI><a href="#[9]">write_addr</a> from usmart.o(i.write_addr) referenced 2 times from usmart_config.o(.data)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[202]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[203]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[205]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[81f]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[820]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[821]"></a>__decompress</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[822]"></a>__decompress1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[823]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[206]"></a>_printf_n</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_n.o(.ARM.Collect$$_printf_percent$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_charcount
</UL>

<P><STRONG><a name="[263]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[208]"></a>_printf_p</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_p.o(.ARM.Collect$$_printf_percent$$00000002))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_p &rArr; _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
</UL>

<P><STRONG><a name="[20a]"></a>_printf_f</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_f.o(.ARM.Collect$$_printf_percent$$00000003))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = _printf_f &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[20c]"></a>_printf_e</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_e.o(.ARM.Collect$$_printf_percent$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = _printf_e &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[20d]"></a>_printf_g</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_g.o(.ARM.Collect$$_printf_percent$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = _printf_g &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[824]"></a>_printf_a</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_a.o(.ARM.Collect$$_printf_percent$$00000006))

<P><STRONG><a name="[825]"></a>_printf_ll</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_ll.o(.ARM.Collect$$_printf_percent$$00000007))

<P><STRONG><a name="[20e]"></a>_printf_i</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_i.o(.ARM.Collect$$_printf_percent$$00000008))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_i &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[210]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[211]"></a>_printf_u</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_u.o(.ARM.Collect$$_printf_percent$$0000000A))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_u &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[212]"></a>_printf_o</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_o.o(.ARM.Collect$$_printf_percent$$0000000B))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_o &rArr; _printf_int_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[214]"></a>_printf_x</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_x.o(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[216]"></a>_printf_lli</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lli.o(.ARM.Collect$$_printf_percent$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_lli &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[218]"></a>_printf_lld</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lld.o(.ARM.Collect$$_printf_percent$$0000000E))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_lld &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[219]"></a>_printf_llu</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llu.o(.ARM.Collect$$_printf_percent$$0000000F))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_llu &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[21a]"></a>_printf_llo</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llo.o(.ARM.Collect$$_printf_percent$$00000010))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = _printf_llo &rArr; _printf_ll_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct
</UL>

<P><STRONG><a name="[21c]"></a>_printf_llx</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llx.o(.ARM.Collect$$_printf_percent$$00000011))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_llx &rArr; _printf_ll_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
</UL>

<P><STRONG><a name="[826]"></a>_printf_l</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_l.o(.ARM.Collect$$_printf_percent$$00000012))

<P><STRONG><a name="[21e]"></a>_printf_c</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_c.o(.ARM.Collect$$_printf_percent$$00000013))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_c &rArr; _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[220]"></a>_printf_s</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_s.o(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
</UL>

<P><STRONG><a name="[222]"></a>_printf_lc</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lc.o(.ARM.Collect$$_printf_percent$$00000015))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_lc &rArr; _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
</UL>

<P><STRONG><a name="[224]"></a>_printf_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_ls.o(.ARM.Collect$$_printf_percent$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_ls &rArr; _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
</UL>

<P><STRONG><a name="[827]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[22e]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[828]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[829]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[226]"></a>__rt_lib_init_lc_common</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))
<BR><BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>

<P><STRONG><a name="[82a]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[82b]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[82c]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[82d]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[228]"></a>__rt_lib_init_lc_ctype_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000012))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_ctype_2 &rArr; _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[82e]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[82f]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[229]"></a>__rt_lib_init_lc_numeric_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_numeric_2 &rArr; _get_lc_numeric
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[830]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[831]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[832]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[833]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[834]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[835]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[836]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[837]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[838]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[839]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[83a]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[83b]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[83c]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[233]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[83d]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[83e]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[83f]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[840]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[841]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[842]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[843]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[204]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[844]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[22b]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[22d]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[845]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[22f]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 808 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; system_init &rArr; app_system_update &rArr; exf_fdcopy &rArr;  exf_fdcopy (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[846]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[28e]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[232]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[847]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[234]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[60b]"></a>MSR_MSP</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sys.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exeplay_app_check
</UL>

<P><STRONG><a name="[4c]"></a>Reset_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[85]"></a>ADC3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[8e]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[8f]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[90]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[91]"></a>DMA2_Channel4_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[7e]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[86]"></a>FSMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[76]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[75]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[78]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[77]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[7f]"></a>RTCAlarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[79]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[7a]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[89]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[71]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[81]"></a>TIM8_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[84]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[83]"></a>TIM8_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[82]"></a>TIM8_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[8a]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[8b]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[7c]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>USB_HP_CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[286]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[3bc]"></a>OS_CPU_SR_Save</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTick
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStatInit
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxCreate
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;watch_task
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_task
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Read
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vs10xx_save_para
<LI><a href="#[742]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phone_incall_task_creat
<LI><a href="#[765]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sim900a_unigbk_exchange
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_enter
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPost
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPend
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskResume
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPost
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPend
<LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_task_creat
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysset_save_para
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calendar_save_para
<LI><a href="#[71a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_write_partly
<LI><a href="#[71d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_send
<LI><a href="#[71f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv
<LI><a href="#[718]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_listen_with_backlog
<LI><a href="#[721]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_getaddr
<LI><a href="#[709]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_disconnect
<LI><a href="#[719]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_connect
<LI><a href="#[717]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_bind
<LI><a href="#[720]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_accept
<LI><a href="#[685]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_comm_init
<LI><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_comm_dhcp_creat
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeGet
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemQuery
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemDel
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQQuery
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPost
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQDel
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQCreate
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexDel
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexCreate
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStkChk
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameSet
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStat
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskIdle
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSEventNameSet
<LI><a href="#[682]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
<LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[732]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_pool_is_empty
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free_ooseq_callback
<LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_trim
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_tcp
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_tcp
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_connected
<LI><a href="#[72a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_data
<LI><a href="#[726]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_close_shutdown
<LI><a href="#[780]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_thread_new
</UL>

<P><STRONG><a name="[3bd]"></a>OS_CPU_SR_Restore</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTick
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStatInit
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxCreate
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;watch_task
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_task
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Read
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vs10xx_save_para
<LI><a href="#[742]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phone_incall_task_creat
<LI><a href="#[765]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sim900a_unigbk_exchange
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_leave
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPost
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPend
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskResume
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPost
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPend
<LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_task_creat
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysset_save_para
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calendar_save_para
<LI><a href="#[71a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_write_partly
<LI><a href="#[71d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_send
<LI><a href="#[71f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv
<LI><a href="#[718]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_listen_with_backlog
<LI><a href="#[721]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_getaddr
<LI><a href="#[709]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_disconnect
<LI><a href="#[719]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_connect
<LI><a href="#[717]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_bind
<LI><a href="#[720]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_accept
<LI><a href="#[685]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_comm_init
<LI><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_comm_dhcp_creat
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeGet
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemQuery
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemDel
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQQuery
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPost
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQDel
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQCreate
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexDel
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexCreate
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStkChk
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameSet
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStat
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskIdle
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSEventNameSet
<LI><a href="#[682]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
<LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[732]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_pool_is_empty
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free_ooseq_callback
<LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_trim
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_tcp
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_tcp
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_connected
<LI><a href="#[72a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_data
<LI><a href="#[726]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_close_shutdown
<LI><a href="#[780]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_thread_new
</UL>

<P><STRONG><a name="[3e0]"></a>OSStartHighRdy</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStart
</UL>

<P><STRONG><a name="[3f2]"></a>OSCtxSw</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[3c8]"></a>OSIntCtxSw</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
</UL>

<P><STRONG><a name="[54]"></a>PendSV_Handler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[236]"></a>alientek_ncr_stop</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, recognition.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = alientek_ncr_stop &rArr; alientek_ncr_free &rArr; myfree &rArr; my_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alientek_ncr_free
</UL>
<BR>[Called By]<UL><LI><a href="#[722]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t9_delete
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alientek_ncr_init
<LI><a href="#[7a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t9_set_inputtype
</UL>

<P><STRONG><a name="[238]"></a>alientek_ncr_init</STRONG> (Thumb, 148 bytes, Stack size 8 bytes, recognition.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = alientek_ncr_init &rArr; alientek_ncr_malloc &rArr; mymalloc &rArr; my_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alientek_ncr_malloc
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alientek_ncr_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[7a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t9_set_inputtype
</UL>

<P><STRONG><a name="[23a]"></a>QuickSort</STRONG> (Thumb, 188 bytes, Stack size 32 bytes, recognition.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + In Cycle
<LI>Call Chain = QuickSort &rArr;  QuickSort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuickSort
</UL>
<BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recog
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuickSort
</UL>

<P><STRONG><a name="[23e]"></a>matrix_multiplication</STRONG> (Thumb, 108 bytes, Stack size 40 bytes, recognition.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = matrix_multiplication &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recog
</UL>

<P><STRONG><a name="[246]"></a>CalcDirect</STRONG> (Thumb, 266 bytes, Stack size 0 bytes, recognition.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FeaExtractByGradient
</UL>

<P><STRONG><a name="[245]"></a>GetPot</STRONG> (Thumb, 58 bytes, Stack size 12 bytes, recognition.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GetPot
</UL>
<BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FeaExtractByGradient
</UL>

<P><STRONG><a name="[241]"></a>OverallElasticMesh</STRONG> (Thumb, 526 bytes, Stack size 48 bytes, recognition.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = OverallElasticMesh &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alientek_ncr_memset
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FeaExtractByGradient
</UL>

<P><STRONG><a name="[244]"></a>FeaExtractByGradient</STRONG> (Thumb, 1888 bytes, Stack size 104 bytes, recognition.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = FeaExtractByGradient &rArr; powf &rArr; _ffix_r &rArr; __fpl_fnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alientek_ncr_memset
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powf
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OverallElasticMesh
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPot
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcDirect
</UL>
<BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recog
</UL>

<P><STRONG><a name="[248]"></a>DDA_IMAGE</STRONG> (Thumb, 1352 bytes, Stack size 96 bytes, recognition.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = DDA_IMAGE &rArr; __aeabi_cdcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recog
</UL>

<P><STRONG><a name="[24f]"></a>LinearNorm_data</STRONG> (Thumb, 276 bytes, Stack size 36 bytes, recognition.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = LinearNorm_data
</UL>
<BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recog
</UL>

<P><STRONG><a name="[24b]"></a>DDA_atk_ncr_point</STRONG> (Thumb, 568 bytes, Stack size 64 bytes, recognition.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = DDA_atk_ncr_point &rArr; __aeabi_cdcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recog
</UL>

<P><STRONG><a name="[24c]"></a>SmoothFilter</STRONG> (Thumb, 206 bytes, Stack size 40 bytes, recognition.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SmoothFilter &rArr; alientek_ncr_malloc &rArr; mymalloc &rArr; my_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alientek_ncr_malloc
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alientek_ncr_free
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recog
</UL>

<P><STRONG><a name="[24e]"></a>recog</STRONG> (Thumb, 712 bytes, Stack size 120 bytes, recognition.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = recog &rArr; FeaExtractByGradient &rArr; powf &rArr; _ffix_r &rArr; __fpl_fnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alientek_ncr_memset
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alientek_ncr_malloc
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alientek_ncr_free
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmoothFilter
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDA_atk_ncr_point
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinearNorm_data
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDA_IMAGE
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FeaExtractByGradient
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrix_multiplication
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuickSort
</UL>
<BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alientek_ncr
</UL>

<P><STRONG><a name="[251]"></a>alientek_ncr</STRONG> (Thumb, 250 bytes, Stack size 40 bytes, recognition.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = alientek_ncr &rArr; recog &rArr; FeaExtractByGradient &rArr; powf &rArr; _ffix_r &rArr; __fpl_fnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recog
</UL>
<BR>[Called By]<UL><LI><a href="#[715]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t9_check
</UL>

<P><STRONG><a name="[848]"></a>ExtractPoint</STRONG> (Thumb, 498 bytes, Stack size 40 bytes, recognition.o(.text), UNUSED)

<P><STRONG><a name="[849]"></a>__use_no_semihosting</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi_2.o(.text), UNUSED)

<P><STRONG><a name="[252]"></a>__rt_ctype_table</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rt_ctype_table.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isspace
</UL>

<P><STRONG><a name="[254]"></a>__aeabi_uldivmod</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, lludivv7m.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Memory
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_sdiv
</UL>

<P><STRONG><a name="[84a]"></a>_ll_udiv</STRONG> (Thumb, 238 bytes, Stack size 48 bytes, lludivv7m.o(.text), UNUSED)

<P><STRONG><a name="[4b4]"></a>__aeabi_ldivmod</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llsdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_ldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[6bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_play
<LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
<LI><a href="#[642]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_st_biases
<LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_num2str
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_show_num
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_show_float
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_numlen
<LI><a href="#[74a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progressbar_show_percnt
</UL>

<P><STRONG><a name="[253]"></a>_ll_sdiv</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, llsdiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[255]"></a>__c89vsprintf</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, c89vsprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[73c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u3_printf
</UL>

<P><STRONG><a name="[257]"></a>__2printf</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, __2printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>
<BR>[Called By]<UL><LI><a href="#[6ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysset_play
<LI><a href="#[762]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sim900a_cmsgin_check
<LI><a href="#[6be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recorder_play
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_system_update
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_system_file_check
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_boot_cpdmsg
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPAD_Init
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM9000_Init
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_task
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Erase_Sector
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTT2001A_Init
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT9147_Init
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT5206_Init
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA9000_ISRHandler
<LI><a href="#[73c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u3_printf
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV7725_Init
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_enter
<LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mf_write
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mf_showfree
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mf_scan_files
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mf_readdir
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mf_read
<LI><a href="#[7eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_sys_cmd_exe
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_scan
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_exe
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM9000_Receive_Packet
<LI><a href="#[6df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_init
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_play_task
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calendar_alarm_init
<LI><a href="#[71a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_write_partly
<LI><a href="#[71d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_send
<LI><a href="#[71f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv
<LI><a href="#[716]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new_with_proto_and_callback
<LI><a href="#[718]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_listen_with_backlog
<LI><a href="#[721]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_getaddr
<LI><a href="#[709]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_disconnect
<LI><a href="#[719]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_connect
<LI><a href="#[717]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_bind
<LI><a href="#[720]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_accept
<LI><a href="#[71c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_alloc
<LI><a href="#[685]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_test
<LI><a href="#[703]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nes_sound_open
<LI><a href="#[700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nes_load_rom
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_6502
<LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_free
<LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_add
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_init
<LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_stop
<LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_dhcp_task
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_NotConfigured_LED
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Cable_Config
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Leave_LowPowerMode
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enter_LowPowerMode
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
<LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_parse_reply
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_short
<LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_long
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_byte
<LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_msg
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
<LI><a href="#[683]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloced_custom
<LI><a href="#[682]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipfrag_free_pbuf_custom
<LI><a href="#[68e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_free_complete_datagram
<LI><a href="#[68d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_dequeue_datagram
<LI><a href="#[68c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_chain_frag_into_datagram_and_validate
<LI><a href="#[684]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag_free_pbuf_custom_ref
<LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[689]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag
<LI><a href="#[679]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if
<LI><a href="#[67a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
<LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[675]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
<LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_arp_reply
<LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
<LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
<LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_update_arp_entry
<LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_send_ip
<LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
<LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output_to_arp_index
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_find_entry
<LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_arp_input
<LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_sent
<LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_poll
<LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_with_backlog
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_err
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_bind
<LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy_partial
<LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
<LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc
<LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_set_ssi_handler
<LI><a href="#[66b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_set_cgi_handlers
<LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpd_init_addr
<LI><a href="#[66a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_write
<LI><a href="#[668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_send_data
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_recv
<LI><a href="#[664]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_parse_request
<LI><a href="#[662]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_init_file
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_accept
<LI><a href="#[643]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_tag_insert
<LI><a href="#[7d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write_checks
<LI><a href="#[7ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pbuf_prealloc
<LI><a href="#[7c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header
<LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[7c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[7b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[7c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
<LI><a href="#[7d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_update_rcv_ann_wnd
<LI><a href="#[7d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[7b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[7b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
<LI><a href="#[7bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
<LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_new
<LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_trim
<LI><a href="#[6c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plug_holes
<LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_init
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_thread
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sent_tcp
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_udp
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_tcp
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poll_tcp
<LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcb_new
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_tcp
<LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_writemore
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_connected
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_close_internal
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_free
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_alloc
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_write
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_getaddr
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_delconn
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_connect
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_close
<LI><a href="#[72a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_data
<LI><a href="#[726]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_close_shutdown
<LI><a href="#[724]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_free
<LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_new
<LI><a href="#[723]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_fetch
<LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
</UL>

<P><STRONG><a name="[259]"></a>__2sprintf</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, __2sprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[6c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sms_play
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_system_update
<LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_init
<LI><a href="#[730]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;paint_show_colorval
<LI><a href="#[72e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;paint_new_pathname
<LI><a href="#[72c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;notepad_new_pathname
<LI><a href="#[78b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysset_system_about
<LI><a href="#[782]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysset_bklight_set
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_info_upd
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro_circle_yaw
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro_circle_roll
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro_circle_pitch
<LI><a href="#[774]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sms_send_sms
<LI><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sms_read_sms
<LI><a href="#[769]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sms_delete_sms
<LI><a href="#[73b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phone_show_time
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_show_res
<LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_fmt_show
<LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_test
<LI><a href="#[70f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_msg_show
<LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_load_ui
<LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_new_pathname
<LI><a href="#[753]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recorder_show_samplerate
<LI><a href="#[752]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recorder_new_pathname
</UL>

<P><STRONG><a name="[25b]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
</UL>

<P><STRONG><a name="[25c]"></a>_printf_post_padding</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
</UL>

<P><STRONG><a name="[25a]"></a>_printf_str</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[20f]"></a>_printf_int_dec</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_signed
</UL>
<BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_i
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_u
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[260]"></a>_printf_longlong_hex</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[215]"></a>_printf_int_hex</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[21d]"></a>_printf_ll_hex</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_ll_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llx
</UL>

<P><STRONG><a name="[209]"></a>_printf_hex_ptr</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_p
</UL>

<P><STRONG><a name="[261]"></a>__printf</STRONG> (Thumb, 388 bytes, Stack size 40 bytes, __printf_flags_ss_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[264]"></a>atoi</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, atoi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[70d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_get_port
<LI><a href="#[70c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_get_ip
</UL>

<P><STRONG><a name="[612]"></a>strchr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, strchr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_find_file
<LI><a href="#[611]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extract_uri_parameters
</UL>

<P><STRONG><a name="[4cd]"></a>strstr</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, strstr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[764]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sim900a_status_check
<LI><a href="#[762]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sim900a_cmsgin_check
<LI><a href="#[73a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sim900a_check_cmd
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_muti_remind_msg
<LI><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sms_read_sms
<LI><a href="#[76d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sms_get_smsnum
<LI><a href="#[70c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_get_ip
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filelistbox_show_path
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_find_file
</UL>

<P><STRONG><a name="[603]"></a>memcmp</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_load_firmware
<LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
</UL>

<P><STRONG><a name="[4ce]"></a>strcpy</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, strcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[79d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_font
<LI><a href="#[6c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sms_play
<LI><a href="#[762]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sim900a_cmsgin_check
<LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_play
<LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_init
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_typetell
<LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memo_add_text
<LI><a href="#[789]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysset_system_info
<LI><a href="#[78b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysset_system_about
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_filelist
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_path_name
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_system_file_chgdisk
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_muti_remind_msg
<LI><a href="#[774]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sms_send_sms
<LI><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sms_read_sms
<LI><a href="#[769]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sms_delete_sms
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phone_incall_task
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_show_res
<LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_add_text
<LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_test
<LI><a href="#[70c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_get_ip
<LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filelistbox_show_info
<LI><a href="#[630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filelistbox_check_filelist
<LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filelistbox_addlist
<LI><a href="#[7ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t9_hbtn_process
<LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_open
</UL>

<P><STRONG><a name="[444]"></a>strlen</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, strlen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;picviewer_play
<LI><a href="#[6bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;paint_play
<LI><a href="#[6bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;notepad_play
<LI><a href="#[6bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nes_play
<LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exe_play
<LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebook_play
<LI><a href="#[73c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u3_printf
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exf_fdsize
<LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exf_fdcopy
<LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memo_add_text
<LI><a href="#[789]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysset_system_info
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lrc_show_linelrc
<LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lrc_read
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_play_task
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_info_upd
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_filelist
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filelistbox_check
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filelistbox_add_disk
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_msg_box
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;listbox_check
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_show_strmid
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_muti_remind_msg
<LI><a href="#[774]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sms_send_sms
<LI><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sms_read_sms
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phone_incall_task
<LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_show_inbuf
<LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_fmt_show
<LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_add_text
<LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_test
<LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_load_ui
<LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;listbox_draw_list
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filelistbox_show_path
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filelistbox_draw_list
<LI><a href="#[630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filelistbox_check_filelist
<LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filelistbox_addlist
<LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_cursor_set
<LI><a href="#[7b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t9_vbtn_process
<LI><a href="#[7a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t9_process
<LI><a href="#[7af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t9_pinyin_process
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSIHandler
<LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strnstr
<LI><a href="#[643]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_tag_insert
</UL>

<P><STRONG><a name="[666]"></a>strncmp</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nes_load_rom
<LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strnstr
<LI><a href="#[664]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_parse_request
</UL>

<P><STRONG><a name="[563]"></a>strcat</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, strcat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[79d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_font
<LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_play
<LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_init
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exf_fdsize
<LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exf_fdcopy
<LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memo_add_text
<LI><a href="#[789]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysset_system_info
<LI><a href="#[78b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysset_system_about
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_path_name
<LI><a href="#[774]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sms_send_sms
<LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_add_text
<LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_test
<LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filelistbox_show_info
<LI><a href="#[7b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t9_sign_process
<LI><a href="#[7af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t9_pinyin_process
<LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_open
</UL>

<P><STRONG><a name="[24d]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteDisk
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadDisk
<LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_test
<LI><a href="#[63d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_read
<LI><a href="#[68e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_free_complete_datagram
<LI><a href="#[686]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass
<LI><a href="#[680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag
<LI><a href="#[675]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
<LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy
<LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy_partial
<LI><a href="#[643]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_tag_insert
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recog
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmoothFilter
</UL>

<P><STRONG><a name="[267]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[84b]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[268]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[643]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_tag_insert
<LI><a href="#[7d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_copy
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL>

<P><STRONG><a name="[84c]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[84d]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[84e]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[269]"></a>__aeabi_memset</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, aeabi_memset.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_lp_quat
<LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_6x_lp_quat
</UL>

<P><STRONG><a name="[26e]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spb_init
<LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phone_play
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_play
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spb_delete
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phone_incall_task
<LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_comm_destroy
<LI><a href="#[6fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nes_sram_malloc
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>

<P><STRONG><a name="[26b]"></a>__rt_memclr</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[26a]"></a>_memset</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[58d]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_comm_destroy
<LI><a href="#[6fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nes_sram_malloc
<LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
<LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_scanline_and_draw
<LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new
<LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_parse_reply
<LI><a href="#[686]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_accept
<LI><a href="#[7b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
<LI><a href="#[736]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_new
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
</UL>

<P><STRONG><a name="[84f]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[850]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[26c]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL>

<P><STRONG><a name="[26d]"></a>strncpy</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, strncpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sms_read_sms
</UL>

<P><STRONG><a name="[2b4]"></a>strcmp</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, strcmpv7m.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT9147_Init
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_typetell
<LI><a href="#[774]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sms_send_sms
<LI><a href="#[630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filelistbox_check_filelist
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDS_CGI_Handler
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BEEP_CGI_Handler
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindCGIParameter
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_find_file
<LI><a href="#[643]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_tag_insert
<LI><a href="#[780]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_thread_new
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[851]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[852]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[853]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[854]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[855]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[227]"></a>__rt_locale</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_locale_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_common
</UL>

<P><STRONG><a name="[265]"></a>__aeabi_errno_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__read_errno
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>

<P><STRONG><a name="[856]"></a>__errno$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[857]"></a>__rt_errno_addr$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[26f]"></a>__read_errno</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, _rserrno.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __read_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atof
</UL>

<P><STRONG><a name="[270]"></a>__set_errno</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, _rserrno.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tan
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powf
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log10
<LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atof
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ldexp
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_tofloat
</UL>

<P><STRONG><a name="[25d]"></a>_printf_truncate_signed</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[25e]"></a>_printf_truncate_unsigned</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[25f]"></a>_printf_int_common</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[207]"></a>_printf_charcount</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, _printf_charcount.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_n
</UL>

<P><STRONG><a name="[858]"></a>__lib_sel_fp_printf</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, _printf_fp_dec.o(.text), UNUSED)

<P><STRONG><a name="[277]"></a>_printf_fp_dec_real</STRONG> (Thumb, 620 bytes, Stack size 104 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
</UL>
<BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[256]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89vsprintf
</UL>

<P><STRONG><a name="[95]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _sputc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89vsprintf
</UL>
<BR>[Address Reference Count : 2]<UL><LI> c89vsprintf.o(.text)
<LI> __2sprintf.o(.text)
</UL>
<P><STRONG><a name="[27a]"></a>_printf_cs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[21f]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_c
</UL>

<P><STRONG><a name="[221]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[258]"></a>_printf_char_file</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, _printf_char_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ferror
</UL>
<BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[27c]"></a>_printf_wctomb</STRONG> (Thumb, 182 bytes, Stack size 56 bytes, _printf_wctomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb
</UL>
<BR>[Called By]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>

<P><STRONG><a name="[217]"></a>_printf_longlong_dec</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, _printf_longlong_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llu
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lld
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lli
</UL>

<P><STRONG><a name="[27e]"></a>_printf_longlong_oct</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[213]"></a>_printf_int_oct</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_int_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_o
</UL>

<P><STRONG><a name="[21b]"></a>_printf_ll_oct</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_ll_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llo
</UL>

<P><STRONG><a name="[281]"></a>__strtod_int</STRONG> (Thumb, 90 bytes, Stack size 40 bytes, strtod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = __strtod_int &rArr; _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_local_sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atof
</UL>

<P><STRONG><a name="[266]"></a>strtol</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, strtol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>
<BR>[Called By]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[859]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[285]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[85a]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[276]"></a>_ll_udiv10</STRONG> (Thumb, 138 bytes, Stack size 12 bytes, lludiv10.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[9a]"></a>isspace</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, isspace.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = isspace &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Address Reference Count : 1]<UL><LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[279]"></a>_printf_fp_infnan</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, _printf_fp_infnan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[283]"></a>_printf_lcs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
</UL>

<P><STRONG><a name="[223]"></a>_printf_wchar</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lc
</UL>

<P><STRONG><a name="[225]"></a>_printf_wstring</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ls
</UL>

<P><STRONG><a name="[98]"></a>_sgetc</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[99]"></a>_sbackspace</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[282]"></a>_strtoul</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, _strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
</UL>
<BR>[Called By]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[272]"></a>_btod_etento</STRONG> (Thumb, 224 bytes, Stack size 72 bytes, bigflt0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>
<BR>[Called By]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[27b]"></a>ferror</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ferror.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[27d]"></a>_wcrtomb</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, _wcrtomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>

<P><STRONG><a name="[22c]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[284]"></a>_chval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_hex_real
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>

<P><STRONG><a name="[28a]"></a>_scanf_really_real</STRONG> (Thumb, 684 bytes, Stack size 120 bytes, scanf_fp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_narrow
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_infnan
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_hex_real
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>
<BR>[Called By]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_real
</UL>

<P><STRONG><a name="[231]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[28f]"></a>_scanf_really_hex_real</STRONG> (Thumb, 786 bytes, Stack size 80 bytes, scanf_hexfp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = _scanf_really_hex_real &rArr; __support_ldexp &rArr; ldexp &rArr; __aeabi_cdcmpeq
</UL>
<BR>[Calls]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__support_ldexp
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_narrow
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
</UL>
<BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_hex_real
</UL>

<P><STRONG><a name="[81e]"></a>_scanf_really_infnan</STRONG> (Thumb, 292 bytes, Stack size 72 bytes, scanf_infnan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _scanf_really_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_infnan
</UL>

<P><STRONG><a name="[290]"></a>__aeabi_llsl</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_hex_real
</UL>

<P><STRONG><a name="[85b]"></a>_ll_shift_l</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[273]"></a>_btod_d2e</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e))
<BR><BR>[Calls]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>
<BR>[Called By]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[293]"></a>_d2e_denorm_low</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_denorm_low))
<BR><BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>

<P><STRONG><a name="[292]"></a>_d2e_norm_op1</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_norm_op1))
<BR><BR>[Calls]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_denorm_low
</UL>
<BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
</UL>

<P><STRONG><a name="[296]"></a>__btod_div_common</STRONG> (Thumb, 696 bytes, Stack size 24 bytes, btod.o(CL$$btod_div_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_edivd
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[294]"></a>_e2d</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, btod.o(CL$$btod_e2d))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _e2d &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emuld
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_edivd
</UL>

<P><STRONG><a name="[295]"></a>_e2e</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, btod.o(CL$$btod_e2e))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2d
</UL>

<P><STRONG><a name="[274]"></a>_btod_ediv</STRONG> (Thumb, 42 bytes, Stack size 28 bytes, btod.o(CL$$btod_ediv))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _btod_ediv &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
</UL>

<P><STRONG><a name="[289]"></a>_btod_edivd</STRONG> (Thumb, 42 bytes, Stack size 28 bytes, btod.o(CL$$btod_edivd))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = _btod_edivd &rArr; _e2d &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2d
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[275]"></a>_btod_emul</STRONG> (Thumb, 42 bytes, Stack size 28 bytes, btod.o(CL$$btod_emul))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_mult_common
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
</UL>

<P><STRONG><a name="[288]"></a>_btod_emuld</STRONG> (Thumb, 42 bytes, Stack size 28 bytes, btod.o(CL$$btod_emuld))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = _btod_emuld &rArr; _e2d &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_mult_common
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2d
</UL>
<BR>[Called By]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[297]"></a>__btod_mult_common</STRONG> (Thumb, 580 bytes, Stack size 16 bytes, btod.o(CL$$btod_mult_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __btod_mult_common
</UL>
<BR>[Called By]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emuld
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
</UL>

<P><STRONG><a name="[29c]"></a>run6502</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, 6502.o(cpu_run))
<BR><BR>[Calls]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI6502
</UL>
<BR>[Called By]<UL><LI><a href="#[6f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nes_emulate_frame
</UL>

<P><STRONG><a name="[29d]"></a>NMI6502</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, 6502.o(cpu_run))
<BR><BR>[Called By]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run6502
</UL>

<P><STRONG><a name="[7f8]"></a>CPU_reset</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, 6502.o(cpu_run))
<BR><BR>[Called By]<UL><LI><a href="#[702]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu6502_init
</UL>

<P><STRONG><a name="[29e]"></a>ADC_Handler</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, httpd_cgi_ssi.o(i.ADC_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = ADC_Handler &rArr; Get_Adc_Average &rArr; delay_ms &rArr; delay_us &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Adc_Average
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSIHandler
</UL>

<P><STRONG><a name="[2a3]"></a>AT24CXX_Check</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, 24cxx.o(i.AT24CXX_Check))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = AT24CXX_Check &rArr; AT24CXX_ReadOneByte &rArr; IIC_Read_Byte &rArr; IIC_NAck &rArr; delay_us &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_WriteOneByte
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_ReadOneByte
</UL>
<BR>[Called By]<UL><LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_init
</UL>

<P><STRONG><a name="[2a6]"></a>AT24CXX_Init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, 24cxx.o(i.AT24CXX_Init))
<BR><BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Init
<LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_init
</UL>

<P><STRONG><a name="[2a8]"></a>AT24CXX_Read</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, 24cxx.o(i.AT24CXX_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = AT24CXX_Read &rArr; AT24CXX_ReadOneByte &rArr; IIC_Read_Byte &rArr; IIC_NAck &rArr; delay_us &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_ReadOneByte
</UL>
<BR>[Called By]<UL><LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Get_Adjdata
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vs10xx_read_para
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysset_read_para
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calendar_read_para
</UL>

<P><STRONG><a name="[2a4]"></a>AT24CXX_ReadOneByte</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, 24cxx.o(i.AT24CXX_ReadOneByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = AT24CXX_ReadOneByte &rArr; IIC_Read_Byte &rArr; IIC_NAck &rArr; delay_us &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Send_Byte
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Check
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Get_Adjdata
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Read
</UL>

<P><STRONG><a name="[2ae]"></a>AT24CXX_Write</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, 24cxx.o(i.AT24CXX_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = AT24CXX_Write &rArr; AT24CXX_WriteOneByte &rArr; IIC_Wait_Ack &rArr; IIC_Stop &rArr; delay_us &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_WriteOneByte
</UL>
<BR>[Called By]<UL><LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Save_Adjdata
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vs10xx_save_para
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysset_save_para
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calendar_save_para
</UL>

<P><STRONG><a name="[2a5]"></a>AT24CXX_WriteOneByte</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, 24cxx.o(i.AT24CXX_WriteOneByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = AT24CXX_WriteOneByte &rArr; IIC_Wait_Ack &rArr; IIC_Stop &rArr; delay_us &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Send_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Check
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Save_Adjdata
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Write
</UL>

<P><STRONG><a name="[333]"></a>Adc3_Init</STRONG> (Thumb, 182 bytes, Stack size 0 bytes, adc.o(i.Adc3_Init))
<BR><BR>[Called By]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lsens_Init
</UL>

<P><STRONG><a name="[799]"></a>Adc_Init</STRONG> (Thumb, 224 bytes, Stack size 0 bytes, adc.o(i.Adc_Init))
<BR><BR>[Called By]<UL><LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_init
</UL>

<P><STRONG><a name="[7f7]"></a>Apu_Read4015</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, nes_apu.o(i.Apu_Read4015))
<BR><BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apu_4015R
</UL>

<P><STRONG><a name="[2b0]"></a>Apu_Write</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, nes_apu.o(i.Apu_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Apu_Write &rArr; apu_enqueue
</UL>
<BR>[Calls]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apu_enqueue
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apu_w
</UL>

<P><STRONG><a name="[2b2]"></a>Apu_Write4015</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, nes_apu.o(i.Apu_Write4015))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Apu_Write4015 &rArr; apu_enqueue
</UL>
<BR>[Calls]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apu_enqueue
</UL>
<BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apu_4015w
</UL>

<P><STRONG><a name="[7f6]"></a>Apu_Write4017</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, nes_apu.o(i.Apu_Write4017))
<BR><BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apu_4017w
</UL>

<P><STRONG><a name="[201]"></a>BEEP_CGI_Handler</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, httpd_cgi_ssi.o(i.BEEP_CGI_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = BEEP_CGI_Handler &rArr; FindCGIParameter
</UL>
<BR>[Calls]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindCGIParameter
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> httpd_cgi_ssi.o(.constdata)
</UL>
<P><STRONG><a name="[797]"></a>BEEP_Init</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, beep.o(i.BEEP_Init))
<BR><BR>[Called By]<UL><LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_init
</UL>

<P><STRONG><a name="[2b5]"></a>Bot_Abort</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, usb_bot.o(i.Bot_Abort))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Bot_Abort
</UL>
<BR>[Calls]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPRxStatus
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPTxStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Address_Management
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mass_Storage_ClearFeature
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Write10_Cmd
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Verify10_Cmd
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_TestUnitReady_Cmd
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ReadFormatCapacity_Cmd
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ReadCapacity10_Cmd
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Read10_Cmd
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Invalid_Cmd
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Format_Cmd
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mass_Storage_Out
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBW_Decode
</UL>

<P><STRONG><a name="[445]"></a>ByteSwap</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usb_regs.o(i.ByteSwap))
<BR><BR>[Called By]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup0_Process
</UL>

<P><STRONG><a name="[2b8]"></a>CBW_Decode</STRONG> (Thumb, 388 bytes, Stack size 8 bytes, usb_bot.o(i.CBW_Decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = CBW_Decode &rArr; SCSI_Write10_Cmd &rArr; Write_Memory &rArr; MAL_Write &rArr; W25QXX_Write &rArr; W25QXX_Erase_Sector &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Scsi_Sense_Data
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Write10_Cmd
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Verify10_Cmd
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_TestUnitReady_Cmd
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Start_Stop_Unit_Cmd
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_RequestSense_Cmd
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ReadFormatCapacity_Cmd
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ReadCapacity10_Cmd
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Read10_Cmd
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ModeSense6_Cmd
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ModeSense10_Cmd
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Invalid_Cmd
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Inquiry_Cmd
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Format_Cmd
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bot_Abort
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_CSW
</UL>
<BR>[Called By]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mass_Storage_Out
</UL>

<P><STRONG><a name="[2c8]"></a>CTR_LP</STRONG> (Thumb, 314 bytes, Stack size 40 bytes, usb_int.o(i.CTR_LP))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = CTR_LP &rArr; Setup0_Process &rArr; Data_Setup0 &rArr; DataStageIn &rArr; UserToPMABufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup0_Process
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Out0_Process
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;In0_Process
</UL>
<BR>[Called By]<UL><LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Istr
</UL>

<P><STRONG><a name="[2cc]"></a>CT_IIC_Ack</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, ctiic.o(i.CT_IIC_Ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = CT_IIC_Ack &rArr; delay_us &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT_IIC_Read_Byte
</UL>

<P><STRONG><a name="[300]"></a>CT_IIC_Init</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, ctiic.o(i.CT_IIC_Init))
<BR><BR>[Called By]<UL><LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTT2001A_Init
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT9147_Init
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT5206_Init
</UL>

<P><STRONG><a name="[2cd]"></a>CT_IIC_NAck</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, ctiic.o(i.CT_IIC_NAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = CT_IIC_NAck &rArr; delay_us &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT_IIC_Read_Byte
</UL>

<P><STRONG><a name="[2ce]"></a>CT_IIC_Read_Byte</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, ctiic.o(i.CT_IIC_Read_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = CT_IIC_Read_Byte &rArr; CT_IIC_NAck &rArr; delay_us &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT_IIC_NAck
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT_IIC_Ack
</UL>
<BR>[Called By]<UL><LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTT2001A_RD_Reg
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT9147_RD_Reg
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT5206_RD_Reg
</UL>

<P><STRONG><a name="[2cf]"></a>CT_IIC_Send_Byte</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, ctiic.o(i.CT_IIC_Send_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = CT_IIC_Send_Byte &rArr; delay_us &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTT2001A_WR_Reg
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTT2001A_RD_Reg
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT9147_WR_Reg
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT9147_RD_Reg
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT5206_WR_Reg
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT5206_RD_Reg
</UL>

<P><STRONG><a name="[2d0]"></a>CT_IIC_Start</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, ctiic.o(i.CT_IIC_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = CT_IIC_Start &rArr; delay_us &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTT2001A_WR_Reg
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTT2001A_RD_Reg
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT9147_WR_Reg
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT9147_RD_Reg
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT5206_WR_Reg
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT5206_RD_Reg
</UL>

<P><STRONG><a name="[2d1]"></a>CT_IIC_Stop</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, ctiic.o(i.CT_IIC_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = CT_IIC_Stop &rArr; delay_us &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTT2001A_WR_Reg
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTT2001A_RD_Reg
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT9147_WR_Reg
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT9147_RD_Reg
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT5206_WR_Reg
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT5206_RD_Reg
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT_IIC_Wait_Ack
</UL>

<P><STRONG><a name="[2d2]"></a>CT_IIC_Wait_Ack</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, ctiic.o(i.CT_IIC_Wait_Ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = CT_IIC_Wait_Ack &rArr; CT_IIC_Stop &rArr; delay_us &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT_IIC_Stop
</UL>
<BR>[Called By]<UL><LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTT2001A_WR_Reg
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTT2001A_RD_Reg
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT9147_WR_Reg
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT9147_RD_Reg
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT5206_WR_Reg
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT5206_RD_Reg
</UL>

<P><STRONG><a name="[357]"></a>ClearDTOG_RX</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, usb_regs.o(i.ClearDTOG_RX))
<BR><BR>[Called By]<UL><LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_ClearFeature
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mass_Storage_SetConfiguration
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MASS_NoData_Setup
</UL>

<P><STRONG><a name="[356]"></a>ClearDTOG_TX</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, usb_regs.o(i.ClearDTOG_TX))
<BR><BR>[Called By]<UL><LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_ClearFeature
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mass_Storage_SetConfiguration
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MASS_NoData_Setup
</UL>

<P><STRONG><a name="[35d]"></a>Clear_Status_Out</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, usb_regs.o(i.Clear_Status_Out))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MASS_Reset
</UL>

<P><STRONG><a name="[434]"></a>CmdError</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, sdio_sdcard.o(i.CmdError))
<BR><BR>[Called By]<UL><LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
</UL>

<P><STRONG><a name="[305]"></a>CmdResp1Error</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, sdio_sdcard.o(i.CmdResp1Error))
<BR><BR>[Called By]<UL><LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlock
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendStatus
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SelectDeselect
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultiBlocks
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlock
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ProcessIRQSrc
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDEnWideBus
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindSCR
</UL>

<P><STRONG><a name="[432]"></a>CmdResp2Error</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, sdio_sdcard.o(i.CmdResp2Error))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CmdResp2Error
</UL>
<BR>[Called By]<UL><LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitializeCards
</UL>

<P><STRONG><a name="[436]"></a>CmdResp3Error</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, sdio_sdcard.o(i.CmdResp3Error))
<BR><BR>[Called By]<UL><LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
</UL>

<P><STRONG><a name="[433]"></a>CmdResp6Error</STRONG> (Thumb, 98 bytes, Stack size 12 bytes, sdio_sdcard.o(i.CmdResp6Error))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CmdResp6Error
</UL>
<BR>[Called By]<UL><LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitializeCards
</UL>

<P><STRONG><a name="[435]"></a>CmdResp7Error</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, sdio_sdcard.o(i.CmdResp7Error))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CmdResp7Error
</UL>
<BR>[Called By]<UL><LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
</UL>

<P><STRONG><a name="[2d3]"></a>DM9000_Get_DeiviceID</STRONG> (Thumb, 42 bytes, Stack size 4 bytes, dm9000.o(i.DM9000_Get_DeiviceID))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = DM9000_Get_DeiviceID
</UL>
<BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM9000_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM9000_Init
</UL>

<P><STRONG><a name="[2d4]"></a>DM9000_Get_SpeedAndDuplex</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, dm9000.o(i.DM9000_Get_SpeedAndDuplex))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = DM9000_Get_SpeedAndDuplex &rArr; DM9000_PHY_ReadReg &rArr; delay_ms &rArr; delay_us &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM9000_ReadReg
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM9000_PHY_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM9000_Init
<LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_load_ui
</UL>

<P><STRONG><a name="[2d7]"></a>DM9000_Init</STRONG> (Thumb, 518 bytes, Stack size 16 bytes, dm9000.o(i.DM9000_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = DM9000_Init &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MY_NVIC_Init
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ex_NVIC_Config
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM9000_WriteReg
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM9000_Set_PHYMode
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM9000_Set_Multicast
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM9000_Set_MACAddress
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM9000_Reset
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM9000_Get_SpeedAndDuplex
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM9000_Get_DeiviceID
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_init
<LI><a href="#[6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_comm_init
</UL>

<P><STRONG><a name="[2d6]"></a>DM9000_PHY_ReadReg</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, dm9000.o(i.DM9000_PHY_ReadReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = DM9000_PHY_ReadReg &rArr; delay_ms &rArr; delay_us &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM9000_WriteReg
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM9000_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM9000_Get_SpeedAndDuplex
</UL>

<P><STRONG><a name="[2de]"></a>DM9000_PHY_WriteReg</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, dm9000.o(i.DM9000_PHY_WriteReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = DM9000_PHY_WriteReg &rArr; delay_ms &rArr; delay_us &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM9000_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM9000_Set_PHYMode
</UL>

<P><STRONG><a name="[b]"></a>DM9000_ReadReg</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dm9000.o(i.DM9000_ReadReg))
<BR><BR>[Called By]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA9000_ISRHandler
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM9000_SendPacket
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM9000_Reset
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM9000_Receive_Packet
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM9000_PHY_ReadReg
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM9000_Get_SpeedAndDuplex
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM9000_Get_DeiviceID
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usmart_config.o(.data)
</UL>
<P><STRONG><a name="[2df]"></a>DM9000_Receive_Packet</STRONG> (Thumb, 320 bytes, Stack size 40 bytes, dm9000.o(i.DM9000_Receive_Packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = DM9000_Receive_Packet &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPost
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPend
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM9000_WriteReg
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM9000_ReadReg
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_input
</UL>

<P><STRONG><a name="[2da]"></a>DM9000_Reset</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, dm9000.o(i.DM9000_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = DM9000_Reset &rArr; delay_ms &rArr; delay_us &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM9000_WriteReg
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM9000_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM9000_Init
</UL>

<P><STRONG><a name="[2e4]"></a>DM9000_SendPacket</STRONG> (Thumb, 166 bytes, Stack size 32 bytes, dm9000.o(i.DM9000_SendPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = DM9000_SendPacket &rArr; OSMutexPend &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPost
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPend
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM9000_WriteReg
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM9000_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_output
</UL>

<P><STRONG><a name="[2dc]"></a>DM9000_Set_MACAddress</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, dm9000.o(i.DM9000_Set_MACAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DM9000_Set_MACAddress
</UL>
<BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM9000_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM9000_Init
</UL>

<P><STRONG><a name="[2dd]"></a>DM9000_Set_Multicast</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, dm9000.o(i.DM9000_Set_Multicast))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DM9000_Set_Multicast
</UL>
<BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM9000_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM9000_Init
</UL>

<P><STRONG><a name="[2db]"></a>DM9000_Set_PHYMode</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, dm9000.o(i.DM9000_Set_PHYMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = DM9000_Set_PHYMode &rArr; DM9000_PHY_WriteReg &rArr; delay_ms &rArr; delay_us &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM9000_PHY_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM9000_Init
</UL>

<P><STRONG><a name="[a]"></a>DM9000_WriteReg</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dm9000.o(i.DM9000_WriteReg))
<BR><BR>[Called By]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM9000_Init
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA9000_ISRHandler
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM9000_Set_Multicast
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM9000_Set_MACAddress
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM9000_SendPacket
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM9000_Reset
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM9000_Receive_Packet
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM9000_PHY_WriteReg
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM9000_PHY_ReadReg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usmart_config.o(.data)
</UL>
<P><STRONG><a name="[2e5]"></a>DMA9000_ISRHandler</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, dm9000.o(i.DMA9000_ISRHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = DMA9000_ISRHandler &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM9000_WriteReg
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM9000_ReadReg
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
</UL>

<P><STRONG><a name="[2e7]"></a>DS18B20_Check</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, ds18b20.o(i.DS18B20_Check))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = DS18B20_Check &rArr; delay_us &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Start
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Init
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Get_Temp
</UL>

<P><STRONG><a name="[2e8]"></a>DS18B20_Get_Temp</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, ds18b20.o(i.DS18B20_Get_Temp))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = DS18B20_Get_Temp &rArr; DS18B20_Start &rArr; DS18B20_Write_Byte &rArr; delay_us &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Write_Byte
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Start
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Rst
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Read_Byte
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Check
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calendar_play
</UL>

<P><STRONG><a name="[2ef]"></a>DS18B20_Init</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, ds18b20.o(i.DS18B20_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = DS18B20_Init &rArr; DS18B20_Check &rArr; delay_us &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Rst
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Check
</UL>
<BR>[Called By]<UL><LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calendar_play
</UL>

<P><STRONG><a name="[2f0]"></a>DS18B20_Read_Bit</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, ds18b20.o(i.DS18B20_Read_Bit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = DS18B20_Read_Bit &rArr; delay_us &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Read_Byte
</UL>

<P><STRONG><a name="[2ec]"></a>DS18B20_Read_Byte</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, ds18b20.o(i.DS18B20_Read_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = DS18B20_Read_Byte &rArr; DS18B20_Read_Bit &rArr; delay_us &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Read_Bit
</UL>
<BR>[Called By]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Get_Temp
</UL>

<P><STRONG><a name="[2ea]"></a>DS18B20_Rst</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, ds18b20.o(i.DS18B20_Rst))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = DS18B20_Rst &rArr; delay_us &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Start
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Init
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Get_Temp
</UL>

<P><STRONG><a name="[2e9]"></a>DS18B20_Start</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, ds18b20.o(i.DS18B20_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = DS18B20_Start &rArr; DS18B20_Write_Byte &rArr; delay_us &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Write_Byte
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Rst
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Check
</UL>
<BR>[Called By]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Get_Temp
</UL>

<P><STRONG><a name="[2eb]"></a>DS18B20_Write_Byte</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, ds18b20.o(i.DS18B20_Write_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = DS18B20_Write_Byte &rArr; delay_us &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Start
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Get_Temp
</UL>

<P><STRONG><a name="[2e]"></a>EP1_IN_Callback</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usb_endp.o(i.EP1_IN_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 180 + Unknown Stack Size
<LI>Call Chain = EP1_IN_Callback &rArr; Mass_Storage_In &rArr; SCSI_Read10_Cmd &rArr; Read_Memory &rArr; MAL_Read &rArr; SD_ReadDisk &rArr; SD_ReadMultiBlocks &rArr; SD_DMA_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mass_Storage_In
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_istr.o(.data)
</UL>
<P><STRONG><a name="[30]"></a>EP2_OUT_Callback</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usb_endp.o(i.EP2_OUT_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = EP2_OUT_Callback &rArr; Mass_Storage_Out &rArr; CBW_Decode &rArr; SCSI_Write10_Cmd &rArr; Write_Memory &rArr; MAL_Write &rArr; W25QXX_Write &rArr; W25QXX_Erase_Sector &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mass_Storage_Out
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_istr.o(.data)
</UL>
<P><STRONG><a name="[5c]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, exti.o(i.EXTI0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = EXTI0_IRQHandler &rArr; delay_ms &rArr; delay_us &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, exti.o(i.EXTI2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = EXTI2_IRQHandler &rArr; delay_ms &rArr; delay_us &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, exti.o(i.EXTI3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = EXTI3_IRQHandler &rArr; delay_ms &rArr; delay_us &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, exti.o(i.EXTI4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = EXTI4_IRQHandler &rArr; delay_ms &rArr; delay_us &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2fb]"></a>EXTI8_Init</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, exti.o(i.EXTI8_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = EXTI8_Init &rArr; MY_NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MY_NVIC_Init
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ex_NVIC_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_play
</UL>

<P><STRONG><a name="[6d]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, exti.o(i.EXTI9_5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = EXTI9_5_IRQHandler &rArr; DMA9000_ISRHandler &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntEnter
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA9000_ISRHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2fe]"></a>Enter_LowPowerMode</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hw_config.o(i.Enter_LowPowerMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = Enter_LowPowerMode &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Suspend
</UL>

<P><STRONG><a name="[2d8]"></a>Ex_NVIC_Config</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, sys.o(i.Ex_NVIC_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Ex_NVIC_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM9000_Init
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI8_Init
</UL>

<P><STRONG><a name="[60a]"></a>FSMC_SRAM_Init</STRONG> (Thumb, 236 bytes, Stack size 0 bytes, sram.o(i.FSMC_SRAM_Init))
<BR><BR>[Called By]<UL><LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exeplay_app_check
<LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_init
</UL>

<P><STRONG><a name="[793]"></a>FSMC_SRAM_ReadBuffer</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, sram.o(i.FSMC_SRAM_ReadBuffer))
<BR><BR>[Called By]<UL><LI><a href="#[791]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_exsram_test
</UL>

<P><STRONG><a name="[792]"></a>FSMC_SRAM_WriteBuffer</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, sram.o(i.FSMC_SRAM_WriteBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FSMC_SRAM_WriteBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[791]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_exsram_test
</UL>

<P><STRONG><a name="[2ff]"></a>FT5206_Init</STRONG> (Thumb, 174 bytes, Stack size 16 bytes, ft5206.o(i.FT5206_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = FT5206_Init &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT5206_WR_Reg
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT5206_RD_Reg
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT_IIC_Init
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Init
</UL>

<P><STRONG><a name="[302]"></a>FT5206_RD_Reg</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, ft5206.o(i.FT5206_RD_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = FT5206_RD_Reg &rArr; CT_IIC_Read_Byte &rArr; CT_IIC_NAck &rArr; delay_us &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT_IIC_Wait_Ack
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT_IIC_Stop
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT_IIC_Start
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT_IIC_Send_Byte
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT_IIC_Read_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT5206_Scan
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT5206_Init
</UL>

<P><STRONG><a name="[1b7]"></a>FT5206_Scan</STRONG> (Thumb, 294 bytes, Stack size 40 bytes, ft5206.o(i.FT5206_Scan))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = FT5206_Scan &rArr; FT5206_RD_Reg &rArr; CT_IIC_Read_Byte &rArr; CT_IIC_NAck &rArr; delay_us &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT5206_RD_Reg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> touch.o(i.TP_Init)
</UL>
<P><STRONG><a name="[301]"></a>FT5206_WR_Reg</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, ft5206.o(i.FT5206_WR_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = FT5206_WR_Reg &rArr; CT_IIC_Wait_Ack &rArr; CT_IIC_Stop &rArr; delay_us &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT_IIC_Wait_Ack
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT_IIC_Stop
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT_IIC_Start
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT_IIC_Send_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT5206_Init
</UL>

<P><STRONG><a name="[303]"></a>FindSCR</STRONG> (Thumb, 210 bytes, Stack size 24 bytes, sdio_sdcard.o(i.FindSCR))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = FindSCR &rArr; SDIO_Send_Data_Cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_Send_Data_Cfg
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_Send_Cmd
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
</UL>
<BR>[Called By]<UL><LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDEnWideBus
</UL>

<P><STRONG><a name="[307]"></a>GT9147_Init</STRONG> (Thumb, 220 bytes, Stack size 32 bytes, gt9147.o(i.GT9147_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = GT9147_Init &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT9147_WR_Reg
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT9147_Send_Cfg
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT9147_RD_Reg
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT_IIC_Init
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Init
</UL>

<P><STRONG><a name="[308]"></a>GT9147_RD_Reg</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, gt9147.o(i.GT9147_RD_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = GT9147_RD_Reg &rArr; CT_IIC_Read_Byte &rArr; CT_IIC_NAck &rArr; delay_us &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT_IIC_Wait_Ack
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT_IIC_Stop
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT_IIC_Start
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT_IIC_Send_Byte
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT_IIC_Read_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT9147_Scan
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT9147_Init
</UL>

<P><STRONG><a name="[1b6]"></a>GT9147_Scan</STRONG> (Thumb, 362 bytes, Stack size 48 bytes, gt9147.o(i.GT9147_Scan))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = GT9147_Scan &rArr; GT9147_RD_Reg &rArr; CT_IIC_Read_Byte &rArr; CT_IIC_NAck &rArr; delay_us &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT9147_WR_Reg
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT9147_RD_Reg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> touch.o(i.TP_Init)
</UL>
<P><STRONG><a name="[30a]"></a>GT9147_Send_Cfg</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, gt9147.o(i.GT9147_Send_Cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = GT9147_Send_Cfg &rArr; GT9147_WR_Reg &rArr; CT_IIC_Wait_Ack &rArr; CT_IIC_Stop &rArr; delay_us &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT9147_WR_Reg
</UL>
<BR>[Called By]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT9147_Init
</UL>

<P><STRONG><a name="[309]"></a>GT9147_WR_Reg</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, gt9147.o(i.GT9147_WR_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = GT9147_WR_Reg &rArr; CT_IIC_Wait_Ack &rArr; CT_IIC_Stop &rArr; delay_us &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT_IIC_Wait_Ack
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT_IIC_Stop
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT_IIC_Start
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT_IIC_Send_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT9147_Send_Cfg
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT9147_Scan
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT9147_Init
</UL>

<P><STRONG><a name="[2f6]"></a>GetEPRxAddr</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, usb_regs.o(i.GetEPRxAddr))
<BR><BR>[Called By]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SIL_Read
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataStageOut
</UL>

<P><STRONG><a name="[464]"></a>GetEPRxCount</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, usb_regs.o(i.GetEPRxCount))
<BR><BR>[Called By]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SIL_Read
</UL>

<P><STRONG><a name="[3a6]"></a>GetEPRxStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, usb_regs.o(i.GetEPRxStatus))
<BR><BR>[Called By]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mass_Storage_In
</UL>

<P><STRONG><a name="[2f2]"></a>GetEPTxAddr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, usb_regs.o(i.GetEPTxAddr))
<BR><BR>[Called By]<UL><LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SIL_Write
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataStageIn
</UL>

<P><STRONG><a name="[30b]"></a>Get_Adc</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, adc.o(i.Get_Adc))
<BR><BR>[Called By]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Adc_Average
</UL>

<P><STRONG><a name="[331]"></a>Get_Adc3</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, adc.o(i.Get_Adc3))
<BR><BR>[Called By]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lsens_Get_Val
</UL>

<P><STRONG><a name="[29f]"></a>Get_Adc_Average</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, adc.o(i.Get_Adc_Average))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = Get_Adc_Average &rArr; delay_ms &rArr; delay_us &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Adc
</UL>
<BR>[Called By]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Temprate
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Handler
</UL>

<P><STRONG><a name="[30c]"></a>Get_HzMat</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, text.o(i.Get_HzMat))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = Get_HzMat &rArr; W25QXX_Read &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_Font
<LI><a href="#[65a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_show_ptfont
</UL>

<P><STRONG><a name="[1ab]"></a>Get_Max_Lun</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, usb_prop.o(i.Get_Max_Lun))
<BR><BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MASS_Data_Setup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(i.MASS_Data_Setup)
</UL>
<P><STRONG><a name="[30e]"></a>Get_SerialNum</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, hw_config.o(i.Get_SerialNum))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Get_SerialNum &rArr; IntToUnicode
</UL>
<BR>[Calls]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntToUnicode
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MASS_init
</UL>

<P><STRONG><a name="[310]"></a>Get_Temprate</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, adc.o(i.Get_Temprate))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = Get_Temprate &rArr; Get_Adc_Average &rArr; delay_ms &rArr; delay_us &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Adc_Average
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calendar_play
<LI><a href="#[78a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysset_system_status
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperate_Handler
</UL>

<P><STRONG><a name="[4e]"></a>HardFault_Handler</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, test.o(i.HardFault_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = HardFault_Handler &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[315]"></a>IIC_Ack</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, myiic.o(i.IIC_Ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = IIC_Ack &rArr; delay_us &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read_Byte
</UL>

<P><STRONG><a name="[2a7]"></a>IIC_Init</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, myiic.o(i.IIC_Init))
<BR><BR>[Called By]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Init
</UL>

<P><STRONG><a name="[316]"></a>IIC_NAck</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, myiic.o(i.IIC_NAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = IIC_NAck &rArr; delay_us &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read_Byte
</UL>

<P><STRONG><a name="[2ac]"></a>IIC_Read_Byte</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, myiic.o(i.IIC_Read_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = IIC_Read_Byte &rArr; IIC_NAck &rArr; delay_us &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_NAck
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Ack
</UL>
<BR>[Called By]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_ReadOneByte
</UL>

<P><STRONG><a name="[2aa]"></a>IIC_Send_Byte</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, myiic.o(i.IIC_Send_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = IIC_Send_Byte &rArr; delay_us &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_WriteOneByte
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_ReadOneByte
</UL>

<P><STRONG><a name="[2a9]"></a>IIC_Start</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, myiic.o(i.IIC_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = IIC_Start &rArr; delay_us &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_WriteOneByte
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_ReadOneByte
</UL>

<P><STRONG><a name="[2ad]"></a>IIC_Stop</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, myiic.o(i.IIC_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = IIC_Stop &rArr; delay_us &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_WriteOneByte
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_ReadOneByte
</UL>

<P><STRONG><a name="[2ab]"></a>IIC_Wait_Ack</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, myiic.o(i.IIC_Wait_Ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = IIC_Wait_Ack &rArr; IIC_Stop &rArr; delay_us &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
</UL>
<BR>[Called By]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_WriteOneByte
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_ReadOneByte
</UL>

<P><STRONG><a name="[439]"></a>INTX_DISABLE</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sys.o(i.INTX_DISABLE))
<BR><BR>[Called By]<UL><LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlock
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultiBlocks
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlock
</UL>

<P><STRONG><a name="[43a]"></a>INTX_ENABLE</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sys.o(i.INTX_ENABLE))
<BR><BR>[Called By]<UL><LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlock
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultiBlocks
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlock
</UL>

<P><STRONG><a name="[2c9]"></a>In0_Process</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, usb_core.o(i.In0_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = In0_Process &rArr; DataStageIn &rArr; UserToPMABufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDeviceAddress
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Post0_Process
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataStageIn
</UL>
<BR>[Called By]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTR_LP
</UL>

<P><STRONG><a name="[30f]"></a>IntToUnicode</STRONG> (Thumb, 54 bytes, Stack size 20 bytes, hw_config.o(i.IntToUnicode))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = IntToUnicode
</UL>
<BR>[Called By]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_SerialNum
</UL>

<P><STRONG><a name="[319]"></a>IsCardProgramming</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, sdio_sdcard.o(i.IsCardProgramming))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IsCardProgramming
</UL>
<BR>[Calls]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_Send_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlock
</UL>

<P><STRONG><a name="[411]"></a>Is_Leap_Year</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, rtc.o(i.Is_Leap_Year))
<BR><BR>[Called By]<UL><LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Get
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Set
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Alarm_Set
</UL>

<P><STRONG><a name="[701]"></a>JOYPAD_Init</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, joypad.o(i.JOYPAD_Init))
<BR><BR>[Called By]<UL><LI><a href="#[6fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nes_load
</UL>

<P><STRONG><a name="[6fc]"></a>JOYPAD_Read</STRONG> (Thumb, 98 bytes, Stack size 20 bytes, joypad.o(i.JOYPAD_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = JOYPAD_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[6fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nes_get_gamepadval
</UL>

<P><STRONG><a name="[36a]"></a>JTAG_Set</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, sys.o(i.JTAG_Set))
<BR><BR>[Called By]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Init
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV7725_Init
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV7670_Init
</UL>

<P><STRONG><a name="[798]"></a>KEY_Init</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, key.o(i.KEY_Init))
<BR><BR>[Called By]<UL><LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_init
</UL>

<P><STRONG><a name="[31a]"></a>KEY_Scan</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, key.o(i.KEY_Scan))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = KEY_Scan &rArr; delay_ms &rArr; delay_us &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[6bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;paint_play
<LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_play
<LI><a href="#[79e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_usb_update_confirm
<LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_init
<LI><a href="#[795]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_font_update_confirm
<LI><a href="#[794]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_files_erase
</UL>

<P><STRONG><a name="[328]"></a>LCD_BGR2RGB</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ili93xx.o(i.LCD_BGR2RGB))
<BR><BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ReadPoint
</UL>

<P><STRONG><a name="[31b]"></a>LCD_Clear</STRONG> (Thumb, 100 bytes, Stack size 28 bytes, ili93xx.o(i.LCD_Clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = LCD_Clear &rArr; LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteRAM_Prepare
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetCursor
</UL>
<BR>[Called By]<UL><LI><a href="#[6bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_play
<LI><a href="#[6ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysset_play
<LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spb_load_mui
<LI><a href="#[6c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sms_play
<LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;picviewer_play
<LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phone_play
<LI><a href="#[6bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;paint_play
<LI><a href="#[6bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;notepad_play
<LI><a href="#[6bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nes_play
<LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebook_play
<LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_play
<LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calendar_play
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Init
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Adjust
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_init
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appplay_gyro
<LI><a href="#[774]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sms_send_sms
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phone_incall_task
<LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_test
</UL>

<P><STRONG><a name="[1c4]"></a>LCD_Color_Fill</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, ili93xx.o(i.LCD_Color_Fill))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = LCD_Color_Fill &rArr; LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteRAM_Prepare
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetCursor
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;piclib_fill_color
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gui.o(i.gui_init)
</UL>
<P><STRONG><a name="[31e]"></a>LCD_Display_Dir</STRONG> (Thumb, 304 bytes, Stack size 36 bytes, ili93xx.o(i.LCD_Display_Dir))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = LCD_Display_Dir &rArr; LCD_Scan_Dir
</UL>
<BR>[Calls]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Scan_Dir
</UL>
<BR>[Called By]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[320]"></a>LCD_DrawLine</STRONG> (Thumb, 150 bytes, Stack size 48 bytes, ili93xx.o(i.LCD_DrawLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = LCD_DrawLine &rArr; LCD_DrawPoint &rArr; LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawPoint
</UL>
<BR>[Called By]<UL><LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Drow_Touch_Point
</UL>

<P><STRONG><a name="[321]"></a>LCD_DrawPoint</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, ili93xx.o(i.LCD_DrawPoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LCD_DrawPoint &rArr; LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteRAM_Prepare
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetCursor
</UL>
<BR>[Called By]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Draw_Circle
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawLine
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Drow_Touch_Point
<LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_expoint
</UL>

<P><STRONG><a name="[322]"></a>LCD_Draw_Circle</STRONG> (Thumb, 176 bytes, Stack size 44 bytes, ili93xx.o(i.LCD_Draw_Circle))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = LCD_Draw_Circle &rArr; LCD_DrawPoint &rArr; LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawPoint
</UL>
<BR>[Called By]<UL><LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Drow_Touch_Point
</UL>

<P><STRONG><a name="[1c2]"></a>LCD_Fast_DrawPoint</STRONG> (Thumb, 278 bytes, Stack size 36 bytes, ili93xx.o(i.LCD_Fast_DrawPoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = LCD_Fast_DrawPoint
</UL>
<BR>[Calls]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChar
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_Font
<LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_bline1
</UL>
<BR>[Address Reference Count : 3]<UL><LI> spb.o(i.spb_init)
<LI> piclib.o(i.piclib_init)
<LI> gui.o(i.gui_init)
</UL>
<P><STRONG><a name="[1c3]"></a>LCD_Fill</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, ili93xx.o(i.LCD_Fill))
<BR><BR>[Stack]<UL><LI>Max Depth = 68 + In Cycle
<LI>Call Chain = LCD_Fill &rArr;  LCD_Fill (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fill
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteRAM_Prepare
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetCursor
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_boot_cpdmsg
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fill
<LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_init
<LI><a href="#[790]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_error_show
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;piclib_draw_hline
</UL>
<BR>[Address Reference Count : 2]<UL><LI> piclib.o(i.piclib_init)
<LI> gui.o(i.gui_init)
</UL>
<P><STRONG><a name="[324]"></a>LCD_Init</STRONG> (Thumb, 11884 bytes, Stack size 40 bytes, ili93xx.o(i.LCD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = LCD_Init &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteReg
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SSD_BackLightSet
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ReadReg
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_RD_DATA
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Display_Dir
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_init
</UL>

<P><STRONG><a name="[4e9]"></a>LCD_PWM_Init</STRONG> (Thumb, 132 bytes, Stack size 0 bytes, timer.o(i.LCD_PWM_Init))
<BR><BR>[Called By]<UL><LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_system_parameter_init
</UL>

<P><STRONG><a name="[32c]"></a>LCD_Pow</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ili93xx.o(i.LCD_Pow))
<BR><BR>[Called By]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowxNum
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowNum
</UL>

<P><STRONG><a name="[326]"></a>LCD_RD_DATA</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ili93xx.o(i.LCD_RD_DATA))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LCD_RD_DATA
</UL>
<BR>[Called By]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ReadReg
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ReadPoint
</UL>

<P><STRONG><a name="[1c1]"></a>LCD_ReadPoint</STRONG> (Thumb, 260 bytes, Stack size 24 bytes, ili93xx.o(i.LCD_ReadPoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = LCD_ReadPoint &rArr; LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetCursor
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_RD_DATA
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_BGR2RGB
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp_encode
</UL>
<BR>[Address Reference Count : 3]<UL><LI> spb.o(i.spb_init)
<LI> piclib.o(i.piclib_init)
<LI> gui.o(i.gui_init)
</UL>
<P><STRONG><a name="[325]"></a>LCD_ReadReg</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ili93xx.o(i.LCD_ReadReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = LCD_ReadReg &rArr; delay_us &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_RD_DATA
</UL>
<BR>[Called By]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[327]"></a>LCD_SSD_BackLightSet</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, ili93xx.o(i.LCD_SSD_BackLightSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LCD_SSD_BackLightSet &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[6ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysset_play
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_system_parameter_init
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_lcd_auto_bklight
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[782]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysset_bklight_set
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_set_default
</UL>

<P><STRONG><a name="[31f]"></a>LCD_Scan_Dir</STRONG> (Thumb, 414 bytes, Stack size 20 bytes, ili93xx.o(i.LCD_Scan_Dir))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = LCD_Scan_Dir
</UL>
<BR>[Calls]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[6b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slcd_frame_show
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Display_Dir
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phone_incall_task
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_refresh
</UL>

<P><STRONG><a name="[31c]"></a>LCD_SetCursor</STRONG> (Thumb, 320 bytes, Stack size 36 bytes, ili93xx.o(i.LCD_SetCursor))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[6b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slcd_frame_show
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fill
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Set_Window
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ReadPoint
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawPoint
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Color_Fill
</UL>

<P><STRONG><a name="[329]"></a>LCD_Set_Window</STRONG> (Thumb, 370 bytes, Stack size 44 bytes, ili93xx.o(i.LCD_Set_Window))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = LCD_Set_Window &rArr; LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteReg
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetCursor
</UL>
<BR>[Called By]<UL><LI><a href="#[6b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slcd_frame_show
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phone_incall_task
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_refresh
<LI><a href="#[6f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nes_set_window
<LI><a href="#[6f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nes_emulate_frame
</UL>

<P><STRONG><a name="[32a]"></a>LCD_ShowChar</STRONG> (Thumb, 182 bytes, Stack size 40 bytes, ili93xx.o(i.LCD_ShowChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = LCD_ShowChar &rArr; LCD_Fast_DrawPoint
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fast_DrawPoint
</UL>
<BR>[Called By]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowxNum
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowString
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowNum
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_Str
</UL>

<P><STRONG><a name="[32b]"></a>LCD_ShowNum</STRONG> (Thumb, 118 bytes, Stack size 56 bytes, ili93xx.o(i.LCD_ShowNum))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = LCD_ShowNum &rArr; LCD_ShowChar &rArr; LCD_Fast_DrawPoint
</UL>
<BR>[Calls]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChar
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Pow
</UL>
<BR>[Called By]<UL><LI><a href="#[6bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_play
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_boot_cpdmsg
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Adj_Info_Show
<LI><a href="#[63e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fupd_prog
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appplay_remote
</UL>

<P><STRONG><a name="[32d]"></a>LCD_ShowString</STRONG> (Thumb, 84 bytes, Stack size 40 bytes, ili93xx.o(i.LCD_ShowString))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = LCD_ShowString &rArr; LCD_ShowChar &rArr; LCD_Fast_DrawPoint
</UL>
<BR>[Calls]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChar
</UL>
<BR>[Called By]<UL><LI><a href="#[6bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_play
<LI><a href="#[79d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_font
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_boot_cpdmsg
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Adjust
<LI><a href="#[79e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_usb_update_confirm
<LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_init
<LI><a href="#[795]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_font_update_confirm
<LI><a href="#[794]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_files_erase
<LI><a href="#[791]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_exsram_test
<LI><a href="#[790]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_error_show
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Adj_Info_Show
<LI><a href="#[63e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fupd_prog
<LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calendar_date_refresh
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appplay_remote
</UL>

<P><STRONG><a name="[32e]"></a>LCD_ShowxNum</STRONG> (Thumb, 134 bytes, Stack size 56 bytes, ili93xx.o(i.LCD_ShowxNum))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = LCD_ShowxNum &rArr; LCD_ShowChar &rArr; LCD_Fast_DrawPoint
</UL>
<BR>[Calls]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChar
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Pow
</UL>
<BR>[Called By]<UL><LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_init
<LI><a href="#[791]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_exsram_test
<LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calendar_date_refresh
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_show_nummid
</UL>

<P><STRONG><a name="[31d]"></a>LCD_WriteRAM_Prepare</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ili93xx.o(i.LCD_WriteRAM_Prepare))
<BR><BR>[Called By]<UL><LI><a href="#[6b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slcd_frame_show
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fill
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawPoint
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Color_Fill
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_refresh
<LI><a href="#[6f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nes_set_window
</UL>

<P><STRONG><a name="[323]"></a>LCD_WriteReg</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ili93xx.o(i.LCD_WriteReg))
<BR><BR>[Called By]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Set_Window
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetCursor
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Scan_Dir
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fast_DrawPoint
</UL>

<P><STRONG><a name="[200]"></a>LEDS_CGI_Handler</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, httpd_cgi_ssi.o(i.LEDS_CGI_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = LEDS_CGI_Handler &rArr; FindCGIParameter
</UL>
<BR>[Calls]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindCGIParameter
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> httpd_cgi_ssi.o(.constdata)
</UL>
<P><STRONG><a name="[796]"></a>LED_Init</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, led.o(i.LED_Init))
<BR><BR>[Called By]<UL><LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_init
</UL>

<P><STRONG><a name="[32f]"></a>Leave_LowPowerMode</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, hw_config.o(i.Leave_LowPowerMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = Leave_LowPowerMode &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Resume_Init
</UL>

<P><STRONG><a name="[419]"></a>Led_RW_OFF</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, hw_config.o(i.Led_RW_OFF))
<BR><BR>[Called By]<UL><LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Memory
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Memory
</UL>

<P><STRONG><a name="[418]"></a>Led_RW_ON</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, hw_config.o(i.Led_RW_ON))
<BR><BR>[Called By]<UL><LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Memory
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Memory
</UL>

<P><STRONG><a name="[330]"></a>Lsens_Get_Val</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lsens.o(i.Lsens_Get_Val))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = Lsens_Get_Val &rArr; delay_ms &rArr; delay_us &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Adc3
</UL>
<BR>[Called By]<UL><LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_lcd_auto_bklight
</UL>

<P><STRONG><a name="[332]"></a>Lsens_Init</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, lsens.o(i.Lsens_Init))
<BR><BR>[Calls]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc3_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_init
</UL>

<P><STRONG><a name="[423]"></a>MAL_GetStatus</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, mass_mal.o(i.MAL_GetStatus))
<BR><BR>[Called By]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_TestUnitReady_Cmd
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ReadFormatCapacity_Cmd
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ReadCapacity10_Cmd
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Format_Cmd
</UL>

<P><STRONG><a name="[334]"></a>MAL_Read</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, mass_mal.o(i.MAL_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 124 + Unknown Stack Size
<LI>Call Chain = MAL_Read &rArr; SD_ReadDisk &rArr; SD_ReadMultiBlocks &rArr; SD_DMA_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Read
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadDisk
</UL>
<BR>[Called By]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Memory
</UL>

<P><STRONG><a name="[336]"></a>MAL_Write</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, mass_mal.o(i.MAL_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = MAL_Write &rArr; W25QXX_Write &rArr; W25QXX_Erase_Sector &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteDisk
</UL>
<BR>[Called By]<UL><LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Memory
</UL>

<P><STRONG><a name="[378]"></a>MAP0_Init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nes_mapper.o(i.MAP0_Init))
<BR><BR>[Called By]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mapper_Init
</UL>

<P><STRONG><a name="[13c]"></a>MAP0_Reset</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, nes_mapper.o(i.MAP0_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = MAP0_Reset &rArr; set_PPU_banks &rArr; set_tile_banks
</UL>
<BR>[Calls]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_banks
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nes_mapper.o(i.MAP0_Init)
</UL>
<P><STRONG><a name="[3a0]"></a>MAP113_Init</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, nes_mapper.o(i.MAP113_Init))
<BR><BR>[Called By]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mapper_Init
</UL>

<P><STRONG><a name="[13e]"></a>MAP113_MemoryWrite</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, nes_mapper.o(i.MAP113_MemoryWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = MAP113_MemoryWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapEF_
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapCD_
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapAB_
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;map89_
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank7
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank6
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank5
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank4
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank3
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank2
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank1
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nes_mapper.o(i.MAP113_Init)
</UL>
<P><STRONG><a name="[13f]"></a>MAP113_MemoryWriteLow</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, nes_mapper.o(i.MAP113_MemoryWriteLow))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = MAP113_MemoryWriteLow
</UL>
<BR>[Calls]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapEF_
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapCD_
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapAB_
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;map89_
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank7
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank6
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank5
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank4
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank3
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank2
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank1
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nes_mapper.o(i.MAP113_Init)
</UL>
<P><STRONG><a name="[13d]"></a>MAP113_Reset</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, nes_mapper.o(i.MAP113_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = MAP113_Reset &rArr; set_PPU_banks &rArr; set_tile_banks
</UL>
<BR>[Calls]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_banks
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nes_mapper.o(i.MAP113_Init)
</UL>
<P><STRONG><a name="[380]"></a>MAP11_Init</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nes_mapper.o(i.MAP11_Init))
<BR><BR>[Called By]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mapper_Init
</UL>

<P><STRONG><a name="[141]"></a>MAP11_MemoryWrite</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, nes_mapper.o(i.MAP11_MemoryWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = MAP11_MemoryWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapEF_
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapCD_
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapAB_
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;map89_
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank7
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank6
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank5
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank4
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank3
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank2
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank1
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nes_mapper.o(i.MAP11_Init)
</UL>
<P><STRONG><a name="[140]"></a>MAP11_Reset</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, nes_mapper.o(i.MAP11_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = MAP11_Reset &rArr; set_PPU_banks &rArr; set_tile_banks
</UL>
<BR>[Calls]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_mirroring
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_banks
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nes_mapper.o(i.MAP11_Init)
</UL>
<P><STRONG><a name="[381]"></a>MAP13_Init</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nes_mapper.o(i.MAP13_Init))
<BR><BR>[Called By]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mapper_Init
</UL>

<P><STRONG><a name="[143]"></a>MAP13_MemoryWrite</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, nes_mapper.o(i.MAP13_MemoryWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = MAP13_MemoryWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapEF_
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapCD_
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapAB_
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;map89_
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_VRAM_bank
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nes_mapper.o(i.MAP13_Init)
</UL>
<P><STRONG><a name="[142]"></a>MAP13_Reset</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, nes_mapper.o(i.MAP13_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MAP13_Reset
</UL>
<BR>[Calls]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_VRAM_bank
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nes_mapper.o(i.MAP13_Init)
</UL>
<P><STRONG><a name="[382]"></a>MAP15_Init</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nes_mapper.o(i.MAP15_Init))
<BR><BR>[Called By]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mapper_Init
</UL>

<P><STRONG><a name="[145]"></a>MAP15_MemoryWrite</STRONG> (Thumb, 240 bytes, Stack size 24 bytes, nes_mapper.o(i.MAP15_MemoryWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 36 + Unknown Stack Size
<LI>Call Chain = MAP15_MemoryWrite &rArr; set_mirroring
</UL>
<BR>[Calls]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_mirroring
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapEF_
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapCD_
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapAB_
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;map89_
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nes_mapper.o(i.MAP15_Init)
</UL>
<P><STRONG><a name="[144]"></a>MAP15_Reset</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, nes_mapper.o(i.MAP15_Reset))
<BR>[Address Reference Count : 1]<UL><LI> nes_mapper.o(i.MAP15_Init)
</UL>
<P><STRONG><a name="[148]"></a>MAP16_HSync</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, nes_mapper.o(i.MAP16_HSync))
<BR>[Address Reference Count : 1]<UL><LI> nes_mapper.o(i.MAP16_Init)
</UL>
<P><STRONG><a name="[383]"></a>MAP16_Init</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, nes_mapper.o(i.MAP16_Init))
<BR><BR>[Called By]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mapper_Init
</UL>

<P><STRONG><a name="[147]"></a>MAP16_MemoryWrite</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, nes_mapper.o(i.MAP16_MemoryWrite))
<BR>[Address Reference Count : 1]<UL><LI> nes_mapper.o(i.MAP16_Init)
</UL>
<P><STRONG><a name="[348]"></a>MAP16_MemoryWrite2</STRONG> (Thumb, 228 bytes, Stack size 8 bytes, nes_mapper.o(i.MAP16_MemoryWrite2), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_mirroring
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapAB_
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;map89_
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank7
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank6
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank5
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank4
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank3
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank2
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank1
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank0
</UL>

<P><STRONG><a name="[146]"></a>MAP16_Reset</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, nes_mapper.o(i.MAP16_Reset))
<BR>[Address Reference Count : 1]<UL><LI> nes_mapper.o(i.MAP16_Init)
</UL>
<P><STRONG><a name="[14b]"></a>MAP17_HSync</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, nes_mapper.o(i.MAP17_HSync))
<BR>[Address Reference Count : 1]<UL><LI> nes_mapper.o(i.MAP17_Init)
</UL>
<P><STRONG><a name="[384]"></a>MAP17_Init</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, nes_mapper.o(i.MAP17_Init))
<BR><BR>[Called By]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mapper_Init
</UL>

<P><STRONG><a name="[14a]"></a>MAP17_MemoryWriteLow</STRONG> (Thumb, 270 bytes, Stack size 8 bytes, nes_mapper.o(i.MAP17_MemoryWriteLow))
<BR><BR>[Stack]<UL><LI>Max Depth = 20 + Unknown Stack Size
<LI>Call Chain = MAP17_MemoryWriteLow &rArr; set_mirroring
</UL>
<BR>[Calls]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_mirroring
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapEF_
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapCD_
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapAB_
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;map89_
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank7
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank6
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank5
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank4
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank3
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank2
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank1
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nes_mapper.o(i.MAP17_Init)
</UL>
<P><STRONG><a name="[149]"></a>MAP17_Reset</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, nes_mapper.o(i.MAP17_Reset))
<BR>[Address Reference Count : 1]<UL><LI> nes_mapper.o(i.MAP17_Init)
</UL>
<P><STRONG><a name="[14e]"></a>MAP189_HSync</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, nes_mapper.o(i.MAP189_HSync))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MAP189_HSync
</UL>
<BR>[Calls]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spr_enabled
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bg_enabled
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nes_mapper.o(i.MAP189_Init)
</UL>
<P><STRONG><a name="[3a1]"></a>MAP189_Init</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, nes_mapper.o(i.MAP189_Init))
<BR><BR>[Called By]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mapper_Init
</UL>

<P><STRONG><a name="[14d]"></a>MAP189_MemoryWrite</STRONG> (Thumb, 216 bytes, Stack size 8 bytes, nes_mapper.o(i.MAP189_MemoryWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 20 + Unknown Stack Size
<LI>Call Chain = MAP189_MemoryWrite &rArr; set_mirroring
</UL>
<BR>[Calls]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_mirroring
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapCD_
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapAB_
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank7
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank6
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank5
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank4
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank3
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank2
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank1
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nes_mapper.o(i.MAP189_Init)
</UL>
<P><STRONG><a name="[14c]"></a>MAP189_Reset</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, nes_mapper.o(i.MAP189_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = MAP189_Reset &rArr; set_PPU_banks &rArr; set_tile_banks
</UL>
<BR>[Calls]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_banks
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nes_mapper.o(i.MAP189_Init)
</UL>
<P><STRONG><a name="[151]"></a>MAP18_HSync</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, nes_mapper.o(i.MAP18_HSync))
<BR>[Address Reference Count : 1]<UL><LI> nes_mapper.o(i.MAP18_Init)
</UL>
<P><STRONG><a name="[385]"></a>MAP18_Init</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, nes_mapper.o(i.MAP18_Init))
<BR><BR>[Called By]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mapper_Init
</UL>

<P><STRONG><a name="[150]"></a>MAP18_MemoryWrite</STRONG> (Thumb, 628 bytes, Stack size 8 bytes, nes_mapper.o(i.MAP18_MemoryWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 20 + Unknown Stack Size
<LI>Call Chain = MAP18_MemoryWrite &rArr; set_mirroring
</UL>
<BR>[Calls]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_mirroring
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapCD_
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapAB_
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;map89_
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank7
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank6
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank5
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank4
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank3
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank2
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank1
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nes_mapper.o(i.MAP18_Init)
</UL>
<P><STRONG><a name="[14f]"></a>MAP18_Reset</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, nes_mapper.o(i.MAP18_Reset))
<BR>[Address Reference Count : 1]<UL><LI> nes_mapper.o(i.MAP18_Init)
</UL>
<P><STRONG><a name="[154]"></a>MAP19_HSync</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, nes_mapper.o(i.MAP19_HSync))
<BR>[Address Reference Count : 1]<UL><LI> nes_mapper.o(i.MAP19_Init)
</UL>
<P><STRONG><a name="[386]"></a>MAP19_Init</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, nes_mapper.o(i.MAP19_Init))
<BR><BR>[Called By]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mapper_Init
</UL>

<P><STRONG><a name="[153]"></a>MAP19_MemoryWrite</STRONG> (Thumb, 376 bytes, Stack size 16 bytes, nes_mapper.o(i.MAP19_MemoryWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = MAP19_MemoryWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapCD_
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapAB_
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;map89_
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_VRAM_bank
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank9
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank8
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank7
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank6
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank5
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank4
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank3
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank2
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank11
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank10
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank1
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nes_mapper.o(i.MAP19_Init)
</UL>
<P><STRONG><a name="[152]"></a>MAP19_Reset</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, nes_mapper.o(i.MAP19_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MAP19_Reset
</UL>
<BR>[Calls]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank7
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank6
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank5
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank4
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank3
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank2
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank1
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nes_mapper.o(i.MAP19_Init)
</UL>
<P><STRONG><a name="[379]"></a>MAP1_Init</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nes_mapper.o(i.MAP1_Init))
<BR><BR>[Called By]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mapper_Init
</UL>

<P><STRONG><a name="[34f]"></a>MAP1_MMC1_set_CPU_banks</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, nes_mapper.o(i.MAP1_MMC1_set_CPU_banks))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = MAP1_MMC1_set_CPU_banks &rArr; set_CPU_banks
</UL>
<BR>[Calls]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_CPU_banks
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP1_MemoryWrite
</UL>

<P><STRONG><a name="[156]"></a>MAP1_MemoryWrite</STRONG> (Thumb, 574 bytes, Stack size 40 bytes, nes_mapper.o(i.MAP1_MemoryWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 108 + Unknown Stack Size
<LI>Call Chain = MAP1_MemoryWrite &rArr; set_PPU_banks &rArr; set_tile_banks
</UL>
<BR>[Calls]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_mirroring
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_VRAM_bank
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_banks
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank7
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank6
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank5
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank4
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank3
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank2
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank1
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank0
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP1_MMC1_set_CPU_banks
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nes_mapper.o(i.MAP1_Init)
</UL>
<P><STRONG><a name="[155]"></a>MAP1_Reset</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, nes_mapper.o(i.MAP1_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MAP1_Reset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nes_mapper.o(i.MAP1_Init)
</UL>
<P><STRONG><a name="[159]"></a>MAP21_HSync</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, nes_mapper.o(i.MAP21_HSync))
<BR>[Address Reference Count : 1]<UL><LI> nes_mapper.o(i.MAP21_Init)
</UL>
<P><STRONG><a name="[387]"></a>MAP21_Init</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, nes_mapper.o(i.MAP21_Init))
<BR><BR>[Called By]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mapper_Init
</UL>

<P><STRONG><a name="[158]"></a>MAP21_MemoryWrite</STRONG> (Thumb, 704 bytes, Stack size 16 bytes, nes_mapper.o(i.MAP21_MemoryWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 28 + Unknown Stack Size
<LI>Call Chain = MAP21_MemoryWrite &rArr; set_mirroring
</UL>
<BR>[Calls]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_mirroring
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapCD_
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapAB_
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;map89_
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank7
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank6
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank5
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank4
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank3
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank2
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank1
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nes_mapper.o(i.MAP21_Init)
</UL>
<P><STRONG><a name="[157]"></a>MAP21_Reset</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, nes_mapper.o(i.MAP21_Reset))
<BR>[Address Reference Count : 1]<UL><LI> nes_mapper.o(i.MAP21_Init)
</UL>
<P><STRONG><a name="[3a2]"></a>MAP225_Init</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nes_mapper.o(i.MAP225_Init))
<BR><BR>[Called By]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mapper_Init
</UL>

<P><STRONG><a name="[15b]"></a>MAP225_MemoryWrite</STRONG> (Thumb, 218 bytes, Stack size 24 bytes, nes_mapper.o(i.MAP225_MemoryWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 36 + Unknown Stack Size
<LI>Call Chain = MAP225_MemoryWrite &rArr; set_mirroring
</UL>
<BR>[Calls]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_mirroring
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapEF_
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapCD_
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapAB_
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;map89_
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank7
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank6
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank5
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank4
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank3
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank2
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank1
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nes_mapper.o(i.MAP225_Init)
</UL>
<P><STRONG><a name="[15a]"></a>MAP225_Reset</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, nes_mapper.o(i.MAP225_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = MAP225_Reset &rArr; set_PPU_banks &rArr; set_tile_banks
</UL>
<BR>[Calls]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_banks
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nes_mapper.o(i.MAP225_Init)
</UL>
<P><STRONG><a name="[3a3]"></a>MAP227_Init</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nes_mapper.o(i.MAP227_Init))
<BR><BR>[Called By]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mapper_Init
</UL>

<P><STRONG><a name="[15d]"></a>MAP227_MemoryWrite</STRONG> (Thumb, 214 bytes, Stack size 24 bytes, nes_mapper.o(i.MAP227_MemoryWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 36 + Unknown Stack Size
<LI>Call Chain = MAP227_MemoryWrite &rArr; set_mirroring
</UL>
<BR>[Calls]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_mirroring
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapEF_
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapCD_
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapAB_
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;map89_
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nes_mapper.o(i.MAP227_Init)
</UL>
<P><STRONG><a name="[15c]"></a>MAP227_Reset</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, nes_mapper.o(i.MAP227_Reset))
<BR>[Address Reference Count : 1]<UL><LI> nes_mapper.o(i.MAP227_Init)
</UL>
<P><STRONG><a name="[388]"></a>MAP22_Init</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nes_mapper.o(i.MAP22_Init))
<BR><BR>[Called By]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mapper_Init
</UL>

<P><STRONG><a name="[15f]"></a>MAP22_MemoryWrite</STRONG> (Thumb, 196 bytes, Stack size 0 bytes, nes_mapper.o(i.MAP22_MemoryWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 12 + Unknown Stack Size
<LI>Call Chain = MAP22_MemoryWrite &rArr; set_mirroring
</UL>
<BR>[Calls]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_mirroring
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapAB_
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;map89_
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank7
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank6
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank5
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank4
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank3
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank2
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank1
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nes_mapper.o(i.MAP22_Init)
</UL>
<P><STRONG><a name="[15e]"></a>MAP22_Reset</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, nes_mapper.o(i.MAP22_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = MAP22_Reset &rArr; set_PPU_banks &rArr; set_tile_banks
</UL>
<BR>[Calls]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_banks
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nes_mapper.o(i.MAP22_Init)
</UL>
<P><STRONG><a name="[162]"></a>MAP23_HSync</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, nes_mapper.o(i.MAP23_HSync))
<BR>[Address Reference Count : 1]<UL><LI> nes_mapper.o(i.MAP23_Init)
</UL>
<P><STRONG><a name="[389]"></a>MAP23_Init</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, nes_mapper.o(i.MAP23_Init))
<BR><BR>[Called By]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mapper_Init
</UL>

<P><STRONG><a name="[161]"></a>MAP23_MemoryWrite</STRONG> (Thumb, 668 bytes, Stack size 16 bytes, nes_mapper.o(i.MAP23_MemoryWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 28 + Unknown Stack Size
<LI>Call Chain = MAP23_MemoryWrite &rArr; set_mirroring
</UL>
<BR>[Calls]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_mirroring
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapCD_
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapAB_
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;map89_
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank7
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank6
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank5
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank4
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank3
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank2
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank1
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nes_mapper.o(i.MAP23_Init)
</UL>
<P><STRONG><a name="[160]"></a>MAP23_Reset</STRONG> (Thumb, 74 bytes, Stack size 40 bytes, nes_mapper.o(i.MAP23_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = MAP23_Reset &rArr; set_PPU_banks &rArr; set_tile_banks
</UL>
<BR>[Calls]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_banks
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nes_mapper.o(i.MAP23_Init)
</UL>
<P><STRONG><a name="[3a4]"></a>MAP240_Init</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nes_mapper.o(i.MAP240_Init))
<BR><BR>[Called By]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mapper_Init
</UL>

<P><STRONG><a name="[164]"></a>MAP240_MemoryWriteLow</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, nes_mapper.o(i.MAP240_MemoryWriteLow))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = MAP240_MemoryWriteLow
</UL>
<BR>[Calls]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapEF_
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapCD_
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapAB_
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;map89_
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank7
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank6
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank5
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank4
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank3
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank2
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank1
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nes_mapper.o(i.MAP240_Init)
</UL>
<P><STRONG><a name="[163]"></a>MAP240_Reset</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, nes_mapper.o(i.MAP240_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = MAP240_Reset &rArr; set_PPU_banks &rArr; set_tile_banks
</UL>
<BR>[Calls]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_banks
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nes_mapper.o(i.MAP240_Init)
</UL>
<P><STRONG><a name="[3a5]"></a>MAP245_Init</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nes_mapper.o(i.MAP245_Init))
<BR><BR>[Called By]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mapper_Init
</UL>

<P><STRONG><a name="[166]"></a>MAP245_MemoryWrite</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, nes_mapper.o(i.MAP245_MemoryWrite))
<BR><BR>[Calls]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapAB_
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;map89_
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nes_mapper.o(i.MAP245_Init)
</UL>
<P><STRONG><a name="[165]"></a>MAP245_Reset</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nes_mapper.o(i.MAP245_Reset))
<BR>[Address Reference Count : 1]<UL><LI> nes_mapper.o(i.MAP245_Init)
</UL>
<P><STRONG><a name="[169]"></a>MAP24_HSync</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, nes_mapper.o(i.MAP24_HSync))
<BR>[Address Reference Count : 1]<UL><LI> nes_mapper.o(i.MAP24_Init)
</UL>
<P><STRONG><a name="[38a]"></a>MAP24_Init</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, nes_mapper.o(i.MAP24_Init))
<BR><BR>[Called By]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mapper_Init
</UL>

<P><STRONG><a name="[168]"></a>MAP24_MemoryWrite</STRONG> (Thumb, 326 bytes, Stack size 8 bytes, nes_mapper.o(i.MAP24_MemoryWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 20 + Unknown Stack Size
<LI>Call Chain = MAP24_MemoryWrite &rArr; set_mirroring
</UL>
<BR>[Calls]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_mirroring
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapCD_
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapAB_
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;map89_
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank7
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank6
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank5
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank4
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank3
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank2
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank1
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nes_mapper.o(i.MAP24_Init)
</UL>
<P><STRONG><a name="[167]"></a>MAP24_Reset</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, nes_mapper.o(i.MAP24_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = MAP24_Reset &rArr; set_PPU_banks &rArr; set_tile_banks
</UL>
<BR>[Calls]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_banks
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nes_mapper.o(i.MAP24_Init)
</UL>
<P><STRONG><a name="[16c]"></a>MAP25_HSync</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, nes_mapper.o(i.MAP25_HSync))
<BR>[Address Reference Count : 1]<UL><LI> nes_mapper.o(i.MAP25_Init)
</UL>
<P><STRONG><a name="[38b]"></a>MAP25_Init</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, nes_mapper.o(i.MAP25_Init))
<BR><BR>[Called By]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mapper_Init
</UL>

<P><STRONG><a name="[16b]"></a>MAP25_MemoryWrite</STRONG> (Thumb, 752 bytes, Stack size 16 bytes, nes_mapper.o(i.MAP25_MemoryWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 28 + Unknown Stack Size
<LI>Call Chain = MAP25_MemoryWrite &rArr; set_mirroring
</UL>
<BR>[Calls]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_mirroring
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapCD_
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapAB_
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;map89_
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank7
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank6
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank5
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank4
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank3
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank2
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank1
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nes_mapper.o(i.MAP25_Init)
</UL>
<P><STRONG><a name="[16a]"></a>MAP25_Reset</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, nes_mapper.o(i.MAP25_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = MAP25_Reset &rArr; set_PPU_banks &rArr; set_tile_banks
</UL>
<BR>[Calls]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_banks
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nes_mapper.o(i.MAP25_Init)
</UL>
<P><STRONG><a name="[37a]"></a>MAP2_Init</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nes_mapper.o(i.MAP2_Init))
<BR><BR>[Called By]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mapper_Init
</UL>

<P><STRONG><a name="[16e]"></a>MAP2_MemoryWrite</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, nes_mapper.o(i.MAP2_MemoryWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = MAP2_MemoryWrite &rArr; set_CPU_banks
</UL>
<BR>[Calls]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_CPU_banks
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nes_mapper.o(i.MAP2_Init)
</UL>
<P><STRONG><a name="[16d]"></a>MAP2_Reset</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, nes_mapper.o(i.MAP2_Reset))
<BR>[Address Reference Count : 1]<UL><LI> nes_mapper.o(i.MAP2_Init)
</UL>
<P><STRONG><a name="[38c]"></a>MAP32_Init</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nes_mapper.o(i.MAP32_Init))
<BR><BR>[Called By]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mapper_Init
</UL>

<P><STRONG><a name="[170]"></a>MAP32_MemoryWrite</STRONG> (Thumb, 192 bytes, Stack size 16 bytes, nes_mapper.o(i.MAP32_MemoryWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 28 + Unknown Stack Size
<LI>Call Chain = MAP32_MemoryWrite &rArr; set_mirroring
</UL>
<BR>[Calls]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_mirroring
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapCD_
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapAB_
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;map89_
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank7
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank6
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank5
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank4
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank3
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank2
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank1
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nes_mapper.o(i.MAP32_Init)
</UL>
<P><STRONG><a name="[16f]"></a>MAP32_Reset</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, nes_mapper.o(i.MAP32_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = MAP32_Reset &rArr; set_PPU_banks &rArr; set_tile_banks
</UL>
<BR>[Calls]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_banks
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nes_mapper.o(i.MAP32_Init)
</UL>
<P><STRONG><a name="[173]"></a>MAP33_HSync</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, nes_mapper.o(i.MAP33_HSync))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MAP33_HSync
</UL>
<BR>[Calls]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spr_enabled
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bg_enabled
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nes_mapper.o(i.MAP33_Init)
</UL>
<P><STRONG><a name="[38d]"></a>MAP33_Init</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, nes_mapper.o(i.MAP33_Init))
<BR><BR>[Called By]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mapper_Init
</UL>

<P><STRONG><a name="[172]"></a>MAP33_MemoryWrite</STRONG> (Thumb, 246 bytes, Stack size 16 bytes, nes_mapper.o(i.MAP33_MemoryWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 28 + Unknown Stack Size
<LI>Call Chain = MAP33_MemoryWrite &rArr; set_mirroring
</UL>
<BR>[Calls]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_mirroring
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapAB_
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;map89_
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank7
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank6
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank5
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank4
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank3
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank2
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank1
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nes_mapper.o(i.MAP33_Init)
</UL>
<P><STRONG><a name="[171]"></a>MAP33_Reset</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, nes_mapper.o(i.MAP33_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = MAP33_Reset &rArr; set_PPU_banks &rArr; set_tile_banks
</UL>
<BR>[Calls]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_banks
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nes_mapper.o(i.MAP33_Init)
</UL>
<P><STRONG><a name="[38e]"></a>MAP34_Init</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nes_mapper.o(i.MAP34_Init))
<BR><BR>[Called By]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mapper_Init
</UL>

<P><STRONG><a name="[175]"></a>MAP34_MemoryWrite</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, nes_mapper.o(i.MAP34_MemoryWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = MAP34_MemoryWrite &rArr; set_CPU_banks
</UL>
<BR>[Calls]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_CPU_banks
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nes_mapper.o(i.MAP34_Init)
</UL>
<P><STRONG><a name="[174]"></a>MAP34_Reset</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, nes_mapper.o(i.MAP34_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = MAP34_Reset &rArr; set_PPU_banks &rArr; set_tile_banks
</UL>
<BR>[Calls]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_banks
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nes_mapper.o(i.MAP34_Init)
</UL>
<P><STRONG><a name="[37b]"></a>MAP3_Init</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nes_mapper.o(i.MAP3_Init))
<BR><BR>[Called By]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mapper_Init
</UL>

<P><STRONG><a name="[177]"></a>MAP3_MemoryWrite</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, nes_mapper.o(i.MAP3_MemoryWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = MAP3_MemoryWrite &rArr; set_PPU_banks &rArr; set_tile_banks
</UL>
<BR>[Calls]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_banks
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nes_mapper.o(i.MAP3_Init)
</UL>
<P><STRONG><a name="[176]"></a>MAP3_Reset</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, nes_mapper.o(i.MAP3_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 92 + Unknown Stack Size
<LI>Call Chain = MAP3_Reset &rArr; set_PPU_banks &rArr; set_tile_banks
</UL>
<BR>[Calls]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;map67_0
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_banks
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nes_mapper.o(i.MAP3_Init)
</UL>
<P><STRONG><a name="[17a]"></a>MAP4_HSync</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, nes_mapper.o(i.MAP4_HSync))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MAP4_HSync
</UL>
<BR>[Calls]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spr_enabled
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bg_enabled
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nes_mapper.o(i.MAP4_Init)
</UL>
<P><STRONG><a name="[37c]"></a>MAP4_Init</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, nes_mapper.o(i.MAP4_Init))
<BR><BR>[Called By]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mapper_Init
</UL>

<P><STRONG><a name="[178]"></a>MAP4_Reset</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, nes_mapper.o(i.MAP4_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = MAP4_Reset &rArr; Map4_Set_PPU_Banks &rArr; set_PPU_banks &rArr; set_tile_banks
</UL>
<BR>[Calls]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map4_Set_PPU_Banks
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nes_mapper.o(i.MAP4_Init)
</UL>
<P><STRONG><a name="[179]"></a>MAP4_Write</STRONG> (Thumb, 286 bytes, Stack size 16 bytes, nes_mapper.o(i.MAP4_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 108 + Unknown Stack Size
<LI>Call Chain = MAP4_Write &rArr; Map4_Set_PPU_Banks &rArr; set_PPU_banks &rArr; set_tile_banks
</UL>
<BR>[Calls]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_mirroring
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map4_Set_PPU_Banks
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map4_Set_CPU_Banks
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nes_mapper.o(i.MAP4_Init)
</UL>
<P><STRONG><a name="[17d]"></a>MAP64_HSync</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, nes_mapper.o(i.MAP64_HSync))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MAP64_HSync
</UL>
<BR>[Calls]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spr_enabled
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bg_enabled
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nes_mapper.o(i.MAP64_Init)
</UL>
<P><STRONG><a name="[38f]"></a>MAP64_Init</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, nes_mapper.o(i.MAP64_Init))
<BR><BR>[Called By]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mapper_Init
</UL>

<P><STRONG><a name="[17c]"></a>MAP64_MemoryWrite</STRONG> (Thumb, 358 bytes, Stack size 8 bytes, nes_mapper.o(i.MAP64_MemoryWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 20 + Unknown Stack Size
<LI>Call Chain = MAP64_MemoryWrite &rArr; set_mirroring
</UL>
<BR>[Calls]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_mirroring
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapCD_
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapAB_
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;map89_
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank7
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank6
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank5
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank4
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank3
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank2
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank1
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nes_mapper.o(i.MAP64_Init)
</UL>
<P><STRONG><a name="[17b]"></a>MAP64_Reset</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, nes_mapper.o(i.MAP64_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = MAP64_Reset &rArr; set_PPU_banks &rArr; set_tile_banks
</UL>
<BR>[Calls]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_banks
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nes_mapper.o(i.MAP64_Init)
</UL>
<P><STRONG><a name="[180]"></a>MAP65_HSync</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, nes_mapper.o(i.MAP65_HSync))
<BR>[Address Reference Count : 1]<UL><LI> nes_mapper.o(i.MAP65_Init)
</UL>
<P><STRONG><a name="[390]"></a>MAP65_Init</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, nes_mapper.o(i.MAP65_Init))
<BR><BR>[Called By]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mapper_Init
</UL>

<P><STRONG><a name="[17f]"></a>MAP65_MemoryWrite</STRONG> (Thumb, 270 bytes, Stack size 8 bytes, nes_mapper.o(i.MAP65_MemoryWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 20 + Unknown Stack Size
<LI>Call Chain = MAP65_MemoryWrite &rArr; set_mirroring
</UL>
<BR>[Calls]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_mirroring
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapCD_
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapAB_
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;map89_
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank7
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank6
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank5
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank4
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank3
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank2
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank1
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nes_mapper.o(i.MAP65_Init)
</UL>
<P><STRONG><a name="[17e]"></a>MAP65_Reset</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, nes_mapper.o(i.MAP65_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = MAP65_Reset &rArr; set_PPU_banks &rArr; set_tile_banks
</UL>
<BR>[Calls]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_banks
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nes_mapper.o(i.MAP65_Init)
</UL>
<P><STRONG><a name="[391]"></a>MAP66_Init</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nes_mapper.o(i.MAP66_Init))
<BR><BR>[Called By]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mapper_Init
</UL>

<P><STRONG><a name="[182]"></a>MAP66_MemoryWrite</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, nes_mapper.o(i.MAP66_MemoryWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = MAP66_MemoryWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapEF_
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapCD_
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapAB_
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;map89_
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank7
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank6
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank5
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank4
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank3
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank2
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank1
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nes_mapper.o(i.MAP66_Init)
</UL>
<P><STRONG><a name="[181]"></a>MAP66_Reset</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, nes_mapper.o(i.MAP66_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = MAP66_Reset &rArr; set_PPU_banks &rArr; set_tile_banks
</UL>
<BR>[Calls]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_banks
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nes_mapper.o(i.MAP66_Init)
</UL>
<P><STRONG><a name="[185]"></a>MAP67_HSync</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, nes_mapper.o(i.MAP67_HSync))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MAP67_HSync
</UL>
<BR>[Calls]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spr_enabled
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bg_enabled
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nes_mapper.o(i.MAP67_Init)
</UL>
<P><STRONG><a name="[392]"></a>MAP67_Init</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, nes_mapper.o(i.MAP67_Init))
<BR><BR>[Called By]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mapper_Init
</UL>

<P><STRONG><a name="[184]"></a>MAP67_MemoryWrite</STRONG> (Thumb, 192 bytes, Stack size 16 bytes, nes_mapper.o(i.MAP67_MemoryWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 28 + Unknown Stack Size
<LI>Call Chain = MAP67_MemoryWrite &rArr; set_mirroring
</UL>
<BR>[Calls]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_mirroring
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapAB_
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;map89_
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank7
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank6
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank5
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank4
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank3
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank2
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank1
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nes_mapper.o(i.MAP67_Init)
</UL>
<P><STRONG><a name="[183]"></a>MAP67_Reset</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, nes_mapper.o(i.MAP67_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MAP67_Reset
</UL>
<BR>[Calls]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank7
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank6
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank5
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank4
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank3
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank2
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank1
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nes_mapper.o(i.MAP67_Init)
</UL>
<P><STRONG><a name="[188]"></a>MAP69_HSync</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, nes_mapper.o(i.MAP69_HSync))
<BR>[Address Reference Count : 1]<UL><LI> nes_mapper.o(i.MAP69_Init)
</UL>
<P><STRONG><a name="[393]"></a>MAP69_Init</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, nes_mapper.o(i.MAP69_Init))
<BR><BR>[Called By]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mapper_Init
</UL>

<P><STRONG><a name="[187]"></a>MAP69_MemoryWrite</STRONG> (Thumb, 232 bytes, Stack size 8 bytes, nes_mapper.o(i.MAP69_MemoryWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 20 + Unknown Stack Size
<LI>Call Chain = MAP69_MemoryWrite &rArr; set_mirroring
</UL>
<BR>[Calls]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_mirroring
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapCD_
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapAB_
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;map89_
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;map67_
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank7
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank6
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank5
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank4
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank3
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank2
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank1
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nes_mapper.o(i.MAP69_Init)
</UL>
<P><STRONG><a name="[186]"></a>MAP69_Reset</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, nes_mapper.o(i.MAP69_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = MAP69_Reset &rArr; set_PPU_banks &rArr; set_tile_banks
</UL>
<BR>[Calls]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_banks
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nes_mapper.o(i.MAP69_Init)
</UL>
<P><STRONG><a name="[18b]"></a>MAP6_HSync</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, nes_mapper.o(i.MAP6_HSync))
<BR>[Address Reference Count : 1]<UL><LI> nes_mapper.o(i.MAP6_Init)
</UL>
<P><STRONG><a name="[37d]"></a>MAP6_Init</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, nes_mapper.o(i.MAP6_Init))
<BR><BR>[Called By]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mapper_Init
</UL>

<P><STRONG><a name="[18a]"></a>MAP6_MemoryWrite</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, nes_mapper.o(i.MAP6_MemoryWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = MAP6_MemoryWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapAB_
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;map89_
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_VRAM_bank
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nes_mapper.o(i.MAP6_Init)
</UL>
<P><STRONG><a name="[18c]"></a>MAP6_MemoryWriteLow</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, nes_mapper.o(i.MAP6_MemoryWriteLow))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = MAP6_MemoryWriteLow &rArr; set_mirroring
</UL>
<BR>[Calls]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_mirroring
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nes_mapper.o(i.MAP6_Init)
</UL>
<P><STRONG><a name="[189]"></a>MAP6_Reset</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, nes_mapper.o(i.MAP6_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = MAP6_Reset &rArr; set_PPU_banks &rArr; set_tile_banks
</UL>
<BR>[Calls]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_VRAM_bank
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_banks
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nes_mapper.o(i.MAP6_Init)
</UL>
<P><STRONG><a name="[394]"></a>MAP70_Init</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nes_mapper.o(i.MAP70_Init))
<BR><BR>[Called By]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mapper_Init
</UL>

<P><STRONG><a name="[18e]"></a>MAP70_MemoryWrite</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, nes_mapper.o(i.MAP70_MemoryWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 36 + Unknown Stack Size
<LI>Call Chain = MAP70_MemoryWrite &rArr; set_mirroring
</UL>
<BR>[Calls]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_mirroring
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapAB_
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;map89_
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank7
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank6
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank5
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank4
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank3
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank2
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank1
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nes_mapper.o(i.MAP70_Init)
</UL>
<P><STRONG><a name="[18d]"></a>MAP70_Reset</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, nes_mapper.o(i.MAP70_Reset))
<BR>[Address Reference Count : 1]<UL><LI> nes_mapper.o(i.MAP70_Init)
</UL>
<P><STRONG><a name="[395]"></a>MAP71_Init</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nes_mapper.o(i.MAP71_Init))
<BR><BR>[Called By]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mapper_Init
</UL>

<P><STRONG><a name="[190]"></a>MAP71_MemoryWrite</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, nes_mapper.o(i.MAP71_MemoryWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 20 + Unknown Stack Size
<LI>Call Chain = MAP71_MemoryWrite &rArr; set_mirroring
</UL>
<BR>[Calls]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_mirroring
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapAB_
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;map89_
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nes_mapper.o(i.MAP71_Init)
</UL>
<P><STRONG><a name="[18f]"></a>MAP71_Reset</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, nes_mapper.o(i.MAP71_Reset))
<BR>[Address Reference Count : 1]<UL><LI> nes_mapper.o(i.MAP71_Init)
</UL>
<P><STRONG><a name="[396]"></a>MAP72_Init</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nes_mapper.o(i.MAP72_Init))
<BR><BR>[Called By]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mapper_Init
</UL>

<P><STRONG><a name="[192]"></a>MAP72_MemoryWrite</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, nes_mapper.o(i.MAP72_MemoryWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 100 + Unknown Stack Size
<LI>Call Chain = MAP72_MemoryWrite &rArr; set_PPU_banks &rArr; set_tile_banks
</UL>
<BR>[Calls]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_banks
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_CPU_banks
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nes_mapper.o(i.MAP72_Init)
</UL>
<P><STRONG><a name="[191]"></a>MAP72_Reset</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, nes_mapper.o(i.MAP72_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = MAP72_Reset &rArr; set_PPU_banks &rArr; set_tile_banks
</UL>
<BR>[Calls]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_banks
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nes_mapper.o(i.MAP72_Init)
</UL>
<P><STRONG><a name="[195]"></a>MAP73_HSync</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nes_mapper.o(i.MAP73_HSync))
<BR>[Address Reference Count : 1]<UL><LI> nes_mapper.o(i.MAP73_Init)
</UL>
<P><STRONG><a name="[397]"></a>MAP73_Init</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, nes_mapper.o(i.MAP73_Init))
<BR><BR>[Called By]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mapper_Init
</UL>

<P><STRONG><a name="[194]"></a>MAP73_MemoryWrite</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, nes_mapper.o(i.MAP73_MemoryWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = MAP73_MemoryWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapAB_
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;map89_
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nes_mapper.o(i.MAP73_Init)
</UL>
<P><STRONG><a name="[193]"></a>MAP73_Reset</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nes_mapper.o(i.MAP73_Reset))
<BR>[Address Reference Count : 1]<UL><LI> nes_mapper.o(i.MAP73_Init)
</UL>
<P><STRONG><a name="[398]"></a>MAP75_Init</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nes_mapper.o(i.MAP75_Init))
<BR><BR>[Called By]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mapper_Init
</UL>

<P><STRONG><a name="[197]"></a>MAP75_MemoryWrite</STRONG> (Thumb, 316 bytes, Stack size 32 bytes, nes_mapper.o(i.MAP75_MemoryWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 44 + Unknown Stack Size
<LI>Call Chain = MAP75_MemoryWrite &rArr; set_mirroring
</UL>
<BR>[Calls]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_mirroring
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapCD_
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapAB_
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;map89_
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank7
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank6
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank5
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank4
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank3
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank2
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank1
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nes_mapper.o(i.MAP75_Init)
</UL>
<P><STRONG><a name="[196]"></a>MAP75_Reset</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, nes_mapper.o(i.MAP75_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = MAP75_Reset &rArr; set_PPU_banks &rArr; set_tile_banks
</UL>
<BR>[Calls]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_banks
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nes_mapper.o(i.MAP75_Init)
</UL>
<P><STRONG><a name="[399]"></a>MAP76_Init</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nes_mapper.o(i.MAP76_Init))
<BR><BR>[Called By]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mapper_Init
</UL>

<P><STRONG><a name="[199]"></a>MAP76_MemoryWrite</STRONG> (Thumb, 130 bytes, Stack size 8 bytes, nes_mapper.o(i.MAP76_MemoryWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = MAP76_MemoryWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapAB_
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;map89_
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank7
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank6
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank5
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank4
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank3
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank2
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank1
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nes_mapper.o(i.MAP76_Init)
</UL>
<P><STRONG><a name="[198]"></a>MAP76_Reset</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, nes_mapper.o(i.MAP76_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = MAP76_Reset &rArr; set_PPU_banks &rArr; set_tile_banks
</UL>
<BR>[Calls]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_banks
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nes_mapper.o(i.MAP76_Init)
</UL>
<P><STRONG><a name="[39a]"></a>MAP78_Init</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nes_mapper.o(i.MAP78_Init))
<BR><BR>[Called By]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mapper_Init
</UL>

<P><STRONG><a name="[19b]"></a>MAP78_MemoryWrite</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, nes_mapper.o(i.MAP78_MemoryWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 36 + Unknown Stack Size
<LI>Call Chain = MAP78_MemoryWrite &rArr; set_mirroring
</UL>
<BR>[Calls]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_mirroring
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapAB_
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;map89_
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank7
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank6
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank5
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank4
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank3
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank2
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank1
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nes_mapper.o(i.MAP78_Init)
</UL>
<P><STRONG><a name="[19a]"></a>MAP78_Reset</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, nes_mapper.o(i.MAP78_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = MAP78_Reset &rArr; set_PPU_banks &rArr; set_tile_banks
</UL>
<BR>[Calls]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_banks
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nes_mapper.o(i.MAP78_Init)
</UL>
<P><STRONG><a name="[39b]"></a>MAP79_Init</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nes_mapper.o(i.MAP79_Init))
<BR><BR>[Called By]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mapper_Init
</UL>

<P><STRONG><a name="[19d]"></a>MAP79_MemoryWriteLow</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, nes_mapper.o(i.MAP79_MemoryWriteLow))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = MAP79_MemoryWriteLow
</UL>
<BR>[Calls]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapEF_
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapCD_
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapAB_
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;map89_
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank7
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank6
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank5
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank4
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank3
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank2
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank1
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nes_mapper.o(i.MAP79_Init)
</UL>
<P><STRONG><a name="[19c]"></a>MAP79_Reset</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, nes_mapper.o(i.MAP79_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = MAP79_Reset &rArr; set_PPU_banks &rArr; set_tile_banks
</UL>
<BR>[Calls]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_banks
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nes_mapper.o(i.MAP79_Init)
</UL>
<P><STRONG><a name="[37e]"></a>MAP7_Init</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nes_mapper.o(i.MAP7_Init))
<BR><BR>[Called By]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mapper_Init
</UL>

<P><STRONG><a name="[19f]"></a>MAP7_MemoryWrite</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, nes_mapper.o(i.MAP7_MemoryWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = MAP7_MemoryWrite &rArr; set_CPU_banks
</UL>
<BR>[Calls]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_mirroring
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_CPU_banks
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nes_mapper.o(i.MAP7_Init)
</UL>
<P><STRONG><a name="[19e]"></a>MAP7_Reset</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, nes_mapper.o(i.MAP7_Reset))
<BR>[Address Reference Count : 1]<UL><LI> nes_mapper.o(i.MAP7_Init)
</UL>
<P><STRONG><a name="[1a2]"></a>MAP85_HSync</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, nes_mapper.o(i.MAP85_HSync))
<BR>[Address Reference Count : 1]<UL><LI> nes_mapper.o(i.MAP85_Init)
</UL>
<P><STRONG><a name="[39c]"></a>MAP85_Init</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, nes_mapper.o(i.MAP85_Init))
<BR><BR>[Called By]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mapper_Init
</UL>

<P><STRONG><a name="[1a1]"></a>MAP85_MemoryWrite</STRONG> (Thumb, 392 bytes, Stack size 0 bytes, nes_mapper.o(i.MAP85_MemoryWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 12 + Unknown Stack Size
<LI>Call Chain = MAP85_MemoryWrite &rArr; set_mirroring
</UL>
<BR>[Calls]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_mirroring
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapCD_
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapAB_
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;map89_
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_VRAM_bank
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank7
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank6
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank5
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank4
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank3
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank2
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank1
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nes_mapper.o(i.MAP85_Init)
</UL>
<P><STRONG><a name="[1a0]"></a>MAP85_Reset</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, nes_mapper.o(i.MAP85_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = MAP85_Reset &rArr; set_PPU_banks &rArr; set_tile_banks
</UL>
<BR>[Calls]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_VRAM_bank
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_banks
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nes_mapper.o(i.MAP85_Init)
</UL>
<P><STRONG><a name="[39d]"></a>MAP87_Init</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nes_mapper.o(i.MAP87_Init))
<BR><BR>[Called By]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mapper_Init
</UL>

<P><STRONG><a name="[1a4]"></a>MAP87_MemoryWrite</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, nes_mapper.o(i.MAP87_MemoryWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MAP87_MemoryWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank7
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank6
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank5
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank4
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank3
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank2
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank1
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nes_mapper.o(i.MAP87_Init)
</UL>
<P><STRONG><a name="[1a3]"></a>MAP87_Reset</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, nes_mapper.o(i.MAP87_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = MAP87_Reset &rArr; set_PPU_banks &rArr; set_tile_banks
</UL>
<BR>[Calls]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_banks
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nes_mapper.o(i.MAP87_Init)
</UL>
<P><STRONG><a name="[39e]"></a>MAP88_Init</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nes_mapper.o(i.MAP88_Init))
<BR><BR>[Called By]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mapper_Init
</UL>

<P><STRONG><a name="[1a6]"></a>MAP88_MemoryWrite</STRONG> (Thumb, 178 bytes, Stack size 8 bytes, nes_mapper.o(i.MAP88_MemoryWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 20 + Unknown Stack Size
<LI>Call Chain = MAP88_MemoryWrite &rArr; set_mirroring
</UL>
<BR>[Calls]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_mirroring
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapAB_
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;map89_
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank7
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank6
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank5
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank4
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank3
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank2
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank1
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nes_mapper.o(i.MAP88_Init)
</UL>
<P><STRONG><a name="[1a5]"></a>MAP88_Reset</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, nes_mapper.o(i.MAP88_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = MAP88_Reset &rArr; set_PPU_banks &rArr; set_tile_banks
</UL>
<BR>[Calls]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_banks
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nes_mapper.o(i.MAP88_Init)
</UL>
<P><STRONG><a name="[37f]"></a>MAP8_Init</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nes_mapper.o(i.MAP8_Init))
<BR><BR>[Called By]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mapper_Init
</UL>

<P><STRONG><a name="[1a8]"></a>MAP8_MemoryWrite</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, nes_mapper.o(i.MAP8_MemoryWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = MAP8_MemoryWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapAB_
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;map89_
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank7
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank6
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank5
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank4
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank3
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank2
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank1
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nes_mapper.o(i.MAP8_Init)
</UL>
<P><STRONG><a name="[1a7]"></a>MAP8_Reset</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, nes_mapper.o(i.MAP8_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = MAP8_Reset &rArr; set_PPU_banks &rArr; set_tile_banks
</UL>
<BR>[Calls]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_banks
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nes_mapper.o(i.MAP8_Init)
</UL>
<P><STRONG><a name="[39f]"></a>MAP99_Init</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nes_mapper.o(i.MAP99_Init))
<BR><BR>[Called By]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mapper_Init
</UL>

<P><STRONG><a name="[1a9]"></a>MAP99_Reset</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, nes_mapper.o(i.MAP99_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = MAP99_Reset &rArr; set_PPU_banks &rArr; set_tile_banks
</UL>
<BR>[Calls]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_banks
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nes_mapper.o(i.MAP99_Init)
</UL>
<P><STRONG><a name="[1aa]"></a>MAP99_WriteHighRegs</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, nes_mapper.o(i.MAP99_WriteHighRegs))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = MAP99_WriteHighRegs &rArr; set_PPU_banks &rArr; set_tile_banks
</UL>
<BR>[Calls]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_banks
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nes_mapper.o(i.MAP99_Init)
</UL>
<P><STRONG><a name="[35]"></a>MASS_Data_Setup</STRONG> (Thumb, 54 bytes, Stack size 4 bytes, usb_prop.o(i.MASS_Data_Setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = MASS_Data_Setup
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Max_Lun
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(.data)
</UL>
<P><STRONG><a name="[39]"></a>MASS_GetConfigDescriptor</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usb_prop.o(i.MASS_GetConfigDescriptor))
<BR><BR>[Calls]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_GetDescriptorData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(.data)
</UL>
<P><STRONG><a name="[38]"></a>MASS_GetDeviceDescriptor</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usb_prop.o(i.MASS_GetDeviceDescriptor))
<BR><BR>[Calls]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_GetDescriptorData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(.data)
</UL>
<P><STRONG><a name="[3a]"></a>MASS_GetStringDescriptor</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, usb_prop.o(i.MASS_GetStringDescriptor))
<BR><BR>[Calls]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_GetDescriptorData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(.data)
</UL>
<P><STRONG><a name="[37]"></a>MASS_Get_Interface_Setting</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usb_prop.o(i.MASS_Get_Interface_Setting))
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(.data)
</UL>
<P><STRONG><a name="[36]"></a>MASS_NoData_Setup</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, usb_prop.o(i.MASS_NoData_Setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MASS_NoData_Setup
</UL>
<BR>[Calls]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearDTOG_TX
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearDTOG_RX
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(.data)
</UL>
<P><STRONG><a name="[32]"></a>MASS_Reset</STRONG> (Thumb, 200 bytes, Stack size 16 bytes, usb_prop.o(i.MASS_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = MASS_Reset &rArr; USB_NotConfigured_LED &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPType
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPTxAddr
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPRxValid
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPRxStatus
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPRxAddr
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBTABLE
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Status_Out
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPTxStatus
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPRxCount
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDeviceAddress
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_NotConfigured_LED
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(.data)
</UL>
<P><STRONG><a name="[33]"></a>MASS_Status_In</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usb_prop.o(i.MASS_Status_In))
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(.data)
</UL>
<P><STRONG><a name="[34]"></a>MASS_Status_Out</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usb_prop.o(i.MASS_Status_Out))
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(.data)
</UL>
<P><STRONG><a name="[31]"></a>MASS_init</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, usb_prop.o(i.MASS_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = MASS_init &rArr; PowerOn &rArr; USB_Cable_Config &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SIL_Init
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerOn
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_SerialNum
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(.data)
</UL>
<P><STRONG><a name="[362]"></a>MPU_IIC_Ack</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, mpuiic.o(i.MPU_IIC_Ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = MPU_IIC_Ack &rArr; delay_us &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_IIC_Read_Byte
</UL>

<P><STRONG><a name="[36b]"></a>MPU_IIC_Init</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, mpuiic.o(i.MPU_IIC_Init))
<BR><BR>[Called By]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Init
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_dmp_init
</UL>

<P><STRONG><a name="[363]"></a>MPU_IIC_NAck</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, mpuiic.o(i.MPU_IIC_NAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = MPU_IIC_NAck &rArr; delay_us &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_IIC_Read_Byte
</UL>

<P><STRONG><a name="[364]"></a>MPU_IIC_Read_Byte</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, mpuiic.o(i.MPU_IIC_Read_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = MPU_IIC_Read_Byte &rArr; MPU_IIC_NAck &rArr; delay_us &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_IIC_NAck
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_IIC_Ack
</UL>
<BR>[Called By]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Read_Len
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Read_Byte
</UL>

<P><STRONG><a name="[365]"></a>MPU_IIC_Send_Byte</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, mpuiic.o(i.MPU_IIC_Send_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = MPU_IIC_Send_Byte &rArr; delay_us &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Write_Len
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Write_Byte
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Read_Len
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Read_Byte
</UL>

<P><STRONG><a name="[366]"></a>MPU_IIC_Start</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, mpuiic.o(i.MPU_IIC_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = MPU_IIC_Start &rArr; delay_us &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Write_Len
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Write_Byte
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Read_Len
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Read_Byte
</UL>

<P><STRONG><a name="[367]"></a>MPU_IIC_Stop</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, mpuiic.o(i.MPU_IIC_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = MPU_IIC_Stop &rArr; delay_us &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_IIC_Wait_Ack
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Write_Len
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Write_Byte
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Read_Len
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Read_Byte
</UL>

<P><STRONG><a name="[368]"></a>MPU_IIC_Wait_Ack</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, mpuiic.o(i.MPU_IIC_Wait_Ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = MPU_IIC_Wait_Ack &rArr; MPU_IIC_Stop &rArr; delay_us &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_IIC_Stop
</UL>
<BR>[Called By]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Write_Len
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Write_Byte
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Read_Len
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Read_Byte
</UL>

<P><STRONG><a name="[369]"></a>MPU_Init</STRONG> (Thumb, 160 bytes, Stack size 8 bytes, mpu6050.o(i.MPU_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = MPU_Init &rArr; MPU_Read_Byte &rArr; MPU_IIC_Read_Byte &rArr; MPU_IIC_NAck &rArr; delay_us &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JTAG_Set
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_IIC_Init
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Write_Byte
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Set_Rate
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Set_Gyro_Fsr
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Set_Accel_Fsr
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Read_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appplay_gyro
</UL>

<P><STRONG><a name="[370]"></a>MPU_Read_Byte</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, mpu6050.o(i.MPU_Read_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = MPU_Read_Byte &rArr; MPU_IIC_Read_Byte &rArr; MPU_IIC_NAck &rArr; delay_us &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_IIC_Wait_Ack
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_IIC_Stop
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_IIC_Start
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_IIC_Send_Byte
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_IIC_Read_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Init
</UL>

<P><STRONG><a name="[371]"></a>MPU_Read_Len</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, mpu6050.o(i.MPU_Read_Len))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = MPU_Read_Len &rArr; MPU_IIC_Read_Byte &rArr; MPU_IIC_NAck &rArr; delay_us &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_IIC_Wait_Ack
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_IIC_Stop
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_IIC_Start
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_IIC_Send_Byte
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_IIC_Read_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[6e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_bypass
<LI><a href="#[6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_read_mem
<LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_read_fifo_stream
<LI><a href="#[6df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_init
<LI><a href="#[65c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro_self_test
<LI><a href="#[642]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_st_biases
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_accel_prod_shift
</UL>

<P><STRONG><a name="[36e]"></a>MPU_Set_Accel_Fsr</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, mpu6050.o(i.MPU_Set_Accel_Fsr))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = MPU_Set_Accel_Fsr &rArr; MPU_Write_Byte &rArr; MPU_IIC_Wait_Ack &rArr; MPU_IIC_Stop &rArr; delay_us &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Write_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Init
</UL>

<P><STRONG><a name="[36d]"></a>MPU_Set_Gyro_Fsr</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, mpu6050.o(i.MPU_Set_Gyro_Fsr))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = MPU_Set_Gyro_Fsr &rArr; MPU_Write_Byte &rArr; MPU_IIC_Wait_Ack &rArr; MPU_IIC_Stop &rArr; delay_us &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Write_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Init
</UL>

<P><STRONG><a name="[372]"></a>MPU_Set_LPF</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, mpu6050.o(i.MPU_Set_LPF))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = MPU_Set_LPF &rArr; MPU_Write_Byte &rArr; MPU_IIC_Wait_Ack &rArr; MPU_IIC_Stop &rArr; delay_us &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Write_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Set_Rate
</UL>

<P><STRONG><a name="[36f]"></a>MPU_Set_Rate</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, mpu6050.o(i.MPU_Set_Rate))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = MPU_Set_Rate &rArr; MPU_Write_Byte &rArr; MPU_IIC_Wait_Ack &rArr; MPU_IIC_Stop &rArr; delay_us &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Write_Byte
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Set_LPF
</UL>
<BR>[Called By]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Init
</UL>

<P><STRONG><a name="[36c]"></a>MPU_Write_Byte</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, mpu6050.o(i.MPU_Write_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = MPU_Write_Byte &rArr; MPU_IIC_Wait_Ack &rArr; MPU_IIC_Stop &rArr; delay_us &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_IIC_Wait_Ack
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_IIC_Stop
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_IIC_Start
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_IIC_Send_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Set_Rate
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Set_LPF
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Set_Gyro_Fsr
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Set_Accel_Fsr
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Init
</UL>

<P><STRONG><a name="[373]"></a>MPU_Write_Len</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, mpu6050.o(i.MPU_Write_Len))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = MPU_Write_Len &rArr; MPU_IIC_Wait_Ack &rArr; MPU_IIC_Stop &rArr; delay_us &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_IIC_Wait_Ack
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_IIC_Stop
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_IIC_Start
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_IIC_Send_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_write_mem
<LI><a href="#[6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_sensors
<LI><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_sample_rate
<LI><a href="#[6e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_lpf
<LI><a href="#[6ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_int_latched
<LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_gyro_fsr
<LI><a href="#[6e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_dmp_state
<LI><a href="#[6e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_bypass
<LI><a href="#[6e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_accel_fsr
<LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_reset_fifo
<LI><a href="#[6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_read_mem
<LI><a href="#[6e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_lp_accel_mode
<LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_load_firmware
<LI><a href="#[6df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_init
<LI><a href="#[6de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_int_enable
<LI><a href="#[642]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_st_biases
</UL>

<P><STRONG><a name="[374]"></a>MYRCC_DeInit</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, sys.o(i.MYRCC_DeInit))
<BR><BR>[Calls]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MY_NVIC_SetVectorTable
</UL>
<BR>[Called By]<UL><LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stm32_Clock_Init
</UL>

<P><STRONG><a name="[2d9]"></a>MY_NVIC_Init</STRONG> (Thumb, 74 bytes, Stack size 20 bytes, sys.o(i.MY_NVIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = MY_NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MY_NVIC_PriorityGroupConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart3_init
<LI><a href="#[6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Interrupts_Config
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM9000_Init
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM7_Int_Init
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM6_Int_Init
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_Int_Init
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI8_Init
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remote_Init
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer2_Init
</UL>

<P><STRONG><a name="[376]"></a>MY_NVIC_PriorityGroupConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, sys.o(i.MY_NVIC_PriorityGroupConfig))
<BR><BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MY_NVIC_Init
</UL>

<P><STRONG><a name="[375]"></a>MY_NVIC_SetVectorTable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, sys.o(i.MY_NVIC_SetVectorTable))
<BR><BR>[Called By]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MYRCC_DeInit
</UL>

<P><STRONG><a name="[353]"></a>Map4_Set_CPU_Banks</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, nes_mapper.o(i.Map4_Set_CPU_Banks))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = Map4_Set_CPU_Banks
</UL>
<BR>[Calls]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapEF_
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapCD_
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapAB_
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;map89_
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP4_Write
</UL>

<P><STRONG><a name="[352]"></a>Map4_Set_PPU_Banks</STRONG> (Thumb, 240 bytes, Stack size 24 bytes, nes_mapper.o(i.Map4_Set_PPU_Banks))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = Map4_Set_PPU_Banks &rArr; set_PPU_banks &rArr; set_tile_banks
</UL>
<BR>[Calls]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_VRAM_bank
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_banks
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP4_Write
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP4_Reset
</UL>

<P><STRONG><a name="[1b1]"></a>Mapper_HSync</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, nes_mapper.o(i.Mapper_HSync))
<BR>[Address Reference Count : 1]<UL><LI> nes_mapper.o(i.Mapper_Init)
</UL>
<P><STRONG><a name="[377]"></a>Mapper_Init</STRONG> (Thumb, 504 bytes, Stack size 8 bytes, nes_mapper.o(i.Mapper_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Mapper_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP99_Init
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP8_Init
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP88_Init
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP87_Init
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP85_Init
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP7_Init
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP79_Init
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP78_Init
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP76_Init
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP75_Init
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP73_Init
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP72_Init
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP71_Init
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP70_Init
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP6_Init
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP69_Init
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP67_Init
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP66_Init
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP65_Init
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP64_Init
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP4_Init
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP3_Init
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP34_Init
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP33_Init
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP32_Init
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP2_Init
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP25_Init
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP24_Init
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP245_Init
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP240_Init
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP23_Init
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP22_Init
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP227_Init
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP225_Init
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP21_Init
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP1_Init
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP19_Init
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP18_Init
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP189_Init
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP17_Init
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP16_Init
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP15_Init
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP13_Init
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP11_Init
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP113_Init
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP0_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[6fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nes_load
</UL>

<P><STRONG><a name="[1ae]"></a>Mapper_Read</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, nes_mapper.o(i.Mapper_Read))
<BR>[Address Reference Count : 1]<UL><LI> nes_mapper.o(i.Mapper_Init)
</UL>
<P><STRONG><a name="[1b0]"></a>Mapper_ReadLow</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, nes_mapper.o(i.Mapper_ReadLow))
<BR>[Address Reference Count : 1]<UL><LI> nes_mapper.o(i.Mapper_Init)
</UL>
<P><STRONG><a name="[1ac]"></a>Mapper_Reset</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, nes_mapper.o(i.Mapper_Reset))
<BR>[Address Reference Count : 1]<UL><LI> nes_mapper.o(i.Mapper_Init)
</UL>
<P><STRONG><a name="[1b2]"></a>Mapper_VSync</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, nes_mapper.o(i.Mapper_VSync))
<BR>[Address Reference Count : 1]<UL><LI> nes_mapper.o(i.Mapper_Init)
</UL>
<P><STRONG><a name="[1ad]"></a>Mapper_Write</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, nes_mapper.o(i.Mapper_Write))
<BR>[Address Reference Count : 1]<UL><LI> nes_mapper.o(i.Mapper_Init)
</UL>
<P><STRONG><a name="[1af]"></a>Mapper_WriteLow</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, nes_mapper.o(i.Mapper_WriteLow))
<BR>[Address Reference Count : 1]<UL><LI> nes_mapper.o(i.Mapper_Init)
</UL>
<P><STRONG><a name="[3c]"></a>Mass_Storage_ClearFeature</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, usb_prop.o(i.Mass_Storage_ClearFeature))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Mass_Storage_ClearFeature &rArr; Bot_Abort
</UL>
<BR>[Calls]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bot_Abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(.data)
</UL>
<P><STRONG><a name="[2f9]"></a>Mass_Storage_In</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, usb_bot.o(i.Mass_Storage_In))
<BR><BR>[Stack]<UL><LI>Max Depth = 180 + Unknown Stack Size
<LI>Call Chain = Mass_Storage_In &rArr; SCSI_Read10_Cmd &rArr; Read_Memory &rArr; MAL_Read &rArr; SD_ReadDisk &rArr; SD_ReadMultiBlocks &rArr; SD_DMA_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPRxStatus
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetEPRxStatus
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Read10_Cmd
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_CSW
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EP1_IN_Callback
</UL>

<P><STRONG><a name="[2fa]"></a>Mass_Storage_Out</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, usb_bot.o(i.Mass_Storage_Out))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = Mass_Storage_Out &rArr; CBW_Decode &rArr; SCSI_Write10_Cmd &rArr; Write_Memory &rArr; MAL_Write &rArr; W25QXX_Write &rArr; W25QXX_Erase_Sector &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SIL_Read
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Scsi_Sense_Data
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Write10_Cmd
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBW_Decode
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bot_Abort
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_CSW
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EP2_OUT_Callback
</UL>

<P><STRONG><a name="[3b]"></a>Mass_Storage_SetConfiguration</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, usb_prop.o(i.Mass_Storage_SetConfiguration))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Mass_Storage_SetConfiguration
</UL>
<BR>[Calls]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearDTOG_TX
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearDTOG_RX
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(.data)
</UL>
<P><STRONG><a name="[3d]"></a>Mass_Storage_SetDeviceAddress</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usb_prop.o(i.Mass_Storage_SetDeviceAddress))
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(.data)
</UL>
<P><STRONG><a name="[6f8]"></a>NMI_enabled</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nes_ppu.o(i.NMI_enabled))
<BR><BR>[Called By]<UL><LI><a href="#[6f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nes_emulate_frame
</UL>

<P><STRONG><a name="[2f]"></a>NOP_Process</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usb_core.o(i.NOP_Process))
<BR>[Address Reference Count : 3]<UL><LI> usb_istr.o(.data)
<LI> usb_istr.o(.data)
<LI> usb_prop.o(.data)
</UL>
<P><STRONG><a name="[3a8]"></a>NRF24L01_Check</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, 24l01.o(i.NRF24L01_Check))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = NRF24L01_Check &rArr; NRF24L01_Write_Buf &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_SetSpeed
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_Write_Buf
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_Read_Buf
</UL>
<BR>[Called By]<UL><LI><a href="#[6c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wireless_play
</UL>

<P><STRONG><a name="[3ac]"></a>NRF24L01_Init</STRONG> (Thumb, 146 bytes, Stack size 8 bytes, 24l01.o(i.NRF24L01_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NRF24L01_Init &rArr; SPI2_Init &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[6c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wireless_play
</UL>

<P><STRONG><a name="[3ae]"></a>NRF24L01_RX_Mode</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, 24l01.o(i.NRF24L01_RX_Mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = NRF24L01_RX_Mode &rArr; NRF24L01_Write_Buf &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_Write_Reg
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_Write_Buf
</UL>
<BR>[Called By]<UL><LI><a href="#[6c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wireless_play
</UL>

<P><STRONG><a name="[3ab]"></a>NRF24L01_Read_Buf</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, 24l01.o(i.NRF24L01_Read_Buf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = NRF24L01_Read_Buf &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_ReadWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_RxPacket
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_Check
</UL>

<P><STRONG><a name="[3b1]"></a>NRF24L01_Read_Reg</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, 24l01.o(i.NRF24L01_Read_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NRF24L01_Read_Reg &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_ReadWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_TxPacket
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_RxPacket
</UL>

<P><STRONG><a name="[3b2]"></a>NRF24L01_RxPacket</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, 24l01.o(i.NRF24L01_RxPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = NRF24L01_RxPacket &rArr; NRF24L01_Read_Buf &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_SetSpeed
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_Write_Reg
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_Read_Reg
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_Read_Buf
</UL>
<BR>[Called By]<UL><LI><a href="#[6c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wireless_play
</UL>

<P><STRONG><a name="[3b3]"></a>NRF24L01_TX_Mode</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, 24l01.o(i.NRF24L01_TX_Mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = NRF24L01_TX_Mode &rArr; NRF24L01_Write_Buf &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_Write_Reg
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_Write_Buf
</UL>
<BR>[Called By]<UL><LI><a href="#[6c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wireless_play
</UL>

<P><STRONG><a name="[3b4]"></a>NRF24L01_TxPacket</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, 24l01.o(i.NRF24L01_TxPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = NRF24L01_TxPacket &rArr; NRF24L01_Write_Buf &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_SetSpeed
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_Write_Reg
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_Write_Buf
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_Read_Reg
</UL>
<BR>[Called By]<UL><LI><a href="#[6c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wireless_play
</UL>

<P><STRONG><a name="[3aa]"></a>NRF24L01_Write_Buf</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, 24l01.o(i.NRF24L01_Write_Buf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = NRF24L01_Write_Buf &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_ReadWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_TxPacket
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_TX_Mode
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_RX_Mode
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_Check
</UL>

<P><STRONG><a name="[3af]"></a>NRF24L01_Write_Reg</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, 24l01.o(i.NRF24L01_Write_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = NRF24L01_Write_Reg &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_ReadWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_TxPacket
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_TX_Mode
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_RxPacket
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_RX_Mode
</UL>

<P><STRONG><a name="[3bb]"></a>OSEventNameSet</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, os_core.o(i.OSEventNameSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = OSEventNameSet
</UL>
<BR>[Calls]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_new
</UL>

<P><STRONG><a name="[3be]"></a>OSInit</STRONG> (Thumb, 168 bytes, Stack size 40 bytes, os_core.o(i.OSInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = OSInit &rArr; OSTaskCreateExt &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_QInit
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagInit
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameSet
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInitHookEnd
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInitHookBegin
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTCBList
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitEventList
</UL>
<BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3bf]"></a>OSInitHookBegin</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(i.OSInitHookBegin))
<BR><BR>[Called By]<UL><LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[3c6]"></a>OSInitHookEnd</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(i.OSInitHookEnd))
<BR><BR>[Called By]<UL><LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[2fc]"></a>OSIntEnter</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, os_core.o(i.OSIntEnter))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM7_IRQHandler
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM6_IRQHandler
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_LP_CAN1_RX0_IRQHandler
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBWakeUp_IRQHandler
</UL>

<P><STRONG><a name="[2fd]"></a>OSIntExit</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, os_core.o(i.OSIntExit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = OSIntExit
</UL>
<BR>[Calls]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntCtxSw
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SchedNew
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM7_IRQHandler
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM6_IRQHandler
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_LP_CAN1_RX0_IRQHandler
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBWakeUp_IRQHandler
</UL>

<P><STRONG><a name="[3c9]"></a>OSMboxCreate</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, os_mbox.o(i.OSMboxCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = OSMboxCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventWaitListInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_task
</UL>

<P><STRONG><a name="[3cb]"></a>OSMboxPend</STRONG> (Thumb, 188 bytes, Stack size 32 bytes, os_mbox.o(i.OSMboxPend))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = OSMboxPend &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskWait
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_play_task
</UL>

<P><STRONG><a name="[3cf]"></a>OSMboxPost</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, os_mbox.o(i.OSMboxPost))
<BR><BR>[Stack]<UL><LI>Max Depth = 44 + Unknown Stack Size
<LI>Call Chain = OSMboxPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
</UL>
<BR>[Called By]<UL><LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_play
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_filelist
</UL>

<P><STRONG><a name="[3d1]"></a>OSMutexCreate</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, os_mutex.o(i.OSMutexCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = OSMutexCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventWaitListInit
</UL>
<BR>[Called By]<UL><LI><a href="#[6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_comm_init
</UL>

<P><STRONG><a name="[3d2]"></a>OSMutexDel</STRONG> (Thumb, 232 bytes, Stack size 32 bytes, os_mutex.o(i.OSMutexDel))
<BR><BR>[Stack]<UL><LI>Max Depth = 60 + Unknown Stack Size
<LI>Call Chain = OSMutexDel &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutex_RdyAtPrio
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
</UL>
<BR>[Called By]<UL><LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_comm_destroy
</UL>

<P><STRONG><a name="[2e0]"></a>OSMutexPend</STRONG> (Thumb, 432 bytes, Stack size 48 bytes, os_mutex.o(i.OSMutexPend))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = OSMutexPend &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskWait
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM9000_SendPacket
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM9000_Receive_Packet
</UL>

<P><STRONG><a name="[2e3]"></a>OSMutexPost</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, os_mutex.o(i.OSMutexPost))
<BR><BR>[Stack]<UL><LI>Max Depth = 52 + Unknown Stack Size
<LI>Call Chain = OSMutexPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutex_RdyAtPrio
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
</UL>
<BR>[Called By]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM9000_SendPacket
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM9000_Receive_Packet
</UL>

<P><STRONG><a name="[3d4]"></a>OSQCreate</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, os_q.o(i.OSQCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = OSQCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventWaitListInit
</UL>
<BR>[Called By]<UL><LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_new
</UL>

<P><STRONG><a name="[3d5]"></a>OSQDel</STRONG> (Thumb, 218 bytes, Stack size 32 bytes, os_q.o(i.OSQDel))
<BR><BR>[Stack]<UL><LI>Max Depth = 60 + Unknown Stack Size
<LI>Call Chain = OSQDel &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
</UL>
<BR>[Called By]<UL><LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_free
</UL>

<P><STRONG><a name="[3d6]"></a>OSQPend</STRONG> (Thumb, 208 bytes, Stack size 32 bytes, os_q.o(i.OSQPend))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = OSQPend &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskWait
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[723]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_fetch
</UL>

<P><STRONG><a name="[3d7]"></a>OSQPost</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, os_q.o(i.OSQPost))
<BR><BR>[Stack]<UL><LI>Max Depth = 44 + Unknown Stack Size
<LI>Call Chain = OSQPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
</UL>
<BR>[Called By]<UL><LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_trypost
<LI><a href="#[77f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_post
</UL>

<P><STRONG><a name="[3d8]"></a>OSQQuery</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, os_q.o(i.OSQQuery))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = OSQQuery
</UL>
<BR>[Calls]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
</UL>

<P><STRONG><a name="[3d9]"></a>OSSchedLock</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, os_core.o(i.OSSchedLock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = OSSchedLock
</UL>
<BR>[Calls]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>

<P><STRONG><a name="[3da]"></a>OSSchedUnlock</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, os_core.o(i.OSSchedUnlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>
<BR>[Called By]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>

<P><STRONG><a name="[3db]"></a>OSSemCreate</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, os_sem.o(i.OSSemCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = OSSemCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventWaitListInit
</UL>
<BR>[Called By]<UL><LI><a href="#[6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_comm_init
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_new
</UL>

<P><STRONG><a name="[3dc]"></a>OSSemDel</STRONG> (Thumb, 188 bytes, Stack size 32 bytes, os_sem.o(i.OSSemDel))
<BR><BR>[Stack]<UL><LI>Max Depth = 60 + Unknown Stack Size
<LI>Call Chain = OSSemDel &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
</UL>
<BR>[Called By]<UL><LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_comm_destroy
<LI><a href="#[724]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_free
</UL>

<P><STRONG><a name="[3dd]"></a>OSSemPend</STRONG> (Thumb, 172 bytes, Stack size 32 bytes, os_sem.o(i.OSSemPend))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = OSSemPend &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskWait
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_input
<LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
</UL>

<P><STRONG><a name="[2e6]"></a>OSSemPost</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, os_sem.o(i.OSSemPost))
<BR><BR>[Stack]<UL><LI>Max Depth = 44 + Unknown Stack Size
<LI>Call Chain = OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
</UL>
<BR>[Called By]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA9000_ISRHandler
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
</UL>

<P><STRONG><a name="[3de]"></a>OSSemQuery</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, os_sem.o(i.OSSemQuery))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = OSSemQuery
</UL>
<BR>[Calls]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_valid
</UL>

<P><STRONG><a name="[3df]"></a>OSStart</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, os_core.o(i.OSStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = OSStart
</UL>
<BR>[Calls]<UL><LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStartHighRdy
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SchedNew
</UL>
<BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3e1]"></a>OSStatInit</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, os_core.o(i.OSStatInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = OSStatInit &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_task
</UL>

<P><STRONG><a name="[3f3]"></a>OSTCBInitHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(i.OSTCBInitHook))
<BR><BR>[Called By]<UL><LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
</UL>

<P><STRONG><a name="[3e3]"></a>OSTaskCreate</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, os_task.o(i.OSTaskCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = OSTaskCreate &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStkInit
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_task
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[742]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phone_incall_task_creat
<LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_task_creat
<LI><a href="#[6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_comm_init
<LI><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_comm_dhcp_creat
<LI><a href="#[780]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_thread_new
</UL>

<P><STRONG><a name="[3c4]"></a>OSTaskCreateExt</STRONG> (Thumb, 144 bytes, Stack size 64 bytes, os_task.o(i.OSTaskCreateExt))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = OSTaskCreateExt &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStkInit
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStkClr
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>
<BR>[Called By]<UL><LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[3f4]"></a>OSTaskCreateHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(i.OSTaskCreateHook))
<BR><BR>[Called By]<UL><LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
</UL>

<P><STRONG><a name="[3e7]"></a>OSTaskDel</STRONG> (Thumb, 264 bytes, Stack size 32 bytes, os_task.o(i.OSTaskDel))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = OSTaskDel &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDelHook
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagUnlink
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRemove
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Dummy
</UL>
<BR>[Called By]<UL><LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_task_delete
<LI><a href="#[741]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phone_incall_task_delete
<LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_comm_destroy
<LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_comm_dhcp_delete
</UL>

<P><STRONG><a name="[3ea]"></a>OSTaskDelHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(i.OSTaskDelHook))
<BR><BR>[Called By]<UL><LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
</UL>

<P><STRONG><a name="[3f5]"></a>OSTaskIdleHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(i.OSTaskIdleHook))
<BR><BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskIdle
</UL>

<P><STRONG><a name="[3c5]"></a>OSTaskNameSet</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, os_task.o(i.OSTaskNameSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = OSTaskNameSet
</UL>
<BR>[Calls]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[3eb]"></a>OSTaskResume</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, os_task.o(i.OSTaskResume))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = OSTaskResume &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>
<BR>[Called By]<UL><LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calendar_alarm_msg
<LI><a href="#[76d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sms_get_smsnum
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phone_incall_task
</UL>

<P><STRONG><a name="[3f6]"></a>OSTaskStatHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(i.OSTaskStatHook))
<BR><BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStat
</UL>

<P><STRONG><a name="[3ec]"></a>OSTaskStkChk</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, os_task.o(i.OSTaskStkChk))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = OSTaskStkChk
</UL>
<BR>[Calls]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStatStkChk
</UL>

<P><STRONG><a name="[3e4]"></a>OSTaskStkInit</STRONG> (Thumb, 114 bytes, Stack size 0 bytes, os_cpu_c.o(i.OSTaskStkInit))
<BR><BR>[Called By]<UL><LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
</UL>

<P><STRONG><a name="[3ed]"></a>OSTaskSuspend</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, os_task.o(i.OSTaskSuspend))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = OSTaskSuspend &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>
<BR>[Called By]<UL><LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calendar_alarm_msg
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_task
<LI><a href="#[76d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sms_get_smsnum
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phone_incall_task
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStat
</UL>

<P><STRONG><a name="[93]"></a>OSTaskSwHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(i.OSTaskSwHook))
<BR>[Address Reference Count : 1]<UL><LI> os_cpu_a.o(.text)
</UL>
<P><STRONG><a name="[3e2]"></a>OSTimeDly</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, os_time.o(i.OSTimeDly))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>
<BR>[Called By]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStatInit
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStat
</UL>

<P><STRONG><a name="[3ee]"></a>OSTimeGet</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, os_time.o(i.OSTimeGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = OSTimeGet
</UL>
<BR>[Calls]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
<LI><a href="#[723]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_fetch
</UL>

<P><STRONG><a name="[3ef]"></a>OSTimeTick</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, os_core.o(i.OSTimeTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = OSTimeTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTickHook
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[3f0]"></a>OSTimeTickHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(i.OSTimeTickHook))
<BR><BR>[Called By]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTick
</UL>

<P><STRONG><a name="[3e9]"></a>OS_Dummy</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_core.o(i.OS_Dummy))
<BR><BR>[Called By]<UL><LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
</UL>

<P><STRONG><a name="[3d0]"></a>OS_EventTaskRdy</STRONG> (Thumb, 86 bytes, Stack size 20 bytes, os_core.o(i.OS_EventTaskRdy))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPost
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPost
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemDel
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPost
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQDel
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexDel
</UL>

<P><STRONG><a name="[3ce]"></a>OS_EventTaskRemove</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, os_core.o(i.OS_EventTaskRemove))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OS_EventTaskRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPend
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPend
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
</UL>

<P><STRONG><a name="[3cc]"></a>OS_EventTaskWait</STRONG> (Thumb, 68 bytes, Stack size 12 bytes, os_core.o(i.OS_EventTaskWait))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = OS_EventTaskWait
</UL>
<BR>[Called By]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPend
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPend
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
</UL>

<P><STRONG><a name="[3ca]"></a>OS_EventWaitListInit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, os_core.o(i.OS_EventWaitListInit))
<BR><BR>[Called By]<UL><LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxCreate
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQCreate
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexCreate
</UL>

<P><STRONG><a name="[3c2]"></a>OS_FlagInit</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, os_flag.o(i.OS_FlagInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OS_FlagInit
</UL>
<BR>[Calls]<UL><LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemClr
</UL>
<BR>[Called By]<UL><LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[3e8]"></a>OS_FlagUnlink</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, os_flag.o(i.OS_FlagUnlink))
<BR><BR>[Called By]<UL><LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
</UL>

<P><STRONG><a name="[3f1]"></a>OS_MemClr</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, os_core.o(i.OS_MemClr))
<BR><BR>[Called By]<UL><LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_QInit
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagInit
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTCBList
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitEventList
</UL>

<P><STRONG><a name="[3c3]"></a>OS_QInit</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, os_q.o(i.OS_QInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OS_QInit
</UL>
<BR>[Calls]<UL><LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemClr
</UL>
<BR>[Called By]<UL><LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[3cd]"></a>OS_Sched</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, os_core.o(i.OS_Sched))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCtxSw
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SchedNew
</UL>
<BR>[Called By]<UL><LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPost
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPend
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskResume
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPost
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPend
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemDel
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPost
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQDel
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexDel
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
</UL>

<P><STRONG><a name="[3e5]"></a>OS_TCBInit</STRONG> (Thumb, 220 bytes, Stack size 40 bytes, os_core.o(i.OS_TCBInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateHook
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTCBInitHook
</UL>
<BR>[Called By]<UL><LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
</UL>

<P><STRONG><a name="[1b3]"></a>OS_TaskIdle</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, os_core.o(i.OS_TaskIdle))
<BR><BR>[Calls]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskIdleHook
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_core.o(i.OSInit)
</UL>
<P><STRONG><a name="[1b4]"></a>OS_TaskStat</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, os_core.o(i.OS_TaskStat))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = OS_TaskStat &rArr; OS_TaskStatStkChk &rArr; OSTaskStkChk
</UL>
<BR>[Calls]<UL><LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStatHook
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStatStkChk
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_core.o(i.OSInit)
</UL>
<P><STRONG><a name="[3f7]"></a>OS_TaskStatStkChk</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, os_core.o(i.OS_TaskStatStkChk))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = OS_TaskStatStkChk &rArr; OSTaskStkChk
</UL>
<BR>[Calls]<UL><LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStkChk
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStat
</UL>

<P><STRONG><a name="[3e6]"></a>OS_TaskStkClr</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, os_task.o(i.OS_TaskStkClr))
<BR><BR>[Called By]<UL><LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
</UL>

<P><STRONG><a name="[3f8]"></a>OTT2001A_Init</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, ott2001a.o(i.OTT2001A_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = OTT2001A_Init &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTT2001A_SensorControl
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTT2001A_RD_Reg
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT_IIC_Init
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Init
</UL>

<P><STRONG><a name="[3fa]"></a>OTT2001A_RD_Reg</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, ott2001a.o(i.OTT2001A_RD_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = OTT2001A_RD_Reg &rArr; CT_IIC_Read_Byte &rArr; CT_IIC_NAck &rArr; delay_us &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT_IIC_Wait_Ack
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT_IIC_Stop
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT_IIC_Start
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT_IIC_Send_Byte
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT_IIC_Read_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTT2001A_Scan
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTT2001A_Init
</UL>

<P><STRONG><a name="[1b5]"></a>OTT2001A_Scan</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, ott2001a.o(i.OTT2001A_Scan))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = OTT2001A_Scan &rArr; OTT2001A_RD_Reg &rArr; CT_IIC_Read_Byte &rArr; CT_IIC_NAck &rArr; delay_us &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTT2001A_RD_Reg
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
</UL>
<BR>[Address Reference Count : 1]<UL><LI> touch.o(i.TP_Init)
</UL>
<P><STRONG><a name="[3f9]"></a>OTT2001A_SensorControl</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, ott2001a.o(i.OTT2001A_SensorControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = OTT2001A_SensorControl &rArr; OTT2001A_WR_Reg &rArr; CT_IIC_Wait_Ack &rArr; CT_IIC_Stop &rArr; delay_us &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTT2001A_WR_Reg
</UL>
<BR>[Called By]<UL><LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTT2001A_Init
</UL>

<P><STRONG><a name="[3fc]"></a>OTT2001A_WR_Reg</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, ott2001a.o(i.OTT2001A_WR_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = OTT2001A_WR_Reg &rArr; CT_IIC_Wait_Ack &rArr; CT_IIC_Stop &rArr; delay_us &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT_IIC_Wait_Ack
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT_IIC_Stop
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT_IIC_Start
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT_IIC_Send_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTT2001A_SensorControl
</UL>

<P><STRONG><a name="[3fd]"></a>OV7670_Brightness</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, ov7670.o(i.OV7670_Brightness))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = OV7670_Brightness &rArr; SCCB_WR_Reg &rArr; SCCB_WR_Byte &rArr; delay_us &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_WR_Reg
</UL>
<BR>[Called By]<UL><LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_play
</UL>

<P><STRONG><a name="[3fe]"></a>OV7670_Color_Saturation</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, ov7670.o(i.OV7670_Color_Saturation))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = OV7670_Color_Saturation &rArr; SCCB_WR_Reg &rArr; SCCB_WR_Byte &rArr; delay_us &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_WR_Reg
</UL>
<BR>[Called By]<UL><LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_play
</UL>

<P><STRONG><a name="[3ff]"></a>OV7670_Contrast</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, ov7670.o(i.OV7670_Contrast))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = OV7670_Contrast &rArr; SCCB_WR_Reg &rArr; SCCB_WR_Byte &rArr; delay_us &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_WR_Reg
</UL>
<BR>[Called By]<UL><LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_play
</UL>

<P><STRONG><a name="[400]"></a>OV7670_Init</STRONG> (Thumb, 258 bytes, Stack size 16 bytes, ov7670.o(i.OV7670_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = OV7670_Init &rArr; SCCB_WR_Reg &rArr; SCCB_WR_Byte &rArr; delay_us &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JTAG_Set
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_WR_Reg
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_RD_Reg
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_play
</UL>

<P><STRONG><a name="[402]"></a>OV7670_Light_Mode</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, ov7670.o(i.OV7670_Light_Mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = OV7670_Light_Mode &rArr; SCCB_WR_Reg &rArr; SCCB_WR_Byte &rArr; delay_us &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_WR_Reg
</UL>
<BR>[Called By]<UL><LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_play
</UL>

<P><STRONG><a name="[403]"></a>OV7670_Special_Effects</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, ov7670.o(i.OV7670_Special_Effects))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = OV7670_Special_Effects &rArr; SCCB_WR_Reg &rArr; SCCB_WR_Byte &rArr; delay_us &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_WR_Reg
</UL>
<BR>[Called By]<UL><LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_play
</UL>

<P><STRONG><a name="[404]"></a>OV7670_Window_Set</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, ov7670.o(i.OV7670_Window_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = OV7670_Window_Set &rArr; SCCB_WR_Reg &rArr; SCCB_WR_Byte &rArr; delay_us &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_WR_Reg
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_RD_Reg
</UL>
<BR>[Called By]<UL><LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_play
</UL>

<P><STRONG><a name="[405]"></a>OV7725_Brightness</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, ov7725.o(i.OV7725_Brightness))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = OV7725_Brightness &rArr; SCCB_WR_Reg &rArr; SCCB_WR_Byte &rArr; delay_us &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_WR_Reg
</UL>
<BR>[Called By]<UL><LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_play
</UL>

<P><STRONG><a name="[406]"></a>OV7725_Color_Saturation</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, ov7725.o(i.OV7725_Color_Saturation))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = OV7725_Color_Saturation &rArr; SCCB_WR_Reg &rArr; SCCB_WR_Byte &rArr; delay_us &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_WR_Reg
</UL>
<BR>[Called By]<UL><LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_play
</UL>

<P><STRONG><a name="[407]"></a>OV7725_Init</STRONG> (Thumb, 312 bytes, Stack size 16 bytes, ov7725.o(i.OV7725_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = OV7725_Init &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JTAG_Set
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_WR_Reg
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_RD_Reg
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_Init
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_play
</UL>

<P><STRONG><a name="[408]"></a>OV7725_Light_Mode</STRONG> (Thumb, 152 bytes, Stack size 8 bytes, ov7725.o(i.OV7725_Light_Mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = OV7725_Light_Mode &rArr; SCCB_WR_Reg &rArr; SCCB_WR_Byte &rArr; delay_us &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_WR_Reg
</UL>
<BR>[Called By]<UL><LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_play
</UL>

<P><STRONG><a name="[409]"></a>OV7725_Special_Effects</STRONG> (Thumb, 138 bytes, Stack size 8 bytes, ov7725.o(i.OV7725_Special_Effects))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = OV7725_Special_Effects &rArr; SCCB_WR_Reg &rArr; SCCB_WR_Byte &rArr; delay_us &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_WR_Reg
</UL>
<BR>[Called By]<UL><LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_play
</UL>

<P><STRONG><a name="[40a]"></a>OV7725_Window_Set</STRONG> (Thumb, 326 bytes, Stack size 32 bytes, ov7725.o(i.OV7725_Window_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = OV7725_Window_Set &rArr; SCCB_WR_Reg &rArr; SCCB_WR_Byte &rArr; delay_us &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_WR_Reg
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_RD_Reg
</UL>
<BR>[Called By]<UL><LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_play
</UL>

<P><STRONG><a name="[2cb]"></a>Out0_Process</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, usb_core.o(i.Out0_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Out0_Process &rArr; DataStageOut
</UL>
<BR>[Calls]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Post0_Process
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataStageOut
</UL>
<BR>[Called By]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTR_LP
</UL>

<P><STRONG><a name="[2f7]"></a>PMAToUserBufferCopy</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, usb_mem.o(i.PMAToUserBufferCopy))
<BR><BR>[Called By]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SIL_Read
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataStageOut
</UL>

<P><STRONG><a name="[299]"></a>PPU_ReadFromPort</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, nes_ppu.o(i.PPU_ReadFromPort))
<BR><BR>[Calls]<UL><LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_2007
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPU_R
</UL>

<P><STRONG><a name="[298]"></a>PPU_WriteToPort</STRONG> (Thumb, 200 bytes, Stack size 4 bytes, nes_ppu.o(i.PPU_WriteToPort))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PPU_WriteToPort &rArr; write_2007 &rArr; update_tile
</UL>
<BR>[Calls]<UL><LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_2007
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPU_W
</UL>

<P><STRONG><a name="[40d]"></a>PPU_reset</STRONG> (Thumb, 176 bytes, Stack size 0 bytes, nes_ppu.o(i.PPU_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = PPU_reset &rArr; set_mirroring
</UL>
<BR>[Calls]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_mirroring
</UL>
<BR>[Called By]<UL><LI><a href="#[6fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nes_load
</UL>

<P><STRONG><a name="[40e]"></a>PPU_start_frame</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, nes_ppu.o(i.PPU_start_frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = PPU_start_frame
</UL>
<BR>[Calls]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spr_enabled
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bg_enabled
</UL>
<BR>[Called By]<UL><LI><a href="#[6f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nes_emulate_frame
</UL>

<P><STRONG><a name="[318]"></a>Post0_Process</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, usb_core.o(i.Post0_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Post0_Process
</UL>
<BR>[Calls]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPRxCount
</UL>
<BR>[Called By]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup0_Process
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Out0_Process
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;In0_Process
</UL>

<P><STRONG><a name="[360]"></a>PowerOn</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, usb_pwr.o(i.PowerOn))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = PowerOn &rArr; USB_Cable_Config &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Cable_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MASS_init
</UL>

<P><STRONG><a name="[442]"></a>RTCTime_Handler</STRONG> (Thumb, 80 bytes, Stack size 12 bytes, httpd_cgi_ssi.o(i.RTCTime_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RTCTime_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSIHandler
</UL>

<P><STRONG><a name="[410]"></a>RTC_Alarm_Set</STRONG> (Thumb, 224 bytes, Stack size 36 bytes, rtc.o(i.RTC_Alarm_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = RTC_Alarm_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Is_Leap_Year
</UL>
<BR>[Called By]<UL><LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calendar_alarm_init
</UL>

<P><STRONG><a name="[412]"></a>RTC_Get</STRONG> (Thumb, 204 bytes, Stack size 28 bytes, rtc.o(i.RTC_Get))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RTC_Get &rArr; RTC_Get_Week
</UL>
<BR>[Calls]<UL><LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Get_Week
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Is_Leap_Year
</UL>
<BR>[Called By]<UL><LI><a href="#[6ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysset_play
<LI><a href="#[6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spb_stabar_msg_show
<LI><a href="#[6c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sms_play
<LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calendar_play
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
<LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_init
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Set
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
<LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
<LI><a href="#[72e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;paint_new_pathname
<LI><a href="#[72c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;notepad_new_pathname
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calendar_alarm_init
<LI><a href="#[774]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sms_send_sms
<LI><a href="#[769]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sms_delete_sms
<LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_new_pathname
<LI><a href="#[752]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recorder_new_pathname
</UL>

<P><STRONG><a name="[413]"></a>RTC_Get_Week</STRONG> (Thumb, 76 bytes, Stack size 12 bytes, rtc.o(i.RTC_Get_Week))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RTC_Get_Week
</UL>
<BR>[Called By]<UL><LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Get
</UL>

<P><STRONG><a name="[59]"></a>RTC_IRQHandler</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, rtc.o(i.RTC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = RTC_IRQHandler &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntEnter
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Get
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[414]"></a>RTC_Init</STRONG> (Thumb, 276 bytes, Stack size 40 bytes, rtc.o(i.RTC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = RTC_Init &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Get
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MY_NVIC_Init
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Set
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_init
</UL>

<P><STRONG><a name="[415]"></a>RTC_Set</STRONG> (Thumb, 228 bytes, Stack size 36 bytes, rtc.o(i.RTC_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = RTC_Set &rArr; RTC_Get &rArr; RTC_Get_Week
</UL>
<BR>[Calls]<UL><LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Get
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Is_Leap_Year
</UL>
<BR>[Called By]<UL><LI><a href="#[6ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysset_play
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
</UL>

<P><STRONG><a name="[443]"></a>RTCdate_Handler</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, httpd_cgi_ssi.o(i.RTCdate_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RTCdate_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSIHandler
</UL>

<P><STRONG><a name="[416]"></a>Read_Memory</STRONG> (Thumb, 224 bytes, Stack size 24 bytes, memory.o(i.Read_Memory))
<BR><BR>[Stack]<UL><LI>Max Depth = 148 + Unknown Stack Size
<LI>Call Chain = Read_Memory &rArr; MAL_Read &rArr; SD_ReadDisk &rArr; SD_ReadMultiBlocks &rArr; SD_DMA_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SIL_Write
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPTxStatus
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPTxCount
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAL_Read
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_RW_ON
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_RW_OFF
</UL>
<BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Read10_Cmd
</UL>

<P><STRONG><a name="[41a]"></a>Remote_Init</STRONG> (Thumb, 144 bytes, Stack size 0 bytes, remote.o(i.Remote_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Remote_Init &rArr; MY_NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MY_NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appplay_remote
</UL>

<P><STRONG><a name="[4f6]"></a>Remote_Scan</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, remote.o(i.Remote_Scan))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Remote_Scan
</UL>
<BR>[Called By]<UL><LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appplay_remote
</UL>

<P><STRONG><a name="[41b]"></a>Resume</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, usb_pwr.o(i.Resume))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = Resume &rArr; Resume_Init &rArr; Leave_LowPowerMode &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Resume_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Istr
</UL>

<P><STRONG><a name="[41c]"></a>Resume_Init</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, usb_pwr.o(i.Resume_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = Resume_Init &rArr; Leave_LowPowerMode &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Leave_LowPowerMode
</UL>
<BR>[Called By]<UL><LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Resume
</UL>

<P><STRONG><a name="[401]"></a>SCCB_Init</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, sccb.o(i.SCCB_Init))
<BR><BR>[Called By]<UL><LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV7725_Init
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV7670_Init
</UL>

<P><STRONG><a name="[41d]"></a>SCCB_No_Ack</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, sccb.o(i.SCCB_No_Ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = SCCB_No_Ack &rArr; delay_us &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_RD_Reg
</UL>

<P><STRONG><a name="[41e]"></a>SCCB_RD_Byte</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, sccb.o(i.SCCB_RD_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = SCCB_RD_Byte &rArr; delay_us &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_RD_Reg
</UL>

<P><STRONG><a name="[25]"></a>SCCB_RD_Reg</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, sccb.o(i.SCCB_RD_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = SCCB_RD_Reg &rArr; SCCB_WR_Byte &rArr; delay_us &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_WR_Byte
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_Stop
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_Start
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_RD_Byte
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_No_Ack
</UL>
<BR>[Called By]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV7725_Window_Set
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV7725_Init
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV7670_Window_Set
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV7670_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usmart_config.o(.data)
</UL>
<P><STRONG><a name="[41f]"></a>SCCB_Start</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, sccb.o(i.SCCB_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = SCCB_Start &rArr; delay_us &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_WR_Reg
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_RD_Reg
</UL>

<P><STRONG><a name="[421]"></a>SCCB_Stop</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, sccb.o(i.SCCB_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = SCCB_Stop &rArr; delay_us &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_WR_Reg
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_RD_Reg
</UL>

<P><STRONG><a name="[420]"></a>SCCB_WR_Byte</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, sccb.o(i.SCCB_WR_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = SCCB_WR_Byte &rArr; delay_us &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_WR_Reg
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_RD_Reg
</UL>

<P><STRONG><a name="[24]"></a>SCCB_WR_Reg</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, sccb.o(i.SCCB_WR_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = SCCB_WR_Reg &rArr; SCCB_WR_Byte &rArr; delay_us &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_WR_Byte
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_Stop
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_play
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV7725_Window_Set
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV7725_Special_Effects
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV7725_Light_Mode
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV7725_Init
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV7725_Color_Saturation
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV7725_Brightness
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV7670_Window_Set
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV7670_Special_Effects
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV7670_Light_Mode
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV7670_Init
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV7670_Contrast
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV7670_Color_Saturation
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV7670_Brightness
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usmart_config.o(.data)
</UL>
<P><STRONG><a name="[422]"></a>SCSI_Address_Management</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, usb_scsi.o(i.SCSI_Address_Management))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SCSI_Address_Management &rArr; Set_CSW &rArr; USB_SIL_Write &rArr; UserToPMABufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Scsi_Sense_Data
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bot_Abort
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_CSW
</UL>
<BR>[Called By]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Write10_Cmd
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Read10_Cmd
</UL>

<P><STRONG><a name="[2c6]"></a>SCSI_Format_Cmd</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, usb_scsi.o(i.SCSI_Format_Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SCSI_Format_Cmd &rArr; Set_CSW &rArr; USB_SIL_Write &rArr; UserToPMABufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Scsi_Sense_Data
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bot_Abort
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_CSW
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAL_GetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBW_Decode
</UL>

<P><STRONG><a name="[2bc]"></a>SCSI_Inquiry_Cmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, usb_scsi.o(i.SCSI_Inquiry_Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SCSI_Inquiry_Cmd &rArr; Transfer_Data_Request &rArr; USB_SIL_Write &rArr; UserToPMABufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Transfer_Data_Request
</UL>
<BR>[Called By]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBW_Decode
</UL>

<P><STRONG><a name="[2c7]"></a>SCSI_Invalid_Cmd</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, usb_scsi.o(i.SCSI_Invalid_Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SCSI_Invalid_Cmd &rArr; Set_CSW &rArr; USB_SIL_Write &rArr; UserToPMABufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Scsi_Sense_Data
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bot_Abort
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_CSW
</UL>
<BR>[Called By]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBW_Decode
</UL>

<P><STRONG><a name="[2bf]"></a>SCSI_ModeSense10_Cmd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usb_scsi.o(i.SCSI_ModeSense10_Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SCSI_ModeSense10_Cmd &rArr; Transfer_Data_Request &rArr; USB_SIL_Write &rArr; UserToPMABufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Transfer_Data_Request
</UL>
<BR>[Called By]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBW_Decode
</UL>

<P><STRONG><a name="[2be]"></a>SCSI_ModeSense6_Cmd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usb_scsi.o(i.SCSI_ModeSense6_Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SCSI_ModeSense6_Cmd &rArr; Transfer_Data_Request &rArr; USB_SIL_Write &rArr; UserToPMABufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Transfer_Data_Request
</UL>
<BR>[Called By]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBW_Decode
</UL>

<P><STRONG><a name="[2c3]"></a>SCSI_Read10_Cmd</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, usb_scsi.o(i.SCSI_Read10_Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 172 + Unknown Stack Size
<LI>Call Chain = SCSI_Read10_Cmd &rArr; Read_Memory &rArr; MAL_Read &rArr; SD_ReadDisk &rArr; SD_ReadMultiBlocks &rArr; SD_DMA_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Address_Management
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Scsi_Sense_Data
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bot_Abort
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_CSW
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Memory
</UL>
<BR>[Called By]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mass_Storage_In
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBW_Decode
</UL>

<P><STRONG><a name="[2c1]"></a>SCSI_ReadCapacity10_Cmd</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, usb_scsi.o(i.SCSI_ReadCapacity10_Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SCSI_ReadCapacity10_Cmd &rArr; Transfer_Data_Request &rArr; USB_SIL_Write &rArr; UserToPMABufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Scsi_Sense_Data
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Transfer_Data_Request
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bot_Abort
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_CSW
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAL_GetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBW_Decode
</UL>

<P><STRONG><a name="[2c0]"></a>SCSI_ReadFormatCapacity_Cmd</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, usb_scsi.o(i.SCSI_ReadFormatCapacity_Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SCSI_ReadFormatCapacity_Cmd &rArr; Transfer_Data_Request &rArr; USB_SIL_Write &rArr; UserToPMABufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Scsi_Sense_Data
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Transfer_Data_Request
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bot_Abort
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_CSW
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAL_GetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBW_Decode
</UL>

<P><STRONG><a name="[2bb]"></a>SCSI_RequestSense_Cmd</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, usb_scsi.o(i.SCSI_RequestSense_Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SCSI_RequestSense_Cmd &rArr; Transfer_Data_Request &rArr; USB_SIL_Write &rArr; UserToPMABufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Transfer_Data_Request
</UL>
<BR>[Called By]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBW_Decode
</UL>

<P><STRONG><a name="[2bd]"></a>SCSI_Start_Stop_Unit_Cmd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usb_scsi.o(i.SCSI_Start_Stop_Unit_Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SCSI_Start_Stop_Unit_Cmd &rArr; Set_CSW &rArr; USB_SIL_Write &rArr; UserToPMABufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_CSW
</UL>
<BR>[Called By]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBW_Decode
</UL>

<P><STRONG><a name="[2c2]"></a>SCSI_TestUnitReady_Cmd</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, usb_scsi.o(i.SCSI_TestUnitReady_Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SCSI_TestUnitReady_Cmd &rArr; Set_CSW &rArr; USB_SIL_Write &rArr; UserToPMABufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Scsi_Sense_Data
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bot_Abort
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_CSW
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAL_GetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBW_Decode
</UL>

<P><STRONG><a name="[2c5]"></a>SCSI_Verify10_Cmd</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, usb_scsi.o(i.SCSI_Verify10_Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SCSI_Verify10_Cmd &rArr; Set_CSW &rArr; USB_SIL_Write &rArr; UserToPMABufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Scsi_Sense_Data
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bot_Abort
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_CSW
</UL>
<BR>[Called By]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBW_Decode
</UL>

<P><STRONG><a name="[2c4]"></a>SCSI_Write10_Cmd</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, usb_scsi.o(i.SCSI_Write10_Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = SCSI_Write10_Cmd &rArr; Write_Memory &rArr; MAL_Write &rArr; W25QXX_Write &rArr; W25QXX_Erase_Sector &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPRxStatus
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Address_Management
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Scsi_Sense_Data
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bot_Abort
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_CSW
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Memory
</UL>
<BR>[Called By]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mass_Storage_Out
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBW_Decode
</UL>

<P><STRONG><a name="[426]"></a>SDEnWideBus</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, sdio_sdcard.o(i.SDEnWideBus))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = SDEnWideBus &rArr; FindSCR &rArr; SDIO_Send_Data_Cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_Send_Cmd
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindSCR
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
</UL>
<BR>[Called By]<UL><LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_EnableWideBusOperation
</UL>

<P><STRONG><a name="[430]"></a>SDIO_Clock_Set</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, sdio_sdcard.o(i.SDIO_Clock_Set))
<BR><BR>[Called By]<UL><LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
</UL>

<P><STRONG><a name="[87]"></a>SDIO_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sdio_sdcard.o(i.SDIO_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SDIO_IRQHandler &rArr; SD_ProcessIRQSrc
</UL>
<BR>[Calls]<UL><LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ProcessIRQSrc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[304]"></a>SDIO_Send_Cmd</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, sdio_sdcard.o(i.SDIO_Send_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlock
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendStatus
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SelectDeselect
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultiBlocks
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlock
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ProcessIRQSrc
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitializeCards
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDEnWideBus
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsCardProgramming
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindSCR
</UL>

<P><STRONG><a name="[306]"></a>SDIO_Send_Data_Cfg</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, sdio_sdcard.o(i.SDIO_Send_Data_Cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SDIO_Send_Data_Cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlock
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultiBlocks
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlock
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindSCR
</UL>

<P><STRONG><a name="[43b]"></a>SD_DMA_Config</STRONG> (Thumb, 108 bytes, Stack size 12 bytes, sdio_sdcard.o(i.SD_DMA_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SD_DMA_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlock
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultiBlocks
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlock
</UL>

<P><STRONG><a name="[428]"></a>SD_EnableWideBusOperation</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, sdio_sdcard.o(i.SD_EnableWideBusOperation))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; SDIO_Send_Data_Cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDEnWideBus
</UL>
<BR>[Called By]<UL><LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[42e]"></a>SD_GetCardInfo</STRONG> (Thumb, 526 bytes, Stack size 32 bytes, sdio_sdcard.o(i.SD_GetCardInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SD_GetCardInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[429]"></a>SD_GetState</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, sdio_sdcard.o(i.SD_GetState))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SD_GetState &rArr; SD_SendStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;watch_task
</UL>

<P><STRONG><a name="[42b]"></a>SD_Init</STRONG> (Thumb, 188 bytes, Stack size 8 bytes, sdio_sdcard.o(i.SD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; SDIO_Send_Data_Cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SetDeviceMode
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SelectDeselect
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitializeCards
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_GetCardInfo
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_EnableWideBusOperation
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_Clock_Set
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MY_NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;watch_task
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlock
<LI><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
</UL>

<P><STRONG><a name="[42d]"></a>SD_InitializeCards</STRONG> (Thumb, 186 bytes, Stack size 16 bytes, sdio_sdcard.o(i.SD_InitializeCards))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SD_InitializeCards &rArr; CmdResp6Error
</UL>
<BR>[Calls]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_Send_Cmd
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp6Error
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp2Error
</UL>
<BR>[Called By]<UL><LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[42c]"></a>SD_PowerON</STRONG> (Thumb, 298 bytes, Stack size 36 bytes, sdio_sdcard.o(i.SD_PowerON))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = SD_PowerON &rArr; CmdResp7Error
</UL>
<BR>[Calls]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_Send_Cmd
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_Clock_Set
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp7Error
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp3Error
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdError
</UL>
<BR>[Called By]<UL><LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[427]"></a>SD_ProcessIRQSrc</STRONG> (Thumb, 200 bytes, Stack size 16 bytes, sdio_sdcard.o(i.SD_ProcessIRQSrc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SD_ProcessIRQSrc
</UL>
<BR>[Calls]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_Send_Cmd
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_IRQHandler
</UL>

<P><STRONG><a name="[437]"></a>SD_ReadBlock</STRONG> (Thumb, 400 bytes, Stack size 40 bytes, sdio_sdcard.o(i.SD_ReadBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = SD_ReadBlock &rArr; SD_DMA_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convert_from_bytes_to_power_of_two
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMA_Config
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_Send_Data_Cfg
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_Send_Cmd
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTX_ENABLE
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTX_DISABLE
</UL>
<BR>[Called By]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadDisk
</UL>

<P><STRONG><a name="[335]"></a>SD_ReadDisk</STRONG> (Thumb, 114 bytes, Stack size 40 bytes, sdio_sdcard.o(i.SD_ReadDisk))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = SD_ReadDisk &rArr; SD_ReadMultiBlocks &rArr; SD_DMA_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultiBlocks
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlock
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAL_Read
</UL>

<P><STRONG><a name="[43c]"></a>SD_ReadMultiBlocks</STRONG> (Thumb, 480 bytes, Stack size 64 bytes, sdio_sdcard.o(i.SD_ReadMultiBlocks))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = SD_ReadMultiBlocks &rArr; SD_DMA_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convert_from_bytes_to_power_of_two
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMA_Config
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_Send_Data_Cfg
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_Send_Cmd
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTX_ENABLE
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTX_DISABLE
</UL>
<BR>[Called By]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadDisk
</UL>

<P><STRONG><a name="[42f]"></a>SD_SelectDeselect</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, sdio_sdcard.o(i.SD_SelectDeselect))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SD_SelectDeselect
</UL>
<BR>[Calls]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_Send_Cmd
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
</UL>
<BR>[Called By]<UL><LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[42a]"></a>SD_SendStatus</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, sdio_sdcard.o(i.SD_SendStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SD_SendStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_Send_Cmd
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
</UL>
<BR>[Called By]<UL><LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_GetState
</UL>

<P><STRONG><a name="[431]"></a>SD_SetDeviceMode</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, sdio_sdcard.o(i.SD_SetDeviceMode))
<BR><BR>[Called By]<UL><LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[43d]"></a>SD_WriteBlock</STRONG> (Thumb, 572 bytes, Stack size 48 bytes, sdio_sdcard.o(i.SD_WriteBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = SD_WriteBlock &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; SDIO_Send_Data_Cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convert_from_bytes_to_power_of_two
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMA_Config
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_Send_Data_Cfg
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_Send_Cmd
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsCardProgramming
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTX_ENABLE
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTX_DISABLE
</UL>
<BR>[Called By]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteDisk
</UL>

<P><STRONG><a name="[338]"></a>SD_WriteDisk</STRONG> (Thumb, 108 bytes, Stack size 40 bytes, sdio_sdcard.o(i.SD_WriteDisk))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = SD_WriteDisk &rArr; SD_WriteMultiBlocks &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; SDIO_Send_Data_Cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlock
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAL_Write
</UL>

<P><STRONG><a name="[43e]"></a>SD_WriteMultiBlocks</STRONG> (Thumb, 606 bytes, Stack size 48 bytes, sdio_sdcard.o(i.SD_WriteMultiBlocks))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = SD_WriteMultiBlocks &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; SDIO_Send_Data_Cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convert_from_bytes_to_power_of_two
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMA_Config
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_Send_Data_Cfg
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_Send_Cmd
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsCardProgramming
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTX_ENABLE
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTX_DISABLE
</UL>
<BR>[Called By]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteDisk
</UL>

<P><STRONG><a name="[43f]"></a>SPI1_Init</STRONG> (Thumb, 124 bytes, Stack size 0 bytes, spi.o(i.SPI1_Init))
<BR><BR>[Calls]<UL><LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_ReadWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[6c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wireless_play
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VS_Init
</UL>

<P><STRONG><a name="[440]"></a>SPI1_ReadWriteByte</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, spi.o(i.SPI1_ReadWriteByte))
<BR><BR>[Called By]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VS_Sine_Test
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VS_Ram_Test
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Init
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nes_vs10xx_feeddata
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VS_WR_Cmd
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VS_Soft_Reset
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VS_Send_MusicData
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VS_SPI_ReadWriteByte
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VS_RD_Reg
</UL>

<P><STRONG><a name="[474]"></a>SPI1_SetSpeed</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, spi.o(i.SPI1_SetSpeed))
<BR><BR>[Called By]<UL><LI><a href="#[6c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wireless_play
<LI><a href="#[6be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recorder_play
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VS_SPI_SpeedLow
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VS_SPI_SpeedHigh
</UL>

<P><STRONG><a name="[3ad]"></a>SPI2_Init</STRONG> (Thumb, 124 bytes, Stack size 0 bytes, spi.o(i.SPI2_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI2_Init &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_ReadWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Init
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_Init
</UL>

<P><STRONG><a name="[3b0]"></a>SPI2_ReadWriteByte</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, spi.o(i.SPI2_ReadWriteByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI2_ReadWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_ReadID
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Erase_Chip
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write_Page
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write_Enable
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_ReadSR
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Read
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Erase_Sector
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Init
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_Write_Reg
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_Write_Buf
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_Read_Reg
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_Read_Buf
</UL>

<P><STRONG><a name="[3a9]"></a>SPI2_SetSpeed</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, spi.o(i.SPI2_SetSpeed))
<BR><BR>[Called By]<UL><LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Init
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_TxPacket
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_RxPacket
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_Check
</UL>

<P><STRONG><a name="[358]"></a>SetBTABLE</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usb_regs.o(i.SetBTABLE))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MASS_Reset
</UL>

<P><STRONG><a name="[317]"></a>SetDeviceAddress</STRONG> (Thumb, 58 bytes, Stack size 20 bytes, usb_core.o(i.SetDeviceAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SetDeviceAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;In0_Process
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MASS_Reset
</UL>

<P><STRONG><a name="[35a]"></a>SetEPRxAddr</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, usb_regs.o(i.SetEPRxAddr))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MASS_Reset
</UL>

<P><STRONG><a name="[35b]"></a>SetEPRxCount</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, usb_regs.o(i.SetEPRxCount))
<BR><BR>[Called By]<UL><LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_ClearFeature
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Post0_Process
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MASS_Reset
</UL>

<P><STRONG><a name="[2b7]"></a>SetEPRxStatus</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, usb_regs.o(i.SetEPRxStatus))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MASS_Reset
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Write10_Cmd
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mass_Storage_In
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bot_Abort
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Memory
</UL>

<P><STRONG><a name="[35e]"></a>SetEPRxValid</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, usb_regs.o(i.SetEPRxValid))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MASS_Reset
</UL>

<P><STRONG><a name="[35c]"></a>SetEPTxAddr</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, usb_regs.o(i.SetEPTxAddr))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MASS_Reset
</UL>

<P><STRONG><a name="[2f4]"></a>SetEPTxCount</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, usb_regs.o(i.SetEPTxCount))
<BR><BR>[Called By]<UL><LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SIL_Write
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataStageOut
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataStageIn
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Memory
</UL>

<P><STRONG><a name="[2b6]"></a>SetEPTxStatus</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, usb_regs.o(i.SetEPTxStatus))
<BR><BR>[Called By]<UL><LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_ClearFeature
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MASS_Reset
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Transfer_Data_Request
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bot_Abort
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_CSW
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Memory
</UL>

<P><STRONG><a name="[359]"></a>SetEPType</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, usb_regs.o(i.SetEPType))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MASS_Reset
</UL>

<P><STRONG><a name="[2ba]"></a>Set_CSW</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, usb_bot.o(i.Set_CSW))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Set_CSW &rArr; USB_SIL_Write &rArr; UserToPMABufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SIL_Write
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPTxStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Address_Management
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Write10_Cmd
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Verify10_Cmd
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_TestUnitReady_Cmd
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Start_Stop_Unit_Cmd
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ReadFormatCapacity_Cmd
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ReadCapacity10_Cmd
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Read10_Cmd
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Invalid_Cmd
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Format_Cmd
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mass_Storage_Out
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mass_Storage_In
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBW_Decode
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Memory
</UL>

<P><STRONG><a name="[2b9]"></a>Set_Scsi_Sense_Data</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usb_scsi.o(i.Set_Scsi_Sense_Data))
<BR><BR>[Called By]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Address_Management
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Write10_Cmd
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Verify10_Cmd
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_TestUnitReady_Cmd
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ReadFormatCapacity_Cmd
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ReadCapacity10_Cmd
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Read10_Cmd
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Invalid_Cmd
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Format_Cmd
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mass_Storage_Out
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBW_Decode
</UL>

<P><STRONG><a name="[7a1]"></a>Set_USBClock</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, hw_config.o(i.Set_USBClock))
<BR><BR>[Called By]<UL><LI><a href="#[6bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_play
<LI><a href="#[79e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_usb_update_confirm
</UL>

<P><STRONG><a name="[2ca]"></a>Setup0_Process</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, usb_core.o(i.Setup0_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Setup0_Process &rArr; Data_Setup0 &rArr; DataStageIn &rArr; UserToPMABufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ByteSwap
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Post0_Process
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NoData_Setup0
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_Setup0
</UL>
<BR>[Called By]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTR_LP
</UL>

<P><STRONG><a name="[446]"></a>Show_Font</STRONG> (Thumb, 154 bytes, Stack size 112 bytes, text.o(i.Show_Font))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = Show_Font &rArr; Get_HzMat &rArr; W25QXX_Read &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fast_DrawPoint
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_HzMat
</UL>
<BR>[Called By]<UL><LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_Str
</UL>

<P><STRONG><a name="[447]"></a>Show_Str</STRONG> (Thumb, 174 bytes, Stack size 56 bytes, text.o(i.Show_Str))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = Show_Str &rArr; Show_Font &rArr; Get_HzMat &rArr; W25QXX_Read &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChar
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_Font
</UL>
<BR>[Called By]<UL><LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calendar_play
<LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calendar_date_refresh
</UL>

<P><STRONG><a name="[3b9]"></a>Standard_ClearFeature</STRONG> (Thumb, 232 bytes, Stack size 24 bytes, usb_core.o(i.Standard_ClearFeature))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Standard_ClearFeature
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPTxStatus
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPRxCount
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearDTOG_TX
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearDTOG_RX
</UL>
<BR>[Called By]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NoData_Setup0
</UL>

<P><STRONG><a name="[13a]"></a>Standard_GetConfiguration</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, usb_core.o(i.Standard_GetConfiguration))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Standard_GetConfiguration
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_core.o(i.Data_Setup0)
</UL>
<P><STRONG><a name="[355]"></a>Standard_GetDescriptorData</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, usb_core.o(i.Standard_GetDescriptorData))
<BR><BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MASS_GetStringDescriptor
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MASS_GetDeviceDescriptor
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MASS_GetConfigDescriptor
</UL>

<P><STRONG><a name="[13b]"></a>Standard_GetInterface</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, usb_core.o(i.Standard_GetInterface))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Standard_GetInterface
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_core.o(i.Data_Setup0)
</UL>
<P><STRONG><a name="[139]"></a>Standard_GetStatus</STRONG> (Thumb, 130 bytes, Stack size 8 bytes, usb_core.o(i.Standard_GetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Standard_GetStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_core.o(i.Data_Setup0)
</UL>
<P><STRONG><a name="[3b6]"></a>Standard_SetConfiguration</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, usb_core.o(i.Standard_SetConfiguration))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Standard_SetConfiguration
</UL>
<BR>[Called By]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NoData_Setup0
</UL>

<P><STRONG><a name="[3b7]"></a>Standard_SetDeviceFeature</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, usb_core.o(i.Standard_SetDeviceFeature))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Standard_SetDeviceFeature
</UL>
<BR>[Called By]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NoData_Setup0
</UL>

<P><STRONG><a name="[3ba]"></a>Standard_SetEndPointFeature</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, usb_core.o(i.Standard_SetEndPointFeature))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Standard_SetEndPointFeature
</UL>
<BR>[Called By]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NoData_Setup0
</UL>

<P><STRONG><a name="[3b8]"></a>Standard_SetInterface</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, usb_core.o(i.Standard_SetInterface))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Standard_SetInterface
</UL>
<BR>[Called By]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NoData_Setup0
</UL>

<P><STRONG><a name="[448]"></a>Stm32_Clock_Init</STRONG> (Thumb, 98 bytes, Stack size 12 bytes, sys.o(i.Stm32_Clock_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Stm32_Clock_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MYRCC_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_init
</UL>

<P><STRONG><a name="[449]"></a>Suspend</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, usb_pwr.o(i.Suspend))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = Suspend &rArr; Enter_LowPowerMode &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enter_LowPowerMode
</UL>
<BR>[Called By]<UL><LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Istr
</UL>

<P><STRONG><a name="[55]"></a>SysTick_Handler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, delay.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = SysTick_Handler &rArr; OSTimeTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTick
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntEnter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[608]"></a>Sys_Soft_Reset</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys.o(i.Sys_Soft_Reset))
<BR><BR>[Called By]<UL><LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exe_play
</UL>

<P><STRONG><a name="[72]"></a>TIM2_IRQHandler</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, usmart.o(i.TIM2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = TIM2_IRQHandler &rArr; OSIntExit
</UL>
<BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntEnter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[73]"></a>TIM3_IRQHandler</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, timer.o(i.TIM3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = TIM3_IRQHandler &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntEnter
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[44a]"></a>TIM3_Int_Init</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, timer.o(i.TIM3_Int_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM3_Int_Init &rArr; MY_NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MY_NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_play
<LI><a href="#[6f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nes_emulate_frame
</UL>

<P><STRONG><a name="[74]"></a>TIM4_IRQHandler</STRONG> (Thumb, 216 bytes, Stack size 16 bytes, remote.o(i.TIM4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM4_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[452]"></a>TIM5_CH2_Cap_Init</STRONG> (Thumb, 94 bytes, Stack size 0 bytes, tpad.o(i.TIM5_CH2_Cap_Init))
<BR><BR>[Called By]<UL><LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPAD_Init
</UL>

<P><STRONG><a name="[88]"></a>TIM5_IRQHandler</STRONG> (Thumb, 108 bytes, Stack size 12 bytes, timer.o(i.TIM5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM5_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[8c]"></a>TIM6_IRQHandler</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, timer.o(i.TIM6_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = TIM6_IRQHandler &rArr; nes_vs10xx_feeddata
</UL>
<BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntEnter
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nes_vs10xx_feeddata
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[44c]"></a>TIM6_Int_Init</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, timer.o(i.TIM6_Int_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM6_Int_Init &rArr; MY_NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MY_NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[703]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nes_sound_open
</UL>

<P><STRONG><a name="[8d]"></a>TIM7_IRQHandler</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, timer.o(i.TIM7_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = TIM7_IRQHandler &rArr; OSIntExit
</UL>
<BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntEnter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[44d]"></a>TIM7_Int_Init</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, timer.o(i.TIM7_Int_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM7_Int_Init &rArr; MY_NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MY_NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart3_init
</UL>

<P><STRONG><a name="[44e]"></a>TPAD_Get_MaxVal</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, tpad.o(i.TPAD_Get_MaxVal))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = TPAD_Get_MaxVal &rArr; TPAD_Get_Val &rArr; TPAD_Reset &rArr; delay_ms &rArr; delay_us &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPAD_Get_Val
</UL>
<BR>[Called By]<UL><LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPAD_Scan
</UL>

<P><STRONG><a name="[44f]"></a>TPAD_Get_Val</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, tpad.o(i.TPAD_Get_Val))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = TPAD_Get_Val &rArr; TPAD_Reset &rArr; delay_ms &rArr; delay_us &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPAD_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPAD_Init
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPAD_Get_MaxVal
</UL>

<P><STRONG><a name="[451]"></a>TPAD_Init</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, tpad.o(i.TPAD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = TPAD_Init &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPAD_Get_Val
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_CH2_Cap_Init
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[6bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nes_play
<LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_init
<LI><a href="#[6fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nes_load
</UL>

<P><STRONG><a name="[450]"></a>TPAD_Reset</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, tpad.o(i.TPAD_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = TPAD_Reset &rArr; delay_ms &rArr; delay_us &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPAD_Get_Val
</UL>

<P><STRONG><a name="[453]"></a>TPAD_Scan</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, tpad.o(i.TPAD_Scan))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = TPAD_Scan &rArr; TPAD_Get_MaxVal &rArr; TPAD_Get_Val &rArr; TPAD_Reset &rArr; delay_ms &rArr; delay_us &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPAD_Get_MaxVal
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;watch_task
<LI><a href="#[6f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nes_emulate_frame
</UL>

<P><STRONG><a name="[454]"></a>TP_Adj_Info_Show</STRONG> (Thumb, 326 bytes, Stack size 64 bytes, touch.o(i.TP_Adj_Info_Show))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = TP_Adj_Info_Show &rArr; LCD_ShowNum &rArr; LCD_ShowChar &rArr; LCD_Fast_DrawPoint
</UL>
<BR>[Calls]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowString
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowNum
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Adjust
</UL>

<P><STRONG><a name="[7]"></a>TP_Adjust</STRONG> (Thumb, 1338 bytes, Stack size 72 bytes, touch.o(i.TP_Adjust))
<BR><BR>[Stack]<UL><LI>Max Depth = 268 + Unknown Stack Size
<LI>Call Chain = TP_Adjust &rArr; TP_Adj_Info_Show &rArr; LCD_ShowNum &rArr; LCD_ShowChar &rArr; LCD_Fast_DrawPoint
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowString
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Save_Adjdata
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Get_Adjdata
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Drow_Touch_Point
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Adj_Info_Show
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[6ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysset_play
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Init
<LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> touch.o(.data)
</UL>
<P><STRONG><a name="[455]"></a>TP_Drow_Touch_Point</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, touch.o(i.TP_Drow_Touch_Point))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = TP_Drow_Touch_Point &rArr; LCD_DrawLine &rArr; LCD_DrawPoint &rArr; LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Draw_Circle
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawPoint
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawLine
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Adjust
</UL>

<P><STRONG><a name="[456]"></a>TP_Get_Adjdata</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, touch.o(i.TP_Get_Adjdata))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = TP_Get_Adjdata &rArr; AT24CXX_Read &rArr; AT24CXX_ReadOneByte &rArr; IIC_Read_Byte &rArr; IIC_NAck &rArr; delay_us &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_ReadOneByte
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Init
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Adjust
</UL>

<P><STRONG><a name="[5]"></a>TP_Init</STRONG> (Thumb, 220 bytes, Stack size 16 bytes, touch.o(i.TP_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 284 + Unknown Stack Size
<LI>Call Chain = TP_Init &rArr; TP_Adjust &rArr; TP_Adj_Info_Show &rArr; LCD_ShowNum &rArr; LCD_ShowChar &rArr; LCD_Fast_DrawPoint
</UL>
<BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Adjust
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Init
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Read_XY
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Get_Adjdata
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTT2001A_Init
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT9147_Init
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT5206_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> touch.o(.data)
</UL>
<P><STRONG><a name="[45c]"></a>TP_Read_AD</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, touch.o(i.TP_Read_AD))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = TP_Read_AD &rArr; TP_Write_Byte &rArr; delay_us &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Write_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Read_XOY
</UL>

<P><STRONG><a name="[45e]"></a>TP_Read_XOY</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, touch.o(i.TP_Read_XOY))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = TP_Read_XOY &rArr; TP_Read_AD &rArr; TP_Write_Byte &rArr; delay_us &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Read_AD
</UL>
<BR>[Called By]<UL><LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Read_XY
</UL>

<P><STRONG><a name="[45b]"></a>TP_Read_XY</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, touch.o(i.TP_Read_XY))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = TP_Read_XY &rArr; TP_Read_XOY &rArr; TP_Read_AD &rArr; TP_Write_Byte &rArr; delay_us &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Read_XOY
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Init
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Read_XY2
</UL>

<P><STRONG><a name="[45f]"></a>TP_Read_XY2</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, touch.o(i.TP_Read_XY2))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = TP_Read_XY2 &rArr; TP_Read_XY &rArr; TP_Read_XOY &rArr; TP_Read_AD &rArr; TP_Write_Byte &rArr; delay_us &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Read_XY
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Scan
</UL>

<P><STRONG><a name="[45a]"></a>TP_Save_Adjdata</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, touch.o(i.TP_Save_Adjdata))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = TP_Save_Adjdata &rArr; AT24CXX_Write &rArr; AT24CXX_WriteOneByte &rArr; IIC_Wait_Ack &rArr; IIC_Stop &rArr; delay_us &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_WriteOneByte
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Adjust
</UL>

<P><STRONG><a name="[6]"></a>TP_Scan</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, touch.o(i.TP_Scan))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = TP_Scan &rArr; TP_Read_XY2 &rArr; TP_Read_XY &rArr; TP_Read_XOY &rArr; TP_Read_AD &rArr; TP_Write_Byte &rArr; delay_us &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Read_XY2
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> touch.o(.data)
</UL>
<P><STRONG><a name="[45d]"></a>TP_Write_Byte</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, touch.o(i.TP_Write_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = TP_Write_Byte &rArr; delay_us &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Read_AD
</UL>

<P><STRONG><a name="[441]"></a>Temperate_Handler</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, httpd_cgi_ssi.o(i.Temperate_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = Temperate_Handler &rArr; Get_Temprate &rArr; Get_Adc_Average &rArr; delay_ms &rArr; delay_us &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Temprate
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSIHandler
</UL>

<P><STRONG><a name="[461]"></a>Timer2_Init</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, usmart.o(i.Timer2_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Timer2_Init &rArr; MY_NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MY_NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_init
</UL>

<P><STRONG><a name="[424]"></a>Transfer_Data_Request</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, usb_bot.o(i.Transfer_Data_Request))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Transfer_Data_Request &rArr; USB_SIL_Write &rArr; UserToPMABufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SIL_Write
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPTxStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_RequestSense_Cmd
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ReadFormatCapacity_Cmd
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ReadCapacity10_Cmd
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ModeSense6_Cmd
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ModeSense10_Cmd
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Inquiry_Cmd
</UL>

<P><STRONG><a name="[7b]"></a>USART1_IRQHandler</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, usart.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = USART1_IRQHandler &rArr; OSIntExit
</UL>
<BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntEnter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[7d]"></a>USART3_IRQHandler</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, usart3.o(i.USART3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = USART3_IRQHandler &rArr; OSIntExit
</UL>
<BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntEnter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[80]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, hw_config.o(i.USBWakeUp_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = USBWakeUp_IRQHandler &rArr; OSIntExit
</UL>
<BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntEnter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[40f]"></a>USB_Cable_Config</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hw_config.o(i.USB_Cable_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = USB_Cable_Config &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerOn
</UL>

<P><STRONG><a name="[7a2]"></a>USB_Init</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, usb_init.o(i.USB_Init))
<BR><BR>[Called By]<UL><LI><a href="#[6bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_play
<LI><a href="#[79e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_usb_update_confirm
</UL>

<P><STRONG><a name="[462]"></a>USB_Interrupts_Config</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, hw_config.o(i.USB_Interrupts_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = USB_Interrupts_Config &rArr; MY_NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MY_NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[6bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_play
<LI><a href="#[79e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_usb_update_confirm
</UL>

<P><STRONG><a name="[463]"></a>USB_Istr</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, usb_istr.o(i.USB_Istr))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = USB_Istr &rArr; Resume &rArr; Resume_Init &rArr; Leave_LowPowerMode &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTR_LP
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Suspend
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Resume
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_LP_CAN1_RX0_IRQHandler
</UL>

<P><STRONG><a name="[6a]"></a>USB_LP_CAN1_RX0_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, hw_config.o(i.USB_LP_CAN1_RX0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = USB_LP_CAN1_RX0_IRQHandler &rArr; USB_Istr &rArr; Resume &rArr; Resume_Init &rArr; Leave_LowPowerMode &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntEnter
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Istr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[35f]"></a>USB_NotConfigured_LED</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hw_config.o(i.USB_NotConfigured_LED))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = USB_NotConfigured_LED &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MASS_Reset
</UL>

<P><STRONG><a name="[7a0]"></a>USB_Port_Set</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, hw_config.o(i.USB_Port_Set))
<BR><BR>[Called By]<UL><LI><a href="#[6bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_play
<LI><a href="#[79e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_usb_update_confirm
</UL>

<P><STRONG><a name="[361]"></a>USB_SIL_Init</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, usb_sil.o(i.USB_SIL_Init))
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MASS_init
</UL>

<P><STRONG><a name="[3a7]"></a>USB_SIL_Read</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, usb_sil.o(i.USB_SIL_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USB_SIL_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetEPRxCount
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMAToUserBufferCopy
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetEPRxAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mass_Storage_Out
</UL>

<P><STRONG><a name="[417]"></a>USB_SIL_Write</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, usb_sil.o(i.USB_SIL_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USB_SIL_Write &rArr; UserToPMABufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserToPMABufferCopy
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPTxCount
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetEPTxAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Transfer_Data_Request
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_CSW
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Memory
</UL>

<P><STRONG><a name="[2f3]"></a>UserToPMABufferCopy</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, usb_mem.o(i.UserToPMABufferCopy))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UserToPMABufferCopy
</UL>
<BR>[Called By]<UL><LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SIL_Write
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataStageIn
</UL>

<P><STRONG><a name="[465]"></a>VS_Get_DecodeTime</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, vs10xx.o(i.VS_Get_DecodeTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = VS_Get_DecodeTime &rArr; VS_RD_Reg
</UL>
<BR>[Calls]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VS_RD_Reg
</UL>
<BR>[Called By]<UL><LI><a href="#[6d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp3_get_info
</UL>

<P><STRONG><a name="[466]"></a>VS_Get_EndFillByte</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, vs10xx.o(i.VS_Get_EndFillByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = VS_Get_EndFillByte &rArr; VS_WRAM_Read &rArr; VS_WR_Cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VS_WRAM_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VS_Restart_Play
</UL>

<P><STRONG><a name="[467]"></a>VS_Get_HeadInfo</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, vs10xx.o(i.VS_Get_HeadInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = VS_Get_HeadInfo &rArr; VS_RD_Reg
</UL>
<BR>[Calls]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VS_RD_Reg
</UL>
<BR>[Called By]<UL><LI><a href="#[6d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp3_get_info
</UL>

<P><STRONG><a name="[468]"></a>VS_HD_Reset</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, vs10xx.o(i.VS_HD_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = VS_HD_Reset &rArr; delay_ms &rArr; delay_us &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tomcat_play
<LI><a href="#[6be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recorder_play
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VS_Sine_Test
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VS_Ram_Test
<LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_init
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VS_Restart_Play
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_play_task
<LI><a href="#[7de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tomcat_play_wav
<LI><a href="#[703]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nes_sound_open
</UL>

<P><STRONG><a name="[469]"></a>VS_Init</STRONG> (Thumb, 116 bytes, Stack size 0 bytes, vs10xx.o(i.VS_Init))
<BR><BR>[Calls]<UL><LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_init
</UL>

<P><STRONG><a name="[46a]"></a>VS_Load_Patch</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, vs10xx.o(i.VS_Load_Patch))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = VS_Load_Patch &rArr; VS_WR_Cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VS_WR_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp3_play_song
<LI><a href="#[74f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recorder_enter_rec_mode
</UL>

<P><STRONG><a name="[d]"></a>VS_RD_Reg</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, vs10xx.o(i.VS_RD_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = VS_RD_Reg
</UL>
<BR>[Calls]<UL><LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_ReadWriteByte
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VS_SPI_SpeedLow
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VS_SPI_SpeedHigh
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VS_SPI_ReadWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tomcat_play
<LI><a href="#[6be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recorder_play
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VS_Ram_Test
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VS_WRAM_Read
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VS_Soft_Reset
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VS_Set_Effect
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VS_Restart_Play
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VS_Get_HeadInfo
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VS_Get_DecodeTime
<LI><a href="#[7dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tomcat_rec_mode
<LI><a href="#[6d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp3_get_info
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usmart_config.o(.data)
</UL>
<P><STRONG><a name="[46f]"></a>VS_Ram_Test</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, vs10xx.o(i.VS_Ram_Test))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = VS_Ram_Test &rArr; VS_HD_Reset &rArr; delay_ms &rArr; delay_us &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VS_HD_Reset
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_ReadWriteByte
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VS_WR_Cmd
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VS_SPI_SpeedLow
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VS_RD_Reg
</UL>
<BR>[Called By]<UL><LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_init
</UL>

<P><STRONG><a name="[470]"></a>VS_Reset_DecodeTime</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, vs10xx.o(i.VS_Reset_DecodeTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = VS_Reset_DecodeTime &rArr; VS_WR_Cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VS_WR_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp3_play_song
<LI><a href="#[703]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nes_sound_open
</UL>

<P><STRONG><a name="[471]"></a>VS_Restart_Play</STRONG> (Thumb, 154 bytes, Stack size 48 bytes, vs10xx.o(i.VS_Restart_Play))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = VS_Restart_Play &rArr; VS_Soft_Reset &rArr; delay_ms &rArr; delay_us &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VS_HD_Reset
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VS_WR_Cmd
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VS_Soft_Reset
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VS_Send_MusicData
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VS_RD_Reg
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VS_Get_EndFillByte
</UL>
<BR>[Called By]<UL><LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp3_play_song
</UL>

<P><STRONG><a name="[46d]"></a>VS_SPI_ReadWriteByte</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, vs10xx.o(i.VS_SPI_ReadWriteByte))
<BR><BR>[Calls]<UL><LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_ReadWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VS_RD_Reg
<LI><a href="#[757]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recorder_read_data
</UL>

<P><STRONG><a name="[46e]"></a>VS_SPI_SpeedHigh</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, vs10xx.o(i.VS_SPI_SpeedHigh))
<BR><BR>[Calls]<UL><LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_SetSpeed
</UL>
<BR>[Called By]<UL><LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VS_WR_Cmd
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VS_RD_Reg
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp3_play_song
</UL>

<P><STRONG><a name="[46c]"></a>VS_SPI_SpeedLow</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, vs10xx.o(i.VS_SPI_SpeedLow))
<BR><BR>[Calls]<UL><LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_SetSpeed
</UL>
<BR>[Called By]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VS_Sine_Test
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VS_Ram_Test
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VS_WR_Cmd
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VS_RD_Reg
</UL>

<P><STRONG><a name="[10]"></a>VS_SPK_Set</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, vs10xx.o(i.VS_SPK_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = VS_SPK_Set &rArr; VS_WRAM_Write &rArr; VS_WR_Cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VS_WRAM_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[6ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysset_play
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VS_Set_All
<LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_task_delete
<LI><a href="#[7de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tomcat_play_wav
<LI><a href="#[704]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nes_sound_close
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usmart_config.o(.data)
</UL>
<P><STRONG><a name="[472]"></a>VS_Send_MusicData</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, vs10xx.o(i.VS_Send_MusicData))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = VS_Send_MusicData
</UL>
<BR>[Calls]<UL><LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_ReadWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VS_Restart_Play
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp3_play_song
<LI><a href="#[7de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tomcat_play_wav
<LI><a href="#[703]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nes_sound_open
</UL>

<P><STRONG><a name="[475]"></a>VS_Set_All</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, vs10xx.o(i.VS_Set_All))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = VS_Set_All &rArr; VS_SPK_Set &rArr; VS_WRAM_Write &rArr; VS_WR_Cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VS_Set_Vol
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VS_Set_Effect
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VS_Set_Bass
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VS_SPK_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[6ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysset_play
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp3_play_song
<LI><a href="#[703]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nes_sound_open
</UL>

<P><STRONG><a name="[477]"></a>VS_Set_Bass</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, vs10xx.o(i.VS_Set_Bass))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = VS_Set_Bass &rArr; VS_WR_Cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VS_WR_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VS_Set_All
<LI><a href="#[787]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysset_vs1053_eq_set
</UL>

<P><STRONG><a name="[478]"></a>VS_Set_Effect</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, vs10xx.o(i.VS_Set_Effect))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = VS_Set_Effect &rArr; VS_WR_Cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VS_WR_Cmd
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VS_RD_Reg
</UL>
<BR>[Called By]<UL><LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VS_Set_All
<LI><a href="#[786]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysset_vs1053_vol3d_set
</UL>

<P><STRONG><a name="[476]"></a>VS_Set_Vol</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, vs10xx.o(i.VS_Set_Vol))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = VS_Set_Vol &rArr; VS_WR_Cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VS_WR_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_play
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VS_Set_All
<LI><a href="#[786]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysset_vs1053_vol3d_set
<LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_task_delete
<LI><a href="#[7de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tomcat_play_wav
<LI><a href="#[704]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nes_sound_close
</UL>

<P><STRONG><a name="[479]"></a>VS_Sine_Test</STRONG> (Thumb, 286 bytes, Stack size 16 bytes, vs10xx.o(i.VS_Sine_Test))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = VS_Sine_Test &rArr; VS_HD_Reset &rArr; delay_ms &rArr; delay_us &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VS_HD_Reset
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_ReadWriteByte
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VS_WR_Cmd
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VS_SPI_SpeedLow
</UL>
<BR>[Called By]<UL><LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_init
</UL>

<P><STRONG><a name="[473]"></a>VS_Soft_Reset</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, vs10xx.o(i.VS_Soft_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = VS_Soft_Reset &rArr; delay_ms &rArr; delay_us &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_ReadWriteByte
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VS_WR_Cmd
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VS_RD_Reg
</UL>
<BR>[Called By]<UL><LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VS_Restart_Play
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_play_task
<LI><a href="#[7de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tomcat_play_wav
<LI><a href="#[703]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nes_sound_open
</UL>

<P><STRONG><a name="[f]"></a>VS_WRAM_Read</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, vs10xx.o(i.VS_WRAM_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = VS_WRAM_Read &rArr; VS_WR_Cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VS_WR_Cmd
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VS_RD_Reg
</UL>
<BR>[Called By]<UL><LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VS_Get_EndFillByte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usmart_config.o(.data)
</UL>
<P><STRONG><a name="[e]"></a>VS_WRAM_Write</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, vs10xx.o(i.VS_WRAM_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = VS_WRAM_Write &rArr; VS_WR_Cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VS_WR_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VS_SPK_Set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usmart_config.o(.data)
</UL>
<P><STRONG><a name="[46b]"></a>VS_WR_Cmd</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, vs10xx.o(i.VS_WR_Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = VS_WR_Cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_ReadWriteByte
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VS_SPI_SpeedLow
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VS_SPI_SpeedHigh
</UL>
<BR>[Called By]<UL><LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tomcat_play
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VS_Sine_Test
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VS_Ram_Test
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VS_WRAM_Write
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VS_WRAM_Read
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VS_Soft_Reset
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VS_Set_Vol
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VS_Set_Effect
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VS_Set_Bass
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VS_Restart_Play
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VS_Reset_DecodeTime
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VS_Load_Patch
<LI><a href="#[7d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tomcat_agcspd_set
<LI><a href="#[74f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recorder_enter_rec_mode
<LI><a href="#[74c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recoder_set_agc
</UL>

<P><STRONG><a name="[c]"></a>W25QXX_Erase_Chip</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, w25qxx.o(i.W25QXX_Erase_Chip))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = W25QXX_Erase_Chip &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write_Enable
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Wait_Busy
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_ReadWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[79e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_usb_update_confirm
<LI><a href="#[794]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_files_erase
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usmart_config.o(.data)
</UL>
<P><STRONG><a name="[47c]"></a>W25QXX_Erase_Sector</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, w25qxx.o(i.W25QXX_Erase_Sector))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = W25QXX_Erase_Sector &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write_Enable
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Wait_Busy
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_ReadWriteByte
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[79d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_font
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write
</UL>

<P><STRONG><a name="[47d]"></a>W25QXX_Init</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, w25qxx.o(i.W25QXX_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = W25QXX_Init &rArr; W25QXX_ReadID &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_ReadID
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_SetSpeed
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[63a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;font_init
<LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_init
<LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
</UL>

<P><STRONG><a name="[30d]"></a>W25QXX_Read</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, w25qxx.o(i.W25QXX_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = W25QXX_Read &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_ReadWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[79d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_font
<LI><a href="#[63a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;font_init
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_convert
<LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_HzMat
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAL_Read
</UL>

<P><STRONG><a name="[47e]"></a>W25QXX_ReadID</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, w25qxx.o(i.W25QXX_ReadID))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = W25QXX_ReadID &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_ReadWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Init
<LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_init
</UL>

<P><STRONG><a name="[47f]"></a>W25QXX_ReadSR</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, w25qxx.o(i.W25QXX_ReadSR))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = W25QXX_ReadSR &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_ReadWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Wait_Busy
</UL>

<P><STRONG><a name="[47b]"></a>W25QXX_Wait_Busy</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, w25qxx.o(i.W25QXX_Wait_Busy))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = W25QXX_Wait_Busy &rArr; W25QXX_ReadSR &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_ReadSR
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Erase_Chip
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write_Page
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Erase_Sector
</UL>

<P><STRONG><a name="[337]"></a>W25QXX_Write</STRONG> (Thumb, 182 bytes, Stack size 40 bytes, w25qxx.o(i.W25QXX_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = W25QXX_Write &rArr; W25QXX_Erase_Sector &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mymalloc
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myfree
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write_NoCheck
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Read
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Erase_Sector
</UL>
<BR>[Called By]<UL><LI><a href="#[79d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_font
<LI><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[7df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updata_fontx
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAL_Write
</UL>

<P><STRONG><a name="[47a]"></a>W25QXX_Write_Enable</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, w25qxx.o(i.W25QXX_Write_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = W25QXX_Write_Enable &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_ReadWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Erase_Chip
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write_Page
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Erase_Sector
</UL>

<P><STRONG><a name="[481]"></a>W25QXX_Write_NoCheck</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, w25qxx.o(i.W25QXX_Write_NoCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = W25QXX_Write_NoCheck &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write_Page
</UL>
<BR>[Called By]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write
</UL>

<P><STRONG><a name="[483]"></a>W25QXX_Write_Page</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, w25qxx.o(i.W25QXX_Write_Page))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write_Enable
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Wait_Busy
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_ReadWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write_NoCheck
</UL>

<P><STRONG><a name="[425]"></a>Write_Memory</STRONG> (Thumb, 258 bytes, Stack size 48 bytes, memory.o(i.Write_Memory))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = Write_Memory &rArr; MAL_Write &rArr; W25QXX_Write &rArr; W25QXX_Erase_Sector &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPRxStatus
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_CSW
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAL_Write
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_RW_ON
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_RW_OFF
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Write10_Cmd
</UL>

<P><STRONG><a name="[278]"></a>__ARM_fpclassify</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_tan
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
</UL>

<P><STRONG><a name="[747]"></a>__ARM_fpclassifyf</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, fpclassifyf.o(i.__ARM_fpclassifyf))
<BR><BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powf
</UL>

<P><STRONG><a name="[484]"></a>__ieee754_rem_pio2</STRONG> (Thumb, 828 bytes, Stack size 128 bytes, rred.o(i.__ieee754_rem_pio2))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tan
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
</UL>

<P><STRONG><a name="[486]"></a>__kernel_cos</STRONG> (Thumb, 230 bytes, Stack size 48 bytes, cos_i.o(i.__kernel_cos))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = __kernel_cos &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
</UL>
<BR>[Called By]<UL><LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
</UL>

<P><STRONG><a name="[487]"></a>__kernel_poly</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, poly.o(i.__kernel_poly))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_tan
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
</UL>

<P><STRONG><a name="[488]"></a>__kernel_sin</STRONG> (Thumb, 224 bytes, Stack size 64 bytes, sin_i.o(i.__kernel_sin))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = __kernel_sin &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
</UL>
<BR>[Called By]<UL><LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
</UL>

<P><STRONG><a name="[48a]"></a>__kernel_tan</STRONG> (Thumb, 586 bytes, Stack size 80 bytes, tan_i.o(i.__kernel_tan))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = __kernel_tan &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
</UL>
<BR>[Called By]<UL><LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tan
</UL>

<P><STRONG><a name="[48b]"></a>__mathlib_dbl_divzero</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_divzero))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __mathlib_dbl_divzero &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log10
<LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
</UL>

<P><STRONG><a name="[48c]"></a>__mathlib_dbl_infnan</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_infnan))
<BR><BR>[Calls]<UL><LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tan
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log10
<LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
</UL>

<P><STRONG><a name="[48d]"></a>__mathlib_dbl_infnan2</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_infnan2))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __mathlib_dbl_infnan2 &rArr; __aeabi_dadd
</UL>
<BR>[Calls]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2
</UL>

<P><STRONG><a name="[48e]"></a>__mathlib_dbl_invalid</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_invalid))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __mathlib_dbl_invalid &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tan
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log10
<LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
</UL>

<P><STRONG><a name="[48f]"></a>__mathlib_dbl_overflow</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_overflow))
<BR><BR>[Calls]<UL><LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ldexp
</UL>

<P><STRONG><a name="[489]"></a>__mathlib_dbl_underflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_underflow))
<BR><BR>[Calls]<UL><LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ldexp
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_tan
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
</UL>

<P><STRONG><a name="[490]"></a>__mathlib_flt_divzero</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_divzero))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __mathlib_flt_divzero &rArr; __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powf
</UL>

<P><STRONG><a name="[491]"></a>__mathlib_flt_infnan2</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_infnan2))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __mathlib_flt_infnan2 &rArr; __aeabi_fadd
</UL>
<BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powf
</UL>

<P><STRONG><a name="[492]"></a>__mathlib_flt_invalid</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_invalid))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __mathlib_flt_invalid &rArr; __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powf
</UL>

<P><STRONG><a name="[493]"></a>__mathlib_flt_overflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_overflow))
<BR><BR>[Calls]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
</UL>
<BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powf
</UL>

<P><STRONG><a name="[494]"></a>__mathlib_flt_underflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_underflow))
<BR><BR>[Calls]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
</UL>
<BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powf
</UL>

<P><STRONG><a name="[28d]"></a>__mathlib_narrow</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, narrow.o(i.__mathlib_narrow))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __mathlib_narrow &rArr; __mathlib_tofloat &rArr; __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_tofloat
</UL>
<BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_hex_real
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[495]"></a>__mathlib_tofloat</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, narrow.o(i.__mathlib_tofloat))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __mathlib_tofloat &rArr; __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frexp
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_narrow
</UL>

<P><STRONG><a name="[291]"></a>__support_ldexp</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ldexp.o(i.__support_ldexp))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __support_ldexp &rArr; ldexp &rArr; __aeabi_cdcmpeq
</UL>
<BR>[Calls]<UL><LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ldexp
</UL>
<BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_hex_real
</UL>

<P><STRONG><a name="[262]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[235]"></a>_sys_exit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usart.o(i._sys_exit))
<BR><BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[4a8]"></a>ai_draw_init</STRONG> (Thumb, 204 bytes, Stack size 24 bytes, piclib.o(i.ai_draw_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ai_draw_init &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpg_decode
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stdbmp_decode
</UL>

<P><STRONG><a name="[26]"></a>ai_load_picfile</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, piclib.o(i.ai_load_picfile))
<BR><BR>[Stack]<UL><LI>Max Depth = 648 + Unknown Stack Size
<LI>Call Chain = ai_load_picfile &rArr; gif_decode &rArr; gif_drawimage &rArr; gif_dispimage &rArr; gif_getnextbyte &rArr; gif_getnextcode &rArr; gif_getdatablock &rArr; f_lseek &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Erase_Sector &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpg_decode
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gif_decode
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stdbmp_decode
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_typetell
</UL>
<BR>[Called By]<UL><LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spb_init
<LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;picviewer_play
<LI><a href="#[6bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;paint_play
<LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_load_ui
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usmart_config.o(.data)
</UL>
<P><STRONG><a name="[237]"></a>alientek_ncr_free</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, atk_ncr.o(i.alientek_ncr_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = alientek_ncr_free &rArr; myfree &rArr; my_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myfree
</UL>
<BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alientek_ncr_stop
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recog
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmoothFilter
</UL>

<P><STRONG><a name="[239]"></a>alientek_ncr_malloc</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, atk_ncr.o(i.alientek_ncr_malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = alientek_ncr_malloc &rArr; mymalloc &rArr; my_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mymalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alientek_ncr_init
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recog
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmoothFilter
</UL>

<P><STRONG><a name="[242]"></a>alientek_ncr_memset</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, atk_ncr.o(i.alientek_ncr_memset))
<BR><BR>[Calls]<UL><LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mymemset
</UL>
<BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recog
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FeaExtractByGradient
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OverallElasticMesh
</UL>

<P><STRONG><a name="[1f2]"></a>app_boot_cpdmsg</STRONG> (Thumb, 190 bytes, Stack size 32 bytes, common.o(i.app_boot_cpdmsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = app_boot_cpdmsg &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowString
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fill
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowNum
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> test.o(i.system_init)
</UL>
<P><STRONG><a name="[79f]"></a>app_boot_cpdmsg_set</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, common.o(i.app_boot_cpdmsg_set))
<BR><BR>[Called By]<UL><LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_init
</UL>

<P><STRONG><a name="[4ae]"></a>app_draw_smooth_line</STRONG> (Thumb, 52 bytes, Stack size 40 bytes, common.o(i.app_draw_smooth_line))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = app_draw_smooth_line &rArr; gui_draw_smooth_rectangle &rArr; gui_memin_malloc &rArr; mymalloc &rArr; my_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_smooth_rectangle
</UL>
<BR>[Called By]<UL><LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_items_sel
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appplay_remote
</UL>

<P><STRONG><a name="[4b0]"></a>app_filebrower</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, common.o(i.app_filebrower))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = app_filebrower &rArr; gui_show_strmid &rArr; gui_show_ptstr &rArr; gui_show_ptfont &rArr; Get_HzMat &rArr; W25QXX_Read &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_show_strmid
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gui_tcbar
</UL>
<BR>[Called By]<UL><LI><a href="#[6c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wireless_play
<LI><a href="#[6bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_play
<LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;picviewer_play
<LI><a href="#[6bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;paint_play
<LI><a href="#[6bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;notepad_play
<LI><a href="#[6bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nes_play
<LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exe_play
<LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebook_play
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_filelist
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_listbox_select
<LI><a href="#[76e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sms_msg_select
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_load_ui
<LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_load_ui
</UL>

<P><STRONG><a name="[4bf]"></a>app_get_icopath</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, common.o(i.app_get_icopath))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = app_get_icopath
</UL>
<BR>[Called By]<UL><LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_items_sel
</UL>

<P><STRONG><a name="[4b3]"></a>app_get_numlen</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, common.o(i.app_get_numlen))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + In Cycle
<LI>Call Chain = app_get_numlen &rArr;  app_get_numlen (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_pow
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_numlen
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_show_float
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_numlen
</UL>

<P><STRONG><a name="[52e]"></a>app_get_rand</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, common.o(i.app_get_rand))
<BR><BR>[Called By]<UL><LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;picviewer_play
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_play
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_play_task
</UL>

<P><STRONG><a name="[78c]"></a>app_get_version</STRONG> (Thumb, 124 bytes, Stack size 12 bytes, common.o(i.app_get_version))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = app_get_version
</UL>
<BR>[Called By]<UL><LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_init
<LI><a href="#[789]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysset_system_info
<LI><a href="#[78b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysset_system_about
</UL>

<P><STRONG><a name="[78d]"></a>app_getstm32_sn</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, common.o(i.app_getstm32_sn))
<BR><BR>[Called By]<UL><LI><a href="#[78b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysset_system_about
</UL>

<P><STRONG><a name="[4b1]"></a>app_gui_tcbar</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, common.o(i.app_gui_tcbar))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = app_gui_tcbar &rArr; gui_fill_rectangle
</UL>
<BR>[Calls]<UL><LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_fill_rectangle
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_vline
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_hline
</UL>
<BR>[Called By]<UL><LI><a href="#[6bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;paint_play
<LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebook_play
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_filebrower
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appplay_gyro
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appplay_load_ui
<LI><a href="#[7db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tomcat_load_ui
<LI><a href="#[750]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recorder_load_ui
</UL>

<P><STRONG><a name="[4b9]"></a>app_items_sel</STRONG> (Thumb, 1000 bytes, Stack size 96 bytes, common.o(i.app_items_sel))
<BR><BR>[Stack]<UL><LI>Max Depth = 792 + Unknown Stack Size
<LI>Call Chain = app_items_sel &rArr; window_draw &rArr; btn_draw &rArr; btn_draw_picbtn &rArr; minibmp_decode &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Erase_Sector &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_draw
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_delete
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_creat
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spb_delete
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_draw
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_delete
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_creat
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_check
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_tp_is_in_area
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_show_items
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_icopath
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_draw_smooth_line
</UL>
<BR>[Called By]<UL><LI><a href="#[6c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wireless_play
<LI><a href="#[6ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysset_play
<LI><a href="#[6c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sms_play
<LI><a href="#[6bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;paint_play
<LI><a href="#[6bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;notepad_play
<LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_play
<LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_test
</UL>

<P><STRONG><a name="[4c5]"></a>app_lcd_auto_bklight</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, common.o(i.app_lcd_auto_bklight))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = app_lcd_auto_bklight &rArr; Lsens_Get_Val &rArr; delay_ms &rArr; delay_us &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SSD_BackLightSet
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lsens_Get_Val
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[6ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysset_play
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_system_parameter_init
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_task
<LI><a href="#[782]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysset_bklight_set
</UL>

<P><STRONG><a name="[4c6]"></a>app_listbox_select</STRONG> (Thumb, 494 bytes, Stack size 64 bytes, common.o(i.app_listbox_select))
<BR><BR>[Stack]<UL><LI>Max Depth = 736 + Unknown Stack Size
<LI>Call Chain = app_listbox_select &rArr; btn_check &rArr; btn_draw &rArr; btn_draw_picbtn &rArr; minibmp_decode &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Erase_Sector &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;listbox_draw_listbox
<LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;listbox_delete
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;listbox_creat
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;listbox_check
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;listbox_addlist
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_draw
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_delete
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_creat
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_check
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_filebrower
</UL>
<BR>[Called By]<UL><LI><a href="#[6ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysset_play
</UL>

<P><STRONG><a name="[4cc]"></a>app_muti_remind_msg</STRONG> (Thumb, 398 bytes, Stack size 80 bytes, common.o(i.app_muti_remind_msg))
<BR><BR>[Stack]<UL><LI>Max Depth = 776 + Unknown Stack Size
<LI>Call Chain = app_muti_remind_msg &rArr; window_draw &rArr; btn_draw &rArr; btn_draw_picbtn &rArr; minibmp_decode &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Erase_Sector &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mymalloc
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myfree
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_show_ptstr
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_draw
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_delete
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_creat
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_draw
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_delete
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_creat
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_check
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[6bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nes_play
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appplay_gyro
</UL>

<P><STRONG><a name="[4cf]"></a>app_play</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, appplay.o(i.app_play))
<BR><BR>[Stack]<UL><LI>Max Depth = 888 + Unknown Stack Size
<LI>Call Chain = app_play &rArr; appplay_gyro &rArr; app_muti_remind_msg &rArr; window_draw &rArr; btn_draw &rArr; btn_draw_picbtn &rArr; minibmp_decode &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Erase_Sector &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_memin_malloc
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_memin_free
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appplay_remote
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appplay_gyro
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appplay_tpscan
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appplay_set_sel
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appplay_load_ui
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_task
</UL>

<P><STRONG><a name="[526]"></a>app_read_bkcolor</STRONG> (Thumb, 62 bytes, Stack size 40 bytes, common.o(i.app_read_bkcolor))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = app_read_bkcolor
</UL>
<BR>[Called By]<UL><LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tomcat_play
<LI><a href="#[6be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recorder_play
<LI><a href="#[6bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;paint_play
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_lrc_bkcolor_process
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phone_incall_task
<LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_test
</UL>

<P><STRONG><a name="[525]"></a>app_recover_bkcolor</STRONG> (Thumb, 62 bytes, Stack size 40 bytes, common.o(i.app_recover_bkcolor))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = app_recover_bkcolor
</UL>
<BR>[Called By]<UL><LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tomcat_play
<LI><a href="#[6be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recorder_play
<LI><a href="#[6bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;paint_play
<LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_lrc_show
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_lrc_bkcolor_process
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phone_incall_task
<LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_test
</UL>

<P><STRONG><a name="[4d7]"></a>app_set_default</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, common.o(i.app_set_default))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = app_set_default &rArr; calendar_alarm_init &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SSD_BackLightSet
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vs10xx_save_para
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysset_save_para
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calendar_save_para
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calendar_alarm_init
</UL>
<BR>[Called By]<UL><LI><a href="#[6ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysset_play
</UL>

<P><STRONG><a name="[4dc]"></a>app_show_float</STRONG> (Thumb, 292 bytes, Stack size 80 bytes, common.o(i.app_show_float))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = app_show_float &rArr; gui_show_num &rArr; gui_show_ptchar &rArr; gui_draw_bigpoint
</UL>
<BR>[Calls]<UL><LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_fill_rectangle
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_show_ptchar
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_show_num
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_pow
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_numlen
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[78e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysset_vs1053_eq_show
<LI><a href="#[78a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysset_system_status
</UL>

<P><STRONG><a name="[4c0]"></a>app_show_items</STRONG> (Thumb, 128 bytes, Stack size 56 bytes, common.o(i.app_show_items))
<BR><BR>[Stack]<UL><LI>Max Depth = 680 + Unknown Stack Size
<LI>Call Chain = app_show_items &rArr; minibmp_decode &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Erase_Sector &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_fill_rectangle
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_show_ptstr
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;minibmp_decode
</UL>
<BR>[Called By]<UL><LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_items_sel
</UL>

<P><STRONG><a name="[77c]"></a>app_show_mono_icos</STRONG> (Thumb, 122 bytes, Stack size 48 bytes, common.o(i.app_show_mono_icos))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = app_show_mono_icos
</UL>
<BR>[Called By]<UL><LI><a href="#[6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spb_stabar_msg_show
<LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_init
</UL>

<P><STRONG><a name="[4e0]"></a>app_show_nummid</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, common.o(i.app_show_nummid))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = app_show_nummid &rArr; LCD_ShowxNum &rArr; LCD_ShowChar &rArr; LCD_Fast_DrawPoint
</UL>
<BR>[Calls]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowxNum
</UL>
<BR>[Called By]<UL><LI><a href="#[785]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysset_time_set
<LI><a href="#[783]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysset_date_set
</UL>

<P><STRONG><a name="[77e]"></a>app_srand</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, common.o(i.app_srand))
<BR><BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_task
</UL>

<P><STRONG><a name="[4e1]"></a>app_system_file_check</STRONG> (Thumb, 1508 bytes, Stack size 48 bytes, common.o(i.app_system_file_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 584 + Unknown Stack Size
<LI>Call Chain = app_system_file_check &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Erase_Sector &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_memin_malloc
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_memin_free
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_system_file_chgdisk
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_init
<LI><a href="#[788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysset_system_update
</UL>

<P><STRONG><a name="[4e2]"></a>app_system_file_chgdisk</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, common.o(i.app_system_file_chgdisk))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = app_system_file_chgdisk &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_system_file_check
</UL>

<P><STRONG><a name="[4e5]"></a>app_system_parameter_init</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, common.o(i.app_system_parameter_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = app_system_parameter_init &rArr; calendar_alarm_init &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_lcd_auto_bklight
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SSD_BackLightSet
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_PWM_Init
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vs10xx_save_para
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vs10xx_read_para
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysset_save_para
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysset_read_para
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calendar_save_para
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calendar_read_para
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calendar_alarm_init
</UL>
<BR>[Called By]<UL><LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_init
</UL>

<P><STRONG><a name="[4ea]"></a>app_system_update</STRONG> (Thumb, 256 bytes, Stack size 48 bytes, common.o(i.app_system_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 728 + Unknown Stack Size
<LI>Call Chain = app_system_update &rArr; exf_fdcopy &rArr;  exf_fdcopy (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_memin_malloc
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_memin_free
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exf_fdsize
<LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exf_fdcopy
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_init
<LI><a href="#[788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysset_system_update
</UL>

<P><STRONG><a name="[4c2]"></a>app_tp_is_in_area</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, common.o(i.app_tp_is_in_area))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = app_tp_is_in_area
</UL>
<BR>[Called By]<UL><LI><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;paint_pen_color_set
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_items_sel
</UL>

<P><STRONG><a name="[4d4]"></a>appplay_gyro</STRONG> (Thumb, 906 bytes, Stack size 88 bytes, appplay_gyro.o(i.appplay_gyro))
<BR><BR>[Stack]<UL><LI>Max Depth = 864 + Unknown Stack Size
<LI>Call Chain = appplay_gyro &rArr; app_muti_remind_msg &rArr; window_draw &rArr; btn_draw &rArr; btn_draw_picbtn &rArr; minibmp_decode &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Erase_Sector &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart3_init
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Init
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_dmp_init
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_dmp_get_data
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_msg_box
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_show_strmid
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_muti_remind_msg
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gui_tcbar
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro_circle_yaw
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro_circle_roll
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro_circle_pitch
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro_circle_panel
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_play
</UL>

<P><STRONG><a name="[4d1]"></a>appplay_load_ui</STRONG> (Thumb, 506 bytes, Stack size 80 bytes, appplay.o(i.appplay_load_ui))
<BR><BR>[Stack]<UL><LI>Max Depth = 776 + Unknown Stack Size
<LI>Call Chain = appplay_load_ui &rArr; window_draw &rArr; btn_draw &rArr; btn_draw_picbtn &rArr; minibmp_decode &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Erase_Sector &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_fill_rectangle
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;minibmp_decode
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_draw
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_delete
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_creat
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_show_strmid
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gui_tcbar
</UL>
<BR>[Called By]<UL><LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_play
</UL>

<P><STRONG><a name="[4d3]"></a>appplay_remote</STRONG> (Thumb, 620 bytes, Stack size 64 bytes, appplay_remote.o(i.appplay_remote))
<BR><BR>[Stack]<UL><LI>Max Depth = 760 + Unknown Stack Size
<LI>Call Chain = appplay_remote &rArr; window_draw &rArr; btn_draw &rArr; btn_draw_picbtn &rArr; minibmp_decode &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Erase_Sector &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowString
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowNum
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remote_Scan
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remote_Init
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_show_ptstr
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_draw
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_delete
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_creat
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_draw_smooth_line
</UL>
<BR>[Called By]<UL><LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_play
</UL>

<P><STRONG><a name="[4d5]"></a>appplay_set_sel</STRONG> (Thumb, 330 bytes, Stack size 48 bytes, appplay.o(i.appplay_set_sel))
<BR><BR>[Stack]<UL><LI>Max Depth = 672 + Unknown Stack Size
<LI>Call Chain = appplay_set_sel &rArr; minibmp_decode &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Erase_Sector &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_fill_rectangle
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;minibmp_decode
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_alphablend_area
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_show_strmid
</UL>
<BR>[Called By]<UL><LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_play
</UL>

<P><STRONG><a name="[4d2]"></a>appplay_tpscan</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, appplay.o(i.appplay_tpscan))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = appplay_tpscan
</UL>
<BR>[Called By]<UL><LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_play
</UL>

<P><STRONG><a name="[4f8]"></a>apu_build_luts</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, nes_apu.o(i.apu_build_luts))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = apu_build_luts &rArr; __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apu_setparams
</UL>

<P><STRONG><a name="[503]"></a>apu_dequeue</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, nes_apu.o(i.apu_dequeue))
<BR><BR>[Called By]<UL><LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apu_process
</UL>

<P><STRONG><a name="[4f9]"></a>apu_dmc</STRONG> (Thumb, 194 bytes, Stack size 16 bytes, nes_apu.o(i.apu_dmc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = apu_dmc
</UL>
<BR>[Calls]<UL><LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;K6502_Read
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apu_dmcreload
</UL>
<BR>[Called By]<UL><LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apu_process
</UL>

<P><STRONG><a name="[4fb]"></a>apu_dmcreload</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, nes_apu.o(i.apu_dmcreload))
<BR><BR>[Called By]<UL><LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apu_regwrite
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apu_dmc
</UL>

<P><STRONG><a name="[2b1]"></a>apu_enqueue</STRONG> (Thumb, 46 bytes, Stack size 12 bytes, nes_apu.o(i.apu_enqueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = apu_enqueue
</UL>
<BR>[Called By]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Apu_Write4015
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Apu_Write
</UL>

<P><STRONG><a name="[4fc]"></a>apu_init</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, nes_apu.o(i.apu_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = apu_init &rArr; apu_setparams &rArr; apu_build_luts &rArr; __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mymemset
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apu_setparams
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apu_setchan
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apu_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[6fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nes_load
</UL>

<P><STRONG><a name="[500]"></a>apu_noise</STRONG> (Thumb, 158 bytes, Stack size 20 bytes, nes_apu.o(i.apu_noise))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = apu_noise &rArr; shift_register15
</UL>
<BR>[Calls]<UL><LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shift_register15
</UL>
<BR>[Called By]<UL><LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apu_process
</UL>

<P><STRONG><a name="[502]"></a>apu_process</STRONG> (Thumb, 350 bytes, Stack size 40 bytes, nes_apu.o(i.apu_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = apu_process &rArr; apu_regwrite
</UL>
<BR>[Calls]<UL><LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apu_triangle
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apu_regwrite
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apu_rectangle
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apu_noise
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apu_dmc
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apu_dequeue
</UL>
<BR>[Called By]<UL><LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apu_soundoutput
</UL>

<P><STRONG><a name="[505]"></a>apu_rectangle</STRONG> (Thumb, 254 bytes, Stack size 20 bytes, nes_apu.o(i.apu_rectangle))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = apu_rectangle
</UL>
<BR>[Called By]<UL><LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apu_process
</UL>

<P><STRONG><a name="[504]"></a>apu_regwrite</STRONG> (Thumb, 722 bytes, Stack size 56 bytes, nes_apu.o(i.apu_regwrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = apu_regwrite
</UL>
<BR>[Calls]<UL><LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apu_dmcreload
</UL>
<BR>[Called By]<UL><LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apu_reset
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apu_process
</UL>

<P><STRONG><a name="[4fe]"></a>apu_reset</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, nes_apu.o(i.apu_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = apu_reset &rArr; apu_regwrite
</UL>
<BR>[Calls]<UL><LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mymemset
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apu_regwrite
</UL>
<BR>[Called By]<UL><LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apu_init
</UL>

<P><STRONG><a name="[4ff]"></a>apu_setchan</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nes_apu.o(i.apu_setchan))
<BR><BR>[Called By]<UL><LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apu_init
</UL>

<P><STRONG><a name="[4fd]"></a>apu_setparams</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, nes_apu.o(i.apu_setparams))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = apu_setparams &rArr; apu_build_luts &rArr; __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apu_build_luts
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apu_init
</UL>

<P><STRONG><a name="[507]"></a>apu_soundoutput</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, nes_apu.o(i.apu_soundoutput))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = apu_soundoutput &rArr; apu_process &rArr; apu_regwrite
</UL>
<BR>[Calls]<UL><LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nes_apu_fill_buffer
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apu_process
</UL>
<BR>[Called By]<UL><LI><a href="#[6f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nes_emulate_frame
</UL>

<P><STRONG><a name="[506]"></a>apu_triangle</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, nes_apu.o(i.apu_triangle))
<BR><BR>[Called By]<UL><LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apu_process
</UL>

<P><STRONG><a name="[1d0]"></a>arp_timer</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, timers.o(i.arp_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = arp_timer &rArr; etharp_tmr &rArr; etharp_free_entry &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_tmr
<LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
</UL>
<BR>[Address Reference Count : 3]<UL><LI> lwip_comm.o(i.lwip_comm_delete_next_timeout)
<LI> timers.o(i.arp_timer)
<LI> timers.o(i.sys_timeouts_init)
</UL>
<P><STRONG><a name="[50b]"></a>asin</STRONG> (Thumb, 572 bytes, Stack size 56 bytes, asin.o(i.asin))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = asin &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_dmp_get_data
</UL>

<P><STRONG><a name="[7f4]"></a>asm_Mapper_ReadLow</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nes_mapper.o(i.asm_Mapper_ReadLow))
<BR><BR>[Called By]<UL><LI><a href="#[7f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Low
</UL>

<P><STRONG><a name="[7f9]"></a>asm_Mapper_Write</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nes_mapper.o(i.asm_Mapper_Write))
<BR><BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mapper_W
</UL>

<P><STRONG><a name="[7f5]"></a>asm_Mapper_WriteLow</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nes_mapper.o(i.asm_Mapper_WriteLow))
<BR><BR>[Called By]<UL><LI><a href="#[7f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Low
</UL>

<P><STRONG><a name="[50c]"></a>atan</STRONG> (Thumb, 474 bytes, Stack size 40 bytes, atan.o(i.atan))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = atan &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2
</UL>

<P><STRONG><a name="[50d]"></a>atan2</STRONG> (Thumb, 346 bytes, Stack size 32 bytes, atan2.o(i.atan2))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = atan2 &rArr; atan &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
</UL>
<BR>[Called By]<UL><LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_dmp_get_data
</UL>

<P><STRONG><a name="[50e]"></a>atof</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, atof.o(i.atof))
<BR><BR>[Stack]<UL><LI>Max Depth = 460<LI>Call Chain = atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtod_int
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__read_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_play
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_show_res
<LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_exe
</UL>

<P><STRONG><a name="[50f]"></a>audio_filelist</STRONG> (Thumb, 684 bytes, Stack size 48 bytes, audioplay.o(i.audio_filelist))
<BR><BR>[Stack]<UL><LI>Max Depth = 752 + Unknown Stack Size
<LI>Call Chain = audio_filelist &rArr; filelistbox_check &rArr; filelistbox_check_filelist &rArr; filelistbox_back &rArr; filelistbox_scan_filelist &rArr; filelistbox_add_disk &rArr; f_getlabel &rArr; dir_read &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Erase_Sector &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_memin_malloc
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_memin_free
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filelistbox_scan_filelist
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPost
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_stop_req
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_memset
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filelistbox_draw_listbox
<LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filelistbox_delete
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filelistbox_creat
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filelistbox_check
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filelistbox_back
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filelistbox_add_disk
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filelist_search
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_memex_malloc
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_memex_free
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_draw
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_delete
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_creat
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_check
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_filebrower
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_play
</UL>

<P><STRONG><a name="[51c]"></a>audio_info_upd</STRONG> (Thumb, 908 bytes, Stack size 80 bytes, audioplay.o(i.audio_info_upd))
<BR><BR>[Stack]<UL><LI>Max Depth = 648 + Unknown Stack Size
<LI>Call Chain = audio_info_upd &rArr; lrc_read &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Erase_Sector &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_memin_malloc
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_memin_free
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_fill_rectangle
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progressbar_draw_progressbar
<LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lrc_read
<LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_show_ptstrwhiterim
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_time_show
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_show_vol
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_lrc_bkcolor_process
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_show_string
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_play
</UL>

<P><STRONG><a name="[524]"></a>audio_load_ui</STRONG> (Thumb, 376 bytes, Stack size 56 bytes, audioplay.o(i.audio_load_ui))
<BR><BR>[Stack]<UL><LI>Max Depth = 704 + Unknown Stack Size
<LI>Call Chain = audio_load_ui &rArr; ai_load_picfile &rArr; gif_decode &rArr; gif_drawimage &rArr; gif_dispimage &rArr; gif_getnextbyte &rArr; gif_getnextcode &rArr; gif_getdatablock &rArr; f_lseek &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Erase_Sector &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_fill_rectangle
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_load_picfile
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;minibmp_decode
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_lrc_bkcolor_process
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_show_string
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_show_strmid
</UL>
<BR>[Called By]<UL><LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_play
</UL>

<P><STRONG><a name="[521]"></a>audio_lrc_bkcolor_process</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, audioplay.o(i.audio_lrc_bkcolor_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = audio_lrc_bkcolor_process &rArr; app_recover_bkcolor
</UL>
<BR>[Calls]<UL><LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_recover_bkcolor
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_read_bkcolor
</UL>
<BR>[Called By]<UL><LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_load_ui
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_info_upd
</UL>

<P><STRONG><a name="[527]"></a>audio_lrc_show</STRONG> (Thumb, 594 bytes, Stack size 56 bytes, audioplay.o(i.audio_lrc_show))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = audio_lrc_show &rArr; lrc_show_linelrc &rArr; f_lseek &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Erase_Sector &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_show_ptstr
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lrc_show_linelrc
<LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_disabs
<LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_recover_bkcolor
</UL>
<BR>[Called By]<UL><LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_play
</UL>

<P><STRONG><a name="[52a]"></a>audio_play</STRONG> (Thumb, 1214 bytes, Stack size 72 bytes, audioplay.o(i.audio_play))
<BR><BR>[Stack]<UL><LI>Max Depth = 824 + Unknown Stack Size
<LI>Call Chain = audio_play &rArr; audio_filelist &rArr; filelistbox_check &rArr; filelistbox_check_filelist &rArr; filelistbox_back &rArr; filelistbox_scan_filelist &rArr; filelistbox_add_disk &rArr; f_getlabel &rArr; dir_read &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Erase_Sector &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VS_Set_Vol
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progressbar_draw_progressbar
<LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progressbar_delete
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progressbar_creat
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progressbar_check
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPost
<LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_task_delete
<LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_task_creat
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_stop_req
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_show_vol
<LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_lrc_show
<LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_load_ui
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_info_upd
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_filelist
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_draw
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_delete
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_creat
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_check
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_rand
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_task
</UL>

<P><STRONG><a name="[1b8]"></a>audio_play_task</STRONG> (Thumb, 332 bytes, Stack size 96 bytes, audioplay.o(i.audio_play_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 664 + Unknown Stack Size
<LI>Call Chain = audio_play_task &rArr; mp3_play_song &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Erase_Sector &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_memin_malloc
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_memin_free
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VS_HD_Reset
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VS_Soft_Reset
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_leave
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_enter
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_typetell
<LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp3_play_song
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPend
<LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_task_delete
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_path_name
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_rand
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> audioplay.o(i.audio_task_creat)
</UL>
<P><STRONG><a name="[51e]"></a>audio_show_vol</STRONG> (Thumb, 196 bytes, Stack size 48 bytes, audioplay.o(i.audio_show_vol))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = audio_show_vol &rArr; gui_show_num &rArr; gui_show_ptchar &rArr; gui_draw_bigpoint
</UL>
<BR>[Calls]<UL><LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_fill_rectangle
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_show_ptchar
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_show_num
</UL>
<BR>[Called By]<UL><LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_play
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_info_upd
</UL>

<P><STRONG><a name="[6da]"></a>audio_start</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, audioplay.o(i.audio_start))
<BR><BR>[Called By]<UL><LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp3_play_song
</UL>

<P><STRONG><a name="[6dc]"></a>audio_stop</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, audioplay.o(i.audio_stop))
<BR><BR>[Called By]<UL><LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp3_play_song
</UL>

<P><STRONG><a name="[51a]"></a>audio_stop_req</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, audioplay.o(i.audio_stop_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = audio_stop_req &rArr; delay_ms &rArr; delay_us &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tomcat_play
<LI><a href="#[6be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recorder_play
<LI><a href="#[6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_play
<LI><a href="#[6bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nes_play
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_play
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_filelist
</UL>

<P><STRONG><a name="[52b]"></a>audio_task_creat</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, audioplay.o(i.audio_task_creat))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = audio_task_creat &rArr; OSTaskCreate &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_memin_malloc
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lrc_creat
<LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_task_delete
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_memex_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_play
</UL>

<P><STRONG><a name="[52c]"></a>audio_task_delete</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, audioplay.o(i.audio_task_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = audio_task_delete &rArr; OSTaskDel &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_memin_free
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VS_Set_Vol
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VS_SPK_Set
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lrc_delete
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_memex_free
</UL>
<BR>[Called By]<UL><LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tomcat_play
<LI><a href="#[6be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recorder_play
<LI><a href="#[6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_play
<LI><a href="#[6bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nes_play
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_play
<LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_task_creat
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_play_task
</UL>

<P><STRONG><a name="[523]"></a>audio_time_show</STRONG> (Thumb, 132 bytes, Stack size 56 bytes, audioplay.o(i.audio_time_show))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = audio_time_show &rArr; gui_show_num &rArr; gui_show_ptchar &rArr; gui_draw_bigpoint
</UL>
<BR>[Calls]<UL><LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_show_ptchar
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_show_num
</UL>
<BR>[Called By]<UL><LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_info_upd
</UL>

<P><STRONG><a name="[34a]"></a>bg_enabled</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nes_ppu.o(i.bg_enabled))
<BR><BR>[Called By]<UL><LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_scanline_and_dont_draw
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPU_start_frame
<LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_scanline_and_draw
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP67_HSync
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP64_HSync
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP4_HSync
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP33_HSync
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP189_HSync
</UL>

<P><STRONG><a name="[13]"></a>bmp_encode</STRONG> (Thumb, 416 bytes, Stack size 128 bytes, bmp.o(i.bmp_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 664 + Unknown Stack Size
<LI>Call Chain = bmp_encode &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Erase_Sector &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ReadPoint
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mymemset
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pic_memfree
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pic_memalloc
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
</UL>
<BR>[Called By]<UL><LI><a href="#[6bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;paint_play
<LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_play
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usmart_config.o(.data)
</UL>
<P><STRONG><a name="[4c1]"></a>btn_check</STRONG> (Thumb, 176 bytes, Stack size 16 bytes, button.o(i.btn_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 672 + Unknown Stack Size
<LI>Call Chain = btn_check &rArr; btn_draw &rArr; btn_draw_picbtn &rArr; minibmp_decode &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Erase_Sector &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_draw
</UL>
<BR>[Called By]<UL><LI><a href="#[6c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wireless_play
<LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tomcat_play
<LI><a href="#[6be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recorder_play
<LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;picviewer_play
<LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phone_play
<LI><a href="#[6bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;paint_play
<LI><a href="#[6bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;notepad_play
<LI><a href="#[6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_play
<LI><a href="#[6bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nes_play
<LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exe_play
<LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebook_play
<LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calendar_alarm_msg
<LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_play
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_play
<LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;paint_pen_size_set
<LI><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;paint_pen_color_set
<LI><a href="#[715]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t9_check
<LI><a href="#[786]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysset_vs1053_vol3d_set
<LI><a href="#[787]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysset_vs1053_eq_set
<LI><a href="#[785]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysset_time_set
<LI><a href="#[78a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysset_system_status
<LI><a href="#[789]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysset_system_info
<LI><a href="#[78b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysset_system_about
<LI><a href="#[783]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysset_date_set
<LI><a href="#[782]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysset_bklight_set
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_filelist
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_msg_box
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_muti_remind_msg
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_listbox_select
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_items_sel
<LI><a href="#[774]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sms_send_sms
<LI><a href="#[76e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sms_msg_select
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phone_incall_task
<LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_test
<LI><a href="#[7d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tomcat_agcspd_set
<LI><a href="#[74d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recorder_agc_set
</UL>

<P><STRONG><a name="[4bc]"></a>btn_creat</STRONG> (Thumb, 220 bytes, Stack size 32 bytes, button.o(i.btn_creat))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = btn_creat &rArr; gui_memin_malloc &rArr; mymalloc &rArr; my_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_memin_malloc
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_read_backcolor
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[6c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wireless_play
<LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tomcat_play
<LI><a href="#[6be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recorder_play
<LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;picviewer_play
<LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phone_play
<LI><a href="#[6bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;paint_play
<LI><a href="#[6bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;notepad_play
<LI><a href="#[6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_play
<LI><a href="#[6bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nes_play
<LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exe_play
<LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebook_play
<LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calendar_alarm_msg
<LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_play
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_play
<LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;paint_pen_size_set
<LI><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;paint_pen_color_set
<LI><a href="#[713]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t9_creat
<LI><a href="#[786]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysset_vs1053_vol3d_set
<LI><a href="#[787]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysset_vs1053_eq_set
<LI><a href="#[785]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysset_time_set
<LI><a href="#[78a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysset_system_status
<LI><a href="#[789]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysset_system_info
<LI><a href="#[78b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysset_system_about
<LI><a href="#[783]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysset_date_set
<LI><a href="#[782]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysset_bklight_set
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_filelist
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_msg_box
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_creat
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_muti_remind_msg
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_listbox_select
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_items_sel
<LI><a href="#[774]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sms_send_sms
<LI><a href="#[76e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sms_msg_select
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phone_incall_task
<LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_test
<LI><a href="#[7d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tomcat_agcspd_set
<LI><a href="#[74d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recorder_agc_set
</UL>

<P><STRONG><a name="[4c4]"></a>btn_delete</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, button.o(i.btn_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = btn_delete &rArr; btn_recover_backcolor
</UL>
<BR>[Calls]<UL><LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_memin_free
<LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_recover_backcolor
</UL>
<BR>[Called By]<UL><LI><a href="#[6c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wireless_play
<LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tomcat_play
<LI><a href="#[6be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recorder_play
<LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;picviewer_play
<LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phone_play
<LI><a href="#[6bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;paint_play
<LI><a href="#[6bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;notepad_play
<LI><a href="#[6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_play
<LI><a href="#[6bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nes_play
<LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exe_play
<LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebook_play
<LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calendar_alarm_msg
<LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_play
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_play
<LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;paint_pen_size_set
<LI><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;paint_pen_color_set
<LI><a href="#[722]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t9_delete
<LI><a href="#[786]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysset_vs1053_vol3d_set
<LI><a href="#[787]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysset_vs1053_eq_set
<LI><a href="#[785]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysset_time_set
<LI><a href="#[78a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysset_system_status
<LI><a href="#[789]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysset_system_info
<LI><a href="#[78b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysset_system_about
<LI><a href="#[783]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysset_date_set
<LI><a href="#[782]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysset_bklight_set
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_filelist
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_msg_box
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_delete
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_creat
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_muti_remind_msg
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_listbox_select
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_items_sel
<LI><a href="#[774]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sms_send_sms
<LI><a href="#[76e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sms_msg_select
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phone_incall_task
<LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_test
<LI><a href="#[7d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tomcat_agcspd_set
<LI><a href="#[74d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recorder_agc_set
</UL>

<P><STRONG><a name="[4be]"></a>btn_draw</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, button.o(i.btn_draw))
<BR><BR>[Stack]<UL><LI>Max Depth = 656 + Unknown Stack Size
<LI>Call Chain = btn_draw &rArr; btn_draw_picbtn &rArr; minibmp_decode &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Erase_Sector &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_draw_textbbtn
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_draw_textabtn
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_draw_stdbtn
<LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_draw_picbtn
<LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_draw_arcbtn
</UL>
<BR>[Called By]<UL><LI><a href="#[6c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wireless_play
<LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tomcat_play
<LI><a href="#[6be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recorder_play
<LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;picviewer_play
<LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phone_play
<LI><a href="#[6bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;paint_play
<LI><a href="#[6bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;notepad_play
<LI><a href="#[6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_play
<LI><a href="#[6bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nes_play
<LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exe_play
<LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebook_play
<LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calendar_alarm_msg
<LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_play
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_play
<LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;paint_pen_size_set
<LI><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;paint_pen_color_set
<LI><a href="#[714]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t9_draw
<LI><a href="#[786]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysset_vs1053_vol3d_set
<LI><a href="#[787]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysset_vs1053_eq_set
<LI><a href="#[785]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysset_time_set
<LI><a href="#[78a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysset_system_status
<LI><a href="#[789]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysset_system_info
<LI><a href="#[78b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysset_system_about
<LI><a href="#[783]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysset_date_set
<LI><a href="#[782]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysset_bklight_set
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_filelist
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_msg_box
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_draw
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_check
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_muti_remind_msg
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_listbox_select
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_items_sel
<LI><a href="#[774]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sms_send_sms
<LI><a href="#[76e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sms_msg_select
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phone_incall_task
<LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_test
<LI><a href="#[7d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tomcat_agcspd_set
<LI><a href="#[74d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recorder_agc_set
<LI><a href="#[7ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t9_draw_vbtn
<LI><a href="#[7aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t9_draw_mbtn
<LI><a href="#[7a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t9_draw_hbtn
</UL>

<P><STRONG><a name="[541]"></a>btn_draw_arcbtn</STRONG> (Thumb, 238 bytes, Stack size 40 bytes, button.o(i.btn_draw_arcbtn))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = btn_draw_arcbtn &rArr; gui_show_strmid &rArr; gui_show_ptstr &rArr; gui_show_ptfont &rArr; Get_HzMat &rArr; W25QXX_Read &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_show_strmid
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_hline
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_arcrectangle
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_alpha_blend565
</UL>
<BR>[Called By]<UL><LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_draw
</UL>

<P><STRONG><a name="[540]"></a>btn_draw_picbtn</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, button.o(i.btn_draw_picbtn))
<BR><BR>[Stack]<UL><LI>Max Depth = 648 + Unknown Stack Size
<LI>Call Chain = btn_draw_picbtn &rArr; minibmp_decode &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Erase_Sector &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_fill_rectangle
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;minibmp_decode
</UL>
<BR>[Called By]<UL><LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_draw
</UL>

<P><STRONG><a name="[53f]"></a>btn_draw_stdbtn</STRONG> (Thumb, 398 bytes, Stack size 40 bytes, button.o(i.btn_draw_stdbtn))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = btn_draw_stdbtn &rArr; gui_show_strmid &rArr; gui_show_ptstr &rArr; gui_show_ptfont &rArr; Get_HzMat &rArr; W25QXX_Read &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_fill_rectangle
<LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_rectangle
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_show_strmid
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_vline
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_hline
</UL>
<BR>[Called By]<UL><LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_draw
</UL>

<P><STRONG><a name="[542]"></a>btn_draw_textabtn</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, button.o(i.btn_draw_textabtn))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = btn_draw_textabtn &rArr; gui_show_strmid &rArr; gui_show_ptstr &rArr; gui_show_ptfont &rArr; Get_HzMat &rArr; W25QXX_Read &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_show_strmid
<LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_recover_backcolor
</UL>
<BR>[Called By]<UL><LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_draw
</UL>

<P><STRONG><a name="[543]"></a>btn_draw_textbbtn</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, button.o(i.btn_draw_textbbtn))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = btn_draw_textbbtn &rArr; gui_show_strmid &rArr; gui_show_ptstr &rArr; gui_show_ptfont &rArr; Get_HzMat &rArr; W25QXX_Read &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_fill_rectangle
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_show_strmid
</UL>
<BR>[Called By]<UL><LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_draw
</UL>

<P><STRONG><a name="[53d]"></a>btn_read_backcolor</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, button.o(i.btn_read_backcolor))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = btn_read_backcolor
</UL>
<BR>[Called By]<UL><LI><a href="#[6bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;notepad_play
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_creat
</UL>

<P><STRONG><a name="[53e]"></a>btn_recover_backcolor</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, button.o(i.btn_recover_backcolor))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = btn_recover_backcolor
</UL>
<BR>[Called By]<UL><LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_delete
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_draw_textabtn
</UL>

<P><STRONG><a name="[547]"></a>calc_ctype_show</STRONG> (Thumb, 166 bytes, Stack size 40 bytes, calculator.o(i.calc_ctype_show))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = calc_ctype_show &rArr; gui_show_ptstr &rArr; gui_show_ptfont &rArr; Get_HzMat &rArr; W25QXX_Read &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_fill_rectangle
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_show_ptstr
</UL>
<BR>[Called By]<UL><LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_play
</UL>

<P><STRONG><a name="[548]"></a>calc_exe</STRONG> (Thumb, 418 bytes, Stack size 32 bytes, calculator.o(i.calc_exe))
<BR><BR>[Stack]<UL><LI>Max Depth = 516 + Unknown Stack Size
<LI>Call Chain = calc_exe &rArr; calc_show_res &rArr; atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_memset
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_show_res
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tan
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log10
<LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atof
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_play
</UL>

<P><STRONG><a name="[550]"></a>calc_fmt_show</STRONG> (Thumb, 356 bytes, Stack size 88 bytes, calculator.o(i.calc_fmt_show))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = calc_fmt_show &rArr; calc_show_inbuf &rArr; gui_show_string &rArr; gui_show_ptfont &rArr; Get_HzMat &rArr; W25QXX_Read &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_fill_rectangle
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_show_ptstr
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_memset
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_show_string
<LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_show_inbuf
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_play
</UL>

<P><STRONG><a name="[552]"></a>calc_input_fresh</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, calculator.o(i.calc_input_fresh))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = calc_input_fresh &rArr; calc_show_inbuf &rArr; gui_show_string &rArr; gui_show_ptfont &rArr; Get_HzMat &rArr; W25QXX_Read &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_show_inbuf
<LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_show_flag
<LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_show_exp
</UL>
<BR>[Called By]<UL><LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_play
</UL>

<P><STRONG><a name="[555]"></a>calc_load_ui</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, calculator.o(i.calc_load_ui))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = calc_load_ui &rArr; app_filebrower &rArr; gui_show_strmid &rArr; gui_show_ptstr &rArr; gui_show_ptfont &rArr; Get_HzMat &rArr; W25QXX_Read &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_fill_rectangle
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_filebrower
</UL>
<BR>[Called By]<UL><LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_play
</UL>

<P><STRONG><a name="[556]"></a>calc_play</STRONG> (Thumb, 2312 bytes, Stack size 200 bytes, calculator.o(i.calc_play))
<BR><BR>[Stack]<UL><LI>Max Depth = 872 + Unknown Stack Size
<LI>Call Chain = calc_play &rArr; btn_check &rArr; btn_draw &rArr; btn_draw_picbtn &rArr; minibmp_decode &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Erase_Sector &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_memin_malloc
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_memin_free
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_memset
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_memex_malloc
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_memex_free
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_draw
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_delete
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_creat
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_check
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_show_res
<LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_show_inbuf
<LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_show_flag
<LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_show_exp
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_load_ui
<LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_input_fresh
<LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_fmt_show
<LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_exe
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_ctype_show
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atof
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_task
</UL>

<P><STRONG><a name="[554]"></a>calc_show_exp</STRONG> (Thumb, 234 bytes, Stack size 56 bytes, calculator.o(i.calc_show_exp))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = calc_show_exp &rArr; gui_show_num &rArr; gui_show_ptchar &rArr; gui_draw_bigpoint
</UL>
<BR>[Calls]<UL><LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_fill_rectangle
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_show_ptchar
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_show_num
</UL>
<BR>[Called By]<UL><LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_play
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_show_res
<LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_input_fresh
</UL>

<P><STRONG><a name="[553]"></a>calc_show_flag</STRONG> (Thumb, 78 bytes, Stack size 40 bytes, calculator.o(i.calc_show_flag))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = calc_show_flag &rArr; gui_show_ptchar &rArr; gui_draw_bigpoint
</UL>
<BR>[Calls]<UL><LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_show_ptchar
</UL>
<BR>[Called By]<UL><LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_play
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_show_res
<LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_input_fresh
</UL>

<P><STRONG><a name="[551]"></a>calc_show_inbuf</STRONG> (Thumb, 134 bytes, Stack size 40 bytes, calculator.o(i.calc_show_inbuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = calc_show_inbuf &rArr; gui_show_string &rArr; gui_show_ptfont &rArr; Get_HzMat &rArr; W25QXX_Read &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_fill_rectangle
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_show_string
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_play
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_show_res
<LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_input_fresh
<LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_fmt_show
</UL>

<P><STRONG><a name="[54f]"></a>calc_show_res</STRONG> (Thumb, 308 bytes, Stack size 24 bytes, calculator.o(i.calc_show_res))
<BR><BR>[Stack]<UL><LI>Max Depth = 484 + Unknown Stack Size
<LI>Call Chain = calc_show_res &rArr; atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_memset
<LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_show_inbuf
<LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_show_flag
<LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_show_exp
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atof
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_play
<LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_exe
</UL>

<P><STRONG><a name="[4db]"></a>calendar_alarm_init</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, calendar.o(i.calendar_alarm_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = calendar_alarm_init &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Get
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Alarm_Set
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[6ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysset_play
<LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calendar_alarm_msg
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_system_parameter_init
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_set_default
</UL>

<P><STRONG><a name="[558]"></a>calendar_alarm_msg</STRONG> (Thumb, 702 bytes, Stack size 72 bytes, calendar.o(i.calendar_alarm_msg))
<BR><BR>[Stack]<UL><LI>Max Depth = 768 + Unknown Stack Size
<LI>Call Chain = calendar_alarm_msg &rArr; window_draw &rArr; btn_draw &rArr; btn_draw_picbtn &rArr; minibmp_decode &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Erase_Sector &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_memin_malloc
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_memin_free
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
<LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskResume
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_memex_malloc
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_memex_free
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_draw
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_delete
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_creat
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_show_ptchar
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_show_num
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calendar_alarm_init
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_draw
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_delete
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_creat
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_check
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;watch_task
</UL>

<P><STRONG><a name="[559]"></a>calendar_alarm_ring</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, calendar.o(i.calendar_alarm_ring))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = calendar_alarm_ring &rArr; delay_ms &rArr; delay_us &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_task
</UL>

<P><STRONG><a name="[55a]"></a>calendar_circle_clock_drawpanel</STRONG> (Thumb, 738 bytes, Stack size 112 bytes, calendar.o(i.calendar_circle_clock_drawpanel))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = calendar_circle_clock_drawpanel &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_fill_circle
<LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_bline1
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calendar_play
</UL>

<P><STRONG><a name="[55d]"></a>calendar_circle_clock_showtime</STRONG> (Thumb, 1482 bytes, Stack size 136 bytes, calendar.o(i.calendar_circle_clock_showtime))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = calendar_circle_clock_showtime &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_bline1
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calendar_play
</UL>

<P><STRONG><a name="[55e]"></a>calendar_date_refresh</STRONG> (Thumb, 280 bytes, Stack size 48 bytes, calendar.o(i.calendar_date_refresh))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = calendar_date_refresh &rArr; Show_Str &rArr; Show_Font &rArr; Get_HzMat &rArr; W25QXX_Read &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowxNum
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowString
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_Str
</UL>
<BR>[Called By]<UL><LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calendar_play
</UL>

<P><STRONG><a name="[55f]"></a>calendar_play</STRONG> (Thumb, 1014 bytes, Stack size 88 bytes, calendar.o(i.calendar_play))
<BR><BR>[Stack]<UL><LI>Max Depth = 624 + Unknown Stack Size
<LI>Call Chain = calendar_play &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Erase_Sector &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_memin_malloc
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_memin_free
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Get
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Temprate
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Init
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Get_Temp
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_Str
<LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calendar_date_refresh
<LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calendar_circle_clock_showtime
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calendar_circle_clock_drawpanel
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_memex_malloc
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_memex_free
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_show_ptchar
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_show_num
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_task
</UL>

<P><STRONG><a name="[4e8]"></a>calendar_read_para</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, calendar.o(i.calendar_read_para))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = calendar_read_para &rArr; AT24CXX_Read &rArr; AT24CXX_ReadOneByte &rArr; IIC_Read_Byte &rArr; IIC_NAck &rArr; delay_us &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_system_parameter_init
</UL>

<P><STRONG><a name="[4da]"></a>calendar_save_para</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, calendar.o(i.calendar_save_para))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = calendar_save_para &rArr; AT24CXX_Write &rArr; AT24CXX_WriteOneByte &rArr; IIC_Wait_Ack &rArr; IIC_Stop &rArr; delay_us &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[6ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysset_play
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_system_parameter_init
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_set_default
</UL>

<P><STRONG><a name="[560]"></a>camera_new_pathname</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, camera.o(i.camera_new_pathname))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = camera_new_pathname &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Get
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_play
</UL>

<P><STRONG><a name="[561]"></a>camera_play</STRONG> (Thumb, 1328 bytes, Stack size 88 bytes, camera.o(i.camera_play))
<BR><BR>[Stack]<UL><LI>Max Depth = 880 + Unknown Stack Size
<LI>Call Chain = camera_play &rArr; app_items_sel &rArr; window_draw &rArr; btn_draw &rArr; btn_draw_picbtn &rArr; minibmp_decode &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Erase_Sector &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_memin_malloc
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_memin_free
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Scan
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_Int_Init
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI8_Init
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV7725_Window_Set
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV7725_Special_Effects
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV7725_Light_Mode
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV7725_Init
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV7725_Color_Saturation
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV7725_Brightness
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_WR_Reg
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV7670_Window_Set
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV7670_Special_Effects
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV7670_Light_Mode
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV7670_Init
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV7670_Contrast
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV7670_Color_Saturation
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV7670_Brightness
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp_encode
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_msg_box
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_items_sel
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_refresh
<LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_new_pathname
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_task
</UL>

<P><STRONG><a name="[562]"></a>camera_refresh</STRONG> (Thumb, 230 bytes, Stack size 32 bytes, camera.o(i.camera_refresh))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = camera_refresh &rArr; LCD_Set_Window &rArr; LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteRAM_Prepare
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Set_Window
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Scan_Dir
</UL>
<BR>[Called By]<UL><LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_play
</UL>

<P><STRONG><a name="[629]"></a>char_upper</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, exfuns.o(i.char_upper))
<BR><BR>[Called By]<UL><LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_typetell
</UL>

<P><STRONG><a name="[5a0]"></a>clust2sect</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ff.o(i.clust2sect))
<BR><BR>[Called By]<UL><LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[619]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>

<P><STRONG><a name="[706]"></a>compile</STRONG> (Thumb, 226 bytes, Stack size 36 bytes, nes_ppu.o(i.compile))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = compile
</UL>
<BR>[Called By]<UL><LI><a href="#[700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nes_load_rom
</UL>

<P><STRONG><a name="[438]"></a>convert_from_bytes_to_power_of_two</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, sdio_sdcard.o(i.convert_from_bytes_to_power_of_two))
<BR><BR>[Called By]<UL><LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlock
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultiBlocks
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlock
</UL>

<P><STRONG><a name="[54b]"></a>cos</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, cos.o(i.cos))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = cos &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>
<BR>[Called By]<UL><LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calendar_circle_clock_showtime
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calendar_circle_clock_drawpanel
<LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro_circle_show
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro_circle_panel
<LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_exe
</UL>

<P><STRONG><a name="[29b]"></a>debug_6502</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nes_main.o(i.debug_6502))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = debug_6502 &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[7f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;empty_R
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_xx
</UL>

<P><STRONG><a name="[6f3]"></a>delay_init</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, delay.o(i.delay_init))
<BR><BR>[Called By]<UL><LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_init
<LI><a href="#[6f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nes_clock_set
</UL>

<P><STRONG><a name="[2d5]"></a>delay_ms</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, delay.o(i.delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = delay_ms &rArr; delay_us &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[6c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wireless_play
<LI><a href="#[6bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_play
<LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tomcat_play
<LI><a href="#[6ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysset_play
<LI><a href="#[6be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recorder_play
<LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;picviewer_play
<LI><a href="#[744]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pic_tp_scan
<LI><a href="#[743]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phone_ring
<LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phone_play
<LI><a href="#[6bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;paint_play
<LI><a href="#[6bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;notepad_play
<LI><a href="#[6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_play
<LI><a href="#[6bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nes_play
<LI><a href="#[63a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;font_init
<LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exe_play
<LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebook_play
<LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_play
<LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calendar_play
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calendar_alarm_ring
<LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calendar_alarm_msg
<LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_play
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_play
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_play
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VS_Sine_Test
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VS_Ram_Test
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VS_HD_Reset
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Adjust
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPAD_Init
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Scan
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM9000_Init
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;watch_task
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_task
<LI><a href="#[79e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_usb_update_confirm
<LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_init
<LI><a href="#[795]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_font_update_confirm
<LI><a href="#[794]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_files_erase
<LI><a href="#[790]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_error_show
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_task
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPAD_Reset
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTT2001A_Init
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT9147_Init
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT5206_Init
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Adc_Average
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lsens_Get_Val
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_IRQHandler
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI3_IRQHandler
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI2_IRQHandler
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VS_Soft_Reset
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Init
<LI><a href="#[763]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sms_remind_msg
<LI><a href="#[73f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sim900a_send_cmd
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV7725_Init
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV7670_Init
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM9000_Reset
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM9000_Receive_Packet
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM9000_PHY_WriteReg
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM9000_PHY_ReadReg
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM9000_Get_SpeedAndDuplex
<LI><a href="#[6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_sensors
<LI><a href="#[6e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_bypass
<LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_reset_fifo
<LI><a href="#[6df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_init
<LI><a href="#[642]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_st_biases
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gif_decode
<LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;paint_pen_size_set
<LI><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;paint_pen_color_set
<LI><a href="#[786]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysset_vs1053_vol3d_set
<LI><a href="#[787]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysset_vs1053_eq_set
<LI><a href="#[785]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysset_time_set
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysset_system_update_cpymsg
<LI><a href="#[788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysset_system_update
<LI><a href="#[78a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysset_system_status
<LI><a href="#[789]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysset_system_info
<LI><a href="#[78b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysset_system_about
<LI><a href="#[783]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysset_date_set
<LI><a href="#[782]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysset_bklight_set
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp3_play_song
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_stop_req
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_filelist
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_msg_box
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_muti_remind_msg
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_listbox_select
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_items_sel
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appplay_remote
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appplay_gyro
<LI><a href="#[774]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sms_send_sms
<LI><a href="#[772]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sms_read_all_sms
<LI><a href="#[76e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sms_msg_select
<LI><a href="#[769]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sms_delete_sms
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phone_incall_task
<LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_test
<LI><a href="#[711]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcpserver_remove_timewait
<LI><a href="#[7de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tomcat_play_wav
<LI><a href="#[7d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tomcat_agcspd_set
<LI><a href="#[74f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recorder_enter_rec_mode
<LI><a href="#[74d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recorder_agc_set
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nes_apu_fill_buffer
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_dhcp_task
</UL>

<P><STRONG><a name="[2af]"></a>delay_us</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, delay.o(i.delay_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = delay_us &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
</UL>
<BR>[Called By]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VS_HD_Reset
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ReadReg
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_NAck
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Ack
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Send_Byte
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read_Byte
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_WriteOneByte
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Write_Byte
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Read_AD
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT_IIC_Wait_Ack
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT_IIC_Stop
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT_IIC_Start
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT_IIC_Send_Byte
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT_IIC_Read_Byte
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT_IIC_NAck
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT_IIC_Ack
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Write_Byte
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Rst
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Read_Bit
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Check
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_IIC_NAck
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_IIC_Ack
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_IIC_Wait_Ack
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_IIC_Stop
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_IIC_Start
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_IIC_Send_Byte
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_IIC_Read_Byte
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_WR_Byte
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_Stop
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_Start
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_RD_Byte
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_No_Ack
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_WR_Reg
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_RD_Reg
</UL>

<P><STRONG><a name="[570]"></a>dhcp_arp_reply</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, dhcp.o(i.dhcp_arp_reply))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = dhcp_arp_reply &rArr; dhcp_decline &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_arp_input
</UL>

<P><STRONG><a name="[57a]"></a>dhcp_coarse_tmr</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, dhcp.o(i.dhcp_coarse_tmr))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = dhcp_coarse_tmr &rArr; dhcp_renew &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timer_coarse
</UL>

<P><STRONG><a name="[589]"></a>dhcp_fine_tmr</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, dhcp.o(i.dhcp_fine_tmr))
<BR><BR>[Stack]<UL><LI>Max Depth = 592 + Unknown Stack Size
<LI>Call Chain = dhcp_fine_tmr &rArr; dhcp_timeout &rArr; dhcp_bind &rArr; netif_set_ipaddr &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timer_fine
</UL>

<P><STRONG><a name="[592]"></a>dhcp_release</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, dhcp.o(i.dhcp_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 560 + Unknown Stack Size
<LI>Call Chain = dhcp_release &rArr; netif_set_ipaddr &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_netmask
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_ipaddr
<LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_gw
<LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_down
<LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_msg
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
</UL>

<P><STRONG><a name="[57c]"></a>dhcp_renew</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, dhcp.o(i.dhcp_renew))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = dhcp_renew &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_short
<LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_msg
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_coarse_tmr
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
</UL>

<P><STRONG><a name="[593]"></a>dhcp_start</STRONG> (Thumb, 204 bytes, Stack size 16 bytes, dhcp.o(i.dhcp_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = dhcp_start &rArr; dhcp_discover &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_stop
<LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_remove
<LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_recv
<LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new
<LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_connect
<LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc
<LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_dhcp_task
</UL>

<P><STRONG><a name="[599]"></a>dhcp_stop</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, dhcp.o(i.dhcp_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = dhcp_stop &rArr; udp_remove &rArr; memp_free &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_remove
<LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
<LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_comm_dhcp_delete
</UL>

<P><STRONG><a name="[1d1]"></a>dhcp_timer_coarse</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, timers.o(i.dhcp_timer_coarse))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = dhcp_timer_coarse &rArr; dhcp_coarse_tmr &rArr; dhcp_renew &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_coarse_tmr
<LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
</UL>
<BR>[Address Reference Count : 3]<UL><LI> lwip_comm.o(i.lwip_comm_delete_next_timeout)
<LI> timers.o(i.dhcp_timer_coarse)
<LI> timers.o(i.sys_timeouts_init)
</UL>
<P><STRONG><a name="[1d2]"></a>dhcp_timer_fine</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, timers.o(i.dhcp_timer_fine))
<BR><BR>[Stack]<UL><LI>Max Depth = 600 + Unknown Stack Size
<LI>Call Chain = dhcp_timer_fine &rArr; dhcp_fine_tmr &rArr; dhcp_timeout &rArr; dhcp_bind &rArr; netif_set_ipaddr &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_fine_tmr
<LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
</UL>
<BR>[Address Reference Count : 3]<UL><LI> lwip_comm.o(i.lwip_comm_delete_next_timeout)
<LI> timers.o(i.dhcp_timer_fine)
<LI> timers.o(i.sys_timeouts_init)
</UL>
<P><STRONG><a name="[533]"></a>dir_sdi</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, ff.o(i.dir_sdi))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = dir_sdi &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Erase_Sector &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
</UL>
<BR>[Called By]<UL><LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;picviewer_play
<LI><a href="#[6bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;paint_play
<LI><a href="#[6bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;notepad_play
<LI><a href="#[6bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nes_play
<LI><a href="#[628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_setlabel
<LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exe_play
<LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebook_play
<LI><a href="#[62a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getlabel
<LI><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove
<LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_play_task
</UL>

<P><STRONG><a name="[5a6]"></a>disk_initialize</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, diskio.o(i.disk_initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = disk_initialize &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; SDIO_Send_Data_Cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Init
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[622]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[5a7]"></a>disk_ioctl</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, diskio.o(i.disk_ioctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = disk_ioctl &rArr; __aeabi_ldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[622]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
</UL>

<P><STRONG><a name="[5a8]"></a>disk_read</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, diskio.o(i.disk_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = disk_read &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Read
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadDisk
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[619]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>

<P><STRONG><a name="[639]"></a>disk_status</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, diskio.o(i.disk_status))
<BR><BR>[Called By]<UL><LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[5a9]"></a>disk_write</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, diskio.o(i.disk_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = disk_write &rArr; W25QXX_Write &rArr; W25QXX_Erase_Sector &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteDisk
</UL>
<BR>[Called By]<UL><LI><a href="#[622]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[619]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
</UL>

<P><STRONG><a name="[5aa]"></a>dmp_enable_6x_lp_quat</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, inv_mpu_dmp_motion_driver.o(i.dmp_enable_6x_lp_quat))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = dmp_enable_6x_lp_quat &rArr; mpu_write_mem &rArr; MPU_Write_Len &rArr; MPU_IIC_Wait_Ack &rArr; MPU_IIC_Stop &rArr; delay_us &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_write_mem
<LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_reset_fifo
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_feature
</UL>

<P><STRONG><a name="[5ad]"></a>dmp_enable_feature</STRONG> (Thumb, 468 bytes, Stack size 24 bytes, inv_mpu_dmp_motion_driver.o(i.dmp_enable_feature))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = dmp_enable_feature &rArr; dmp_set_tap_thresh &rArr; mpu_write_mem &rArr; MPU_Write_Len &rArr; MPU_IIC_Wait_Ack &rArr; MPU_IIC_Stop &rArr; delay_us &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_tap_time_multi
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_tap_time
<LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_tap_thresh
<LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_tap_count
<LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_tap_axes
<LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_shake_reject_timeout
<LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_shake_reject_time
<LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_shake_reject_thresh
<LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_lp_quat
<LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_gyro_cal
<LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_6x_lp_quat
<LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_write_mem
<LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_reset_fifo
</UL>
<BR>[Called By]<UL><LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_dmp_init
</UL>

<P><STRONG><a name="[5ae]"></a>dmp_enable_gyro_cal</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, inv_mpu_dmp_motion_driver.o(i.dmp_enable_gyro_cal))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = dmp_enable_gyro_cal &rArr; mpu_write_mem &rArr; MPU_Write_Len &rArr; MPU_IIC_Wait_Ack &rArr; MPU_IIC_Stop &rArr; delay_us &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_write_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_feature
</UL>

<P><STRONG><a name="[5b7]"></a>dmp_enable_lp_quat</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, inv_mpu_dmp_motion_driver.o(i.dmp_enable_lp_quat))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = dmp_enable_lp_quat &rArr; mpu_write_mem &rArr; MPU_Write_Len &rArr; MPU_IIC_Wait_Ack &rArr; MPU_IIC_Stop &rArr; delay_us &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_write_mem
<LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_reset_fifo
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_feature
</UL>

<P><STRONG><a name="[5b8]"></a>dmp_load_motion_driver_firmware</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, inv_mpu_dmp_motion_driver.o(i.dmp_load_motion_driver_firmware))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = dmp_load_motion_driver_firmware &rArr; mpu_load_firmware &rArr; mpu_read_mem &rArr; MPU_Read_Len &rArr; MPU_IIC_Read_Byte &rArr; MPU_IIC_NAck &rArr; delay_us &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_load_firmware
</UL>
<BR>[Called By]<UL><LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_dmp_init
</UL>

<P><STRONG><a name="[5ba]"></a>dmp_read_fifo</STRONG> (Thumb, 324 bytes, Stack size 88 bytes, inv_mpu_dmp_motion_driver.o(i.dmp_read_fifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = dmp_read_fifo &rArr; mpu_read_fifo_stream &rArr; MPU_Read_Len &rArr; MPU_IIC_Read_Byte &rArr; MPU_IIC_NAck &rArr; delay_us &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_reset_fifo
<LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_read_fifo_stream
<LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mget_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_dmp_get_data
</UL>

<P><STRONG><a name="[5bd]"></a>dmp_set_accel_bias</STRONG> (Thumb, 210 bytes, Stack size 40 bytes, inv_mpu_dmp_motion_driver.o(i.dmp_set_accel_bias))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = dmp_set_accel_bias &rArr; mpu_write_mem &rArr; MPU_Write_Len &rArr; MPU_IIC_Wait_Ack &rArr; MPU_IIC_Stop &rArr; delay_us &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_write_mem
<LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_get_accel_sens
</UL>
<BR>[Called By]<UL><LI><a href="#[6e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_self_test
</UL>

<P><STRONG><a name="[5bf]"></a>dmp_set_fifo_rate</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, inv_mpu_dmp_motion_driver.o(i.dmp_set_fifo_rate))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = dmp_set_fifo_rate &rArr; mpu_write_mem &rArr; MPU_Write_Len &rArr; MPU_IIC_Wait_Ack &rArr; MPU_IIC_Stop &rArr; delay_us &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_write_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_dmp_init
</UL>

<P><STRONG><a name="[5c0]"></a>dmp_set_gyro_bias</STRONG> (Thumb, 196 bytes, Stack size 24 bytes, inv_mpu_dmp_motion_driver.o(i.dmp_set_gyro_bias))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = dmp_set_gyro_bias &rArr; mpu_write_mem &rArr; MPU_Write_Len &rArr; MPU_IIC_Wait_Ack &rArr; MPU_IIC_Stop &rArr; delay_us &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_write_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[6e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_self_test
</UL>

<P><STRONG><a name="[5c1]"></a>dmp_set_orientation</STRONG> (Thumb, 246 bytes, Stack size 40 bytes, inv_mpu_dmp_motion_driver.o(i.dmp_set_orientation))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = dmp_set_orientation &rArr; mpu_write_mem &rArr; MPU_Write_Len &rArr; MPU_IIC_Wait_Ack &rArr; MPU_IIC_Stop &rArr; delay_us &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_write_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_dmp_init
</UL>

<P><STRONG><a name="[5b4]"></a>dmp_set_shake_reject_thresh</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, inv_mpu_dmp_motion_driver.o(i.dmp_set_shake_reject_thresh))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = dmp_set_shake_reject_thresh &rArr; mpu_write_mem &rArr; MPU_Write_Len &rArr; MPU_IIC_Wait_Ack &rArr; MPU_IIC_Stop &rArr; delay_us &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_write_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_feature
</UL>

<P><STRONG><a name="[5b5]"></a>dmp_set_shake_reject_time</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, inv_mpu_dmp_motion_driver.o(i.dmp_set_shake_reject_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = dmp_set_shake_reject_time &rArr; mpu_write_mem &rArr; MPU_Write_Len &rArr; MPU_IIC_Wait_Ack &rArr; MPU_IIC_Stop &rArr; delay_us &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_write_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_feature
</UL>

<P><STRONG><a name="[5b6]"></a>dmp_set_shake_reject_timeout</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, inv_mpu_dmp_motion_driver.o(i.dmp_set_shake_reject_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = dmp_set_shake_reject_timeout &rArr; mpu_write_mem &rArr; MPU_Write_Len &rArr; MPU_IIC_Wait_Ack &rArr; MPU_IIC_Stop &rArr; delay_us &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_write_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_feature
</UL>

<P><STRONG><a name="[5b0]"></a>dmp_set_tap_axes</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, inv_mpu_dmp_motion_driver.o(i.dmp_set_tap_axes))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = dmp_set_tap_axes &rArr; mpu_write_mem &rArr; MPU_Write_Len &rArr; MPU_IIC_Wait_Ack &rArr; MPU_IIC_Stop &rArr; delay_us &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_write_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_feature
</UL>

<P><STRONG><a name="[5b1]"></a>dmp_set_tap_count</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, inv_mpu_dmp_motion_driver.o(i.dmp_set_tap_count))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = dmp_set_tap_count &rArr; mpu_write_mem &rArr; MPU_Write_Len &rArr; MPU_IIC_Wait_Ack &rArr; MPU_IIC_Stop &rArr; delay_us &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_write_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_feature
</UL>

<P><STRONG><a name="[5af]"></a>dmp_set_tap_thresh</STRONG> (Thumb, 274 bytes, Stack size 32 bytes, inv_mpu_dmp_motion_driver.o(i.dmp_set_tap_thresh))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = dmp_set_tap_thresh &rArr; mpu_write_mem &rArr; MPU_Write_Len &rArr; MPU_IIC_Wait_Ack &rArr; MPU_IIC_Stop &rArr; delay_us &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_write_mem
<LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_get_accel_fsr
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_feature
</UL>

<P><STRONG><a name="[5b2]"></a>dmp_set_tap_time</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, inv_mpu_dmp_motion_driver.o(i.dmp_set_tap_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = dmp_set_tap_time &rArr; mpu_write_mem &rArr; MPU_Write_Len &rArr; MPU_IIC_Wait_Ack &rArr; MPU_IIC_Stop &rArr; delay_us &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_write_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_feature
</UL>

<P><STRONG><a name="[5b3]"></a>dmp_set_tap_time_multi</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, inv_mpu_dmp_motion_driver.o(i.dmp_set_tap_time_multi))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = dmp_set_tap_time_multi &rArr; mpu_write_mem &rArr; MPU_Write_Len &rArr; MPU_IIC_Wait_Ack &rArr; MPU_IIC_Stop &rArr; delay_us &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_write_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_feature
</UL>

<P><STRONG><a name="[1d9]"></a>do_bind</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, api_msg.o(i.do_bind))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = do_bind &rArr; tcp_bind &rArr; tcp_timer_needed &rArr; sys_timeout &rArr; memp_malloc &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_bind
<LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_bind
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_lib.o(i.netconn_bind)
</UL>
<P><STRONG><a name="[1da]"></a>do_close</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, api_msg.o(i.do_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 560 + Unknown Stack Size
<LI>Call Chain = do_close &rArr; netconn_drain &rArr;  netconn_drain (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_close_internal
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_lib.o(i.netconn_close_shutdown)
</UL>
<P><STRONG><a name="[1db]"></a>do_connect</STRONG> (Thumb, 162 bytes, Stack size 8 bytes, api_msg.o(i.do_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 504 + Unknown Stack Size
<LI>Call Chain = do_connect &rArr; tcp_connect &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_connect
<LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_connect
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_tcp
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_lib.o(i.netconn_connect)
</UL>
<P><STRONG><a name="[1dc]"></a>do_delconn</STRONG> (Thumb, 218 bytes, Stack size 16 bytes, api_msg.o(i.do_delconn))
<BR><BR>[Stack]<UL><LI>Max Depth = 568 + Unknown Stack Size
<LI>Call Chain = do_delconn &rArr; netconn_drain &rArr;  netconn_drain (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_remove
<LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_remove
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_close_internal
<LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_valid
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_lib.o(i.netconn_delete)
</UL>
<P><STRONG><a name="[1dd]"></a>do_disconnect</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, api_msg.o(i.do_disconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 52 + Unknown Stack Size
<LI>Call Chain = do_disconnect &rArr; sys_sem_signal &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_disconnect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_lib.o(i.netconn_disconnect)
</UL>
<P><STRONG><a name="[1de]"></a>do_getaddr</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, api_msg.o(i.do_getaddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = do_getaddr &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_lib.o(i.netconn_getaddr)
</UL>
<P><STRONG><a name="[1df]"></a>do_listen</STRONG> (Thumb, 170 bytes, Stack size 16 bytes, api_msg.o(i.do_listen))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = do_listen &rArr; tcp_listen_with_backlog &rArr; tcp_timer_needed &rArr; sys_timeout &rArr; memp_malloc &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_free
<LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_with_backlog
<LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_arg
<LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_accept
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_set_invalid
<LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_new
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_lib.o(i.netconn_listen_with_backlog)
</UL>
<P><STRONG><a name="[1e0]"></a>do_newconn</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, api_msg.o(i.do_newconn))
<BR><BR>[Stack]<UL><LI>Max Depth = 568 + Unknown Stack Size
<LI>Call Chain = do_newconn &rArr; pcb_new &rArr; tcp_new &rArr; tcp_alloc &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcb_new
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_lib.o(i.netconn_new_with_proto_and_callback)
</UL>
<P><STRONG><a name="[1e1]"></a>do_recv</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, api_msg.o(i.do_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 504 + Unknown Stack Size
<LI>Call Chain = do_recv &rArr; tcp_recved &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_lib.o(i.netconn_recv_data)
</UL>
<P><STRONG><a name="[5d4]"></a>do_scanline_and_dont_draw</STRONG> (Thumb, 158 bytes, Stack size 8 bytes, nes_ppu.o(i.do_scanline_and_dont_draw))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = do_scanline_and_dont_draw &rArr; do_scanline_and_draw &rArr; render_spr
</UL>
<BR>[Calls]<UL><LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sprites_8x16
<LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sprite0_hit
<LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_scanline_and_draw
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spr_enabled
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bg_enabled
</UL>
<BR>[Called By]<UL><LI><a href="#[6f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nes_emulate_frame
</UL>

<P><STRONG><a name="[5d7]"></a>do_scanline_and_draw</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, nes_ppu.o(i.do_scanline_and_draw))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = do_scanline_and_draw &rArr; render_spr
</UL>
<BR>[Calls]<UL><LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;render_spr
<LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;render_bg
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spr_enabled
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bg_enabled
<LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[6fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scanline_draw
<LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_scanline_and_dont_draw
</UL>

<P><STRONG><a name="[1e2]"></a>do_send</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, api_msg.o(i.do_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = do_send &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
<LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_send
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto
<LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_lib.o(i.netconn_send)
</UL>
<P><STRONG><a name="[1e3]"></a>do_write</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, api_msg.o(i.do_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 504 + Unknown Stack Size
<LI>Call Chain = do_write &rArr; do_writemore &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_writemore
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_lib.o(i.netconn_write_partly)
</UL>
<P><STRONG><a name="[5e1]"></a>ebook_play</STRONG> (Thumb, 946 bytes, Stack size 136 bytes, ebook.o(i.ebook_play))
<BR><BR>[Stack]<UL><LI>Max Depth = 904 + Unknown Stack Size
<LI>Call Chain = ebook_play &rArr; window_msg_box &rArr; window_draw &rArr; btn_draw &rArr; btn_draw_picbtn &rArr; minibmp_decode &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Erase_Sector &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spb_init
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_mem_perused
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_memin_malloc
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_memin_free
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_leave
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_enter
<LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memo_draw_memo
<LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memo_delete
<LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memo_creat
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memo_check
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_path_name
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_memset
<LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filelistbox_rebuild_filelist
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filelistbox_draw_listbox
<LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filelistbox_delete
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filelistbox_creat
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filelistbox_check
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filelistbox_back
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filelistbox_add_disk
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filelist_search
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_msg_box
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_show_string
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spb_delete
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_draw
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_delete
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_creat
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_check
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gui_tcbar
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_filebrower
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_task
</UL>

<P><STRONG><a name="[5e8]"></a>edit_add_text</STRONG> (Thumb, 214 bytes, Stack size 32 bytes, edit.o(i.edit_add_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = edit_add_text &rArr; edit_draw_text &rArr; edit_show_cursor &rArr; gui_show_ptstr &rArr; gui_show_ptfont &rArr; Get_HzMat &rArr; W25QXX_Read &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_memin_malloc
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_memin_free
<LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_draw_text
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[774]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sms_send_sms
<LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_test
</UL>

<P><STRONG><a name="[5ea]"></a>edit_check</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, edit.o(i.edit_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = edit_check &rArr; edit_cursor_set &rArr; edit_show_cursor &rArr; gui_show_ptstr &rArr; gui_show_ptfont &rArr; Get_HzMat &rArr; W25QXX_Read &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_cursor_set
<LI><a href="#[5eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_cursor_flash
</UL>
<BR>[Called By]<UL><LI><a href="#[774]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sms_send_sms
<LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_test
</UL>

<P><STRONG><a name="[5ed]"></a>edit_creat</STRONG> (Thumb, 132 bytes, Stack size 40 bytes, edit.o(i.edit_creat))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = edit_creat &rArr; gui_memin_malloc &rArr; mymalloc &rArr; my_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_memin_malloc
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_memset
<LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[774]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sms_send_sms
<LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_test
</UL>

<P><STRONG><a name="[5eb]"></a>edit_cursor_flash</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, edit.o(i.edit_cursor_flash))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = edit_cursor_flash &rArr; edit_show_cursor &rArr; gui_show_ptstr &rArr; gui_show_ptfont &rArr; Get_HzMat &rArr; W25QXX_Read &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_disabs
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_show_cursor
</UL>
<BR>[Called By]<UL><LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_check
</UL>

<P><STRONG><a name="[5ec]"></a>edit_cursor_set</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, edit.o(i.edit_cursor_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = edit_cursor_set &rArr; edit_show_cursor &rArr; gui_show_ptstr &rArr; gui_show_ptfont &rArr; Get_HzMat &rArr; W25QXX_Read &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_show_cursor
<LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_string_forwardgbk_count
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_check
</UL>

<P><STRONG><a name="[5ee]"></a>edit_delete</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, edit.o(i.edit_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = edit_delete &rArr; gui_memin_free &rArr; myfree &rArr; my_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_memin_free
</UL>
<BR>[Called By]<UL><LI><a href="#[774]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sms_send_sms
<LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_creat
<LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_test
</UL>

<P><STRONG><a name="[5f1]"></a>edit_draw</STRONG> (Thumb, 208 bytes, Stack size 16 bytes, edit.o(i.edit_draw))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = edit_draw &rArr; edit_draw_text &rArr; edit_show_cursor &rArr; gui_show_ptstr &rArr; gui_show_ptfont &rArr; Get_HzMat &rArr; W25QXX_Read &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_vline
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_hline
<LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_draw_text
</UL>
<BR>[Called By]<UL><LI><a href="#[774]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sms_send_sms
<LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_test
<LI><a href="#[70b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_edit_colorset
</UL>

<P><STRONG><a name="[5f2]"></a>edit_draw_cursor</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, edit.o(i.edit_draw_cursor))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = edit_draw_cursor
</UL>
<BR>[Calls]<UL><LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_get_cursorxpos
</UL>
<BR>[Called By]<UL><LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_show_cursor
</UL>

<P><STRONG><a name="[5e9]"></a>edit_draw_text</STRONG> (Thumb, 130 bytes, Stack size 40 bytes, edit.o(i.edit_draw_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = edit_draw_text &rArr; edit_show_cursor &rArr; gui_show_ptstr &rArr; gui_show_ptfont &rArr; Get_HzMat &rArr; W25QXX_Read &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_fill_rectangle
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_show_ptstr
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_show_cursor
</UL>
<BR>[Called By]<UL><LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_draw
<LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_add_text
</UL>

<P><STRONG><a name="[5f3]"></a>edit_get_cursorxpos</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, edit.o(i.edit_get_cursorxpos))
<BR><BR>[Called By]<UL><LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_show_cursor
<LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_draw_cursor
</UL>

<P><STRONG><a name="[5ef]"></a>edit_show_cursor</STRONG> (Thumb, 160 bytes, Stack size 40 bytes, edit.o(i.edit_show_cursor))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = edit_show_cursor &rArr; gui_show_ptstr &rArr; gui_show_ptfont &rArr; Get_HzMat &rArr; W25QXX_Read &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_show_ptstr
<LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_get_cursorxpos
<LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_draw_cursor
</UL>
<BR>[Called By]<UL><LI><a href="#[774]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sms_send_sms
<LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_test
<LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_draw_text
<LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_cursor_set
<LI><a href="#[5eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_cursor_flash
</UL>

<P><STRONG><a name="[6f9]"></a>end_vblank</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, nes_ppu.o(i.end_vblank))
<BR><BR>[Called By]<UL><LI><a href="#[6f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nes_emulate_frame
</UL>

<P><STRONG><a name="[5f7]"></a>etharp_cleanup_netif</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, etharp.o(i.etharp_cleanup_netif))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = etharp_cleanup_netif &rArr; etharp_free_entry &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_free_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_down
</UL>

<P><STRONG><a name="[1bf]"></a>etharp_output</STRONG> (Thumb, 290 bytes, Stack size 32 bytes, etharp.o(i.etharp_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = etharp_output &rArr; etharp_query &rArr; etharp_request &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast
<LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_send_ip
<LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output_to_arp_index
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ethernetif.o(i.ethernetif_init)
</UL>
<P><STRONG><a name="[579]"></a>etharp_query</STRONG> (Thumb, 292 bytes, Stack size 56 bytes, etharp.o(i.etharp_query))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = etharp_query &rArr; etharp_request &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
<LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy
<LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast
<LI><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request
<LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_send_ip
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_find_entry
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_check
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
</UL>

<P><STRONG><a name="[5fe]"></a>etharp_request</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, etharp.o(i.etharp_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = etharp_request &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
</UL>
<BR>[Called By]<UL><LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_up
<LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output_to_arp_index
</UL>

<P><STRONG><a name="[509]"></a>etharp_tmr</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, etharp.o(i.etharp_tmr))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = etharp_tmr &rArr; etharp_free_entry &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_free_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_timer
</UL>

<P><STRONG><a name="[602]"></a>ethernet_input</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, etharp.o(i.ethernet_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 664 + Unknown Stack Size
<LI>Call Chain = ethernet_input &rArr; ip_input &rArr; tcp_input &rArr; tcp_process &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
<LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_arp_input
<LI><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_thread
</UL>

<P><STRONG><a name="[1d5]"></a>ethernetif_init</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, ethernetif.o(i.ethernetif_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = ethernetif_init &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip_comm.o(i.lwip_comm_init)
</UL>
<P><STRONG><a name="[605]"></a>ethernetif_input</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, ethernetif.o(i.ethernetif_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = ethernetif_input &rArr; DM9000_Receive_Packet &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM9000_Receive_Packet
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_dm9000_input_task
</UL>

<P><STRONG><a name="[606]"></a>exe_play</STRONG> (Thumb, 704 bytes, Stack size 136 bytes, exeplay.o(i.exe_play))
<BR><BR>[Stack]<UL><LI>Max Depth = 904 + Unknown Stack Size
<LI>Call Chain = exe_play &rArr; window_msg_box &rArr; window_draw &rArr; btn_draw &rArr; btn_draw_picbtn &rArr; minibmp_decode &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Erase_Sector &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_memin_malloc
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_memin_free
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Soft_Reset
<LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_path_name
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_memset
<LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filelistbox_rebuild_filelist
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filelistbox_draw_listbox
<LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filelistbox_delete
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filelistbox_creat
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filelistbox_check
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filelistbox_back
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filelistbox_add_disk
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filelist_search
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_msg_box
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_draw
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_delete
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_creat
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_check
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_filebrower
<LI><a href="#[607]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exeplay_write_appmask
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_task
</UL>

<P><STRONG><a name="[609]"></a>exeplay_app_check</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, exeplay.o(i.exeplay_app_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = exeplay_app_check
</UL>
<BR>[Calls]<UL><LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_SRAM_Init
<LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSR_MSP
<LI><a href="#[607]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exeplay_write_appmask
</UL>
<BR>[Called By]<UL><LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_init
</UL>

<P><STRONG><a name="[607]"></a>exeplay_write_appmask</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, exeplay.o(i.exeplay_write_appmask))
<BR><BR>[Called By]<UL><LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exeplay_app_check
<LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exe_play
</UL>

<P><STRONG><a name="[60c]"></a>exf_copy</STRONG> (Thumb, 296 bytes, Stack size 72 bytes, exfuns.o(i.exf_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 608 + Unknown Stack Size
<LI>Call Chain = exf_copy &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Erase_Sector &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mymalloc
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myfree
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
</UL>
<BR>[Called By]<UL><LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exf_fdcopy
</UL>

<P><STRONG><a name="[4ed]"></a>exf_fdcopy</STRONG> (Thumb, 464 bytes, Stack size 72 bytes, exfuns.o(i.exf_fdcopy))
<BR><BR>[Stack]<UL><LI>Max Depth = 680 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = exf_fdcopy &rArr;  exf_fdcopy (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mymalloc
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myfree
<LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exf_get_src_dname
<LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exf_fdcopy
<LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exf_copy
<LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_system_update
<LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exf_fdcopy
</UL>

<P><STRONG><a name="[4eb]"></a>exf_fdsize</STRONG> (Thumb, 230 bytes, Stack size 32 bytes, exfuns.o(i.exf_fdsize))
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = exf_fdsize &rArr;  exf_fdsize (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mymalloc
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myfree
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exf_fdsize
<LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_system_update
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exf_fdsize
</UL>

<P><STRONG><a name="[60d]"></a>exf_get_src_dname</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, exfuns.o(i.exf_get_src_dname))
<BR><BR>[Called By]<UL><LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exf_fdcopy
</UL>

<P><STRONG><a name="[60e]"></a>exf_getfree</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, exfuns.o(i.exf_getfree))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = exf_getfree &rArr; f_getfree &rArr; find_volume &rArr; check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Erase_Sector &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[60f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getfree
</UL>
<BR>[Called By]<UL><LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_init
<LI><a href="#[789]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysset_system_info
</UL>

<P><STRONG><a name="[610]"></a>exfuns_init</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, exfuns.o(i.exfuns_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = exfuns_init &rArr; mymalloc &rArr; my_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mymalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_init
</UL>

<P><STRONG><a name="[4e4]"></a>f_close</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, ff.o(i.f_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = f_close &rArr; f_sync &rArr; sync_fs &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Erase_Sector &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_leave
<LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
</UL>
<BR>[Called By]<UL><LI><a href="#[6be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recorder_play
<LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phone_play
<LI><a href="#[6bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;notepad_play
<LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calendar_play
<LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calendar_alarm_msg
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_system_file_check
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mf_close
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp_encode
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpg_decode
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gif_decode
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stdbmp_decode
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;minibmp_decode
<LI><a href="#[7df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updata_fontx
<LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exf_copy
<LI><a href="#[6fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nes_load
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp3_play_song
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phone_incall_task
<LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_open
</UL>

<P><STRONG><a name="[615]"></a>f_closedir</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, ff.o(i.f_closedir))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = f_closedir &rArr; validate &rArr; ff_enter &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_leave
<LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
</UL>
<BR>[Called By]<UL><LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filelistbox_scan_filelist
</UL>

<P><STRONG><a name="[60f]"></a>f_getfree</STRONG> (Thumb, 198 bytes, Stack size 48 bytes, ff.o(i.f_getfree))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = f_getfree &rArr; find_volume &rArr; check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Erase_Sector &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_leave
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>
<BR>[Called By]<UL><LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exf_getfree
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mf_showfree
<LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filelistbox_show_info
</UL>

<P><STRONG><a name="[617]"></a>f_getlabel</STRONG> (Thumb, 148 bytes, Stack size 72 bytes, ff.o(i.f_getlabel))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = f_getlabel &rArr; dir_read &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Erase_Sector &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_leave
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
</UL>
<BR>[Called By]<UL><LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filelistbox_add_disk
</UL>

<P><STRONG><a name="[618]"></a>f_gets</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, ff.o(i.f_gets))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = f_gets &rArr; f_read &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Erase_Sector &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
</UL>
<BR>[Called By]<UL><LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lrc_show_linelrc
<LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lrc_read
</UL>

<P><STRONG><a name="[619]"></a>f_lseek</STRONG> (Thumb, 536 bytes, Stack size 40 bytes, ff.o(i.f_lseek))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = f_lseek &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Erase_Sector &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_leave
<LI><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clmt_clust
</UL>
<BR>[Called By]<UL><LI><a href="#[6be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recorder_play
<LI><a href="#[6bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;notepad_play
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mf_lseek
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_in_func
<LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gif_getdatablock
<LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gif_drawimage
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;minibmp_decode
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lrc_show_linelrc
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp3_file_seek
</UL>

<P><STRONG><a name="[4ec]"></a>f_mkdir</STRONG> (Thumb, 396 bytes, Stack size 104 bytes, ff.o(i.f_mkdir))
<BR><BR>[Stack]<UL><LI>Max Depth = 544 + Unknown Stack Size
<LI>Call Chain = f_mkdir &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Erase_Sector &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
<LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memfree
<LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memalloc
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_leave
<LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[61f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
</UL>
<BR>[Called By]<UL><LI><a href="#[6be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recorder_play
<LI><a href="#[6bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;paint_play
<LI><a href="#[6bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;notepad_play
<LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_play
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_system_update
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mf_mkdir
<LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exf_fdcopy
</UL>

<P><STRONG><a name="[622]"></a>f_mkfs</STRONG> (Thumb, 1334 bytes, Stack size 72 bytes, ff.o(i.f_mkfs))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = f_mkfs &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Erase_Sector &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
<LI><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
<LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
</UL>
<BR>[Called By]<UL><LI><a href="#[79e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_usb_update_confirm
<LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_init
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mf_fmkfs
</UL>

<P><STRONG><a name="[624]"></a>f_mount</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, ff.o(i.f_mount))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = f_mount &rArr; find_volume &rArr; check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Erase_Sector &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_leave
<LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
<LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;watch_task
<LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_init
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mf_mount
</UL>

<P><STRONG><a name="[4e3]"></a>f_open</STRONG> (Thumb, 356 bytes, Stack size 96 bytes, ff.o(i.f_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 536 + Unknown Stack Size
<LI>Call Chain = f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Erase_Sector &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
<LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memfree
<LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memalloc
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_leave
<LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[61f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>
<BR>[Called By]<UL><LI><a href="#[79d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_font
<LI><a href="#[6be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recorder_play
<LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phone_play
<LI><a href="#[6bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;notepad_play
<LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exe_play
<LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebook_play
<LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calendar_play
<LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calendar_alarm_msg
<LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_play
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_system_file_check
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mf_open
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp_encode
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpg_decode
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gif_decode
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stdbmp_decode
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;minibmp_decode
<LI><a href="#[7df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updata_fontx
<LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exf_copy
<LI><a href="#[6fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nes_load
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp3_play_song
<LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lrc_read
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phone_incall_task
<LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_open
</UL>

<P><STRONG><a name="[531]"></a>f_opendir</STRONG> (Thumb, 140 bytes, Stack size 40 bytes, ff.o(i.f_opendir))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = f_opendir &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Erase_Sector &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memfree
<LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memalloc
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_leave
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>
<BR>[Called By]<UL><LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;picviewer_play
<LI><a href="#[6bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;paint_play
<LI><a href="#[6bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;notepad_play
<LI><a href="#[6bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nes_play
<LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exe_play
<LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebook_play
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mf_scan_files
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mf_opendir
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exf_fdsize
<LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exf_fdcopy
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filelistbox_scan_filelist
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_play_task
</UL>

<P><STRONG><a name="[557]"></a>f_read</STRONG> (Thumb, 372 bytes, Stack size 40 bytes, ff.o(i.f_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = f_read &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Erase_Sector &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_leave
<LI><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clmt_clust
</UL>
<BR>[Called By]<UL><LI><a href="#[6be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recorder_play
<LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phone_play
<LI><a href="#[6bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;notepad_play
<LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exe_play
<LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebook_play
<LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calendar_play
<LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calendar_alarm_msg
<LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_play
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mf_read
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_in_func
<LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gif_readextension
<LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gif_readcolortbl
<LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gif_getinfo
<LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gif_getdatablock
<LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gif_drawimage
<LI><a href="#[648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gif_dispimage
<LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gif_check_head
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stdbmp_decode
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;minibmp_decode
<LI><a href="#[7df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updata_fontx
<LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exf_copy
<LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_gets
<LI><a href="#[6fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nes_load
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp3_play_song
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phone_incall_task
<LI><a href="#[63d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_read
<LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_open
</UL>

<P><STRONG><a name="[535]"></a>f_readdir</STRONG> (Thumb, 128 bytes, Stack size 40 bytes, ff.o(i.f_readdir))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = f_readdir &rArr; dir_read &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Erase_Sector &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memfree
<LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memalloc
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_leave
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fileinfo
<LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>
<BR>[Called By]<UL><LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;picviewer_play
<LI><a href="#[6bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;paint_play
<LI><a href="#[6bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;notepad_play
<LI><a href="#[6bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nes_play
<LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exe_play
<LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebook_play
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mf_scan_files
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mf_readdir
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exf_fdsize
<LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exf_fdcopy
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filelistbox_scan_filelist
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_play_task
</UL>

<P><STRONG><a name="[627]"></a>f_rename</STRONG> (Thumb, 280 bytes, Stack size 144 bytes, ff.o(i.f_rename))
<BR><BR>[Stack]<UL><LI>Max Depth = 584 + Unknown Stack Size
<LI>Call Chain = f_rename &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Erase_Sector &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memfree
<LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memalloc
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_leave
<LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
<LI><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove
<LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mf_rename
</UL>

<P><STRONG><a name="[628]"></a>f_setlabel</STRONG> (Thumb, 378 bytes, Stack size 80 bytes, ff.o(i.f_setlabel))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = f_setlabel &rArr; dir_read &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Erase_Sector &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_convert
<LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_leave
<LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_wtoupper
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_chr
</UL>
<BR>[Called By]<UL><LI><a href="#[79e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_usb_update_confirm
<LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_init
</UL>

<P><STRONG><a name="[613]"></a>f_sync</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, ff.o(i.f_sync))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = f_sync &rArr; sync_fs &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Erase_Sector &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_leave
<LI><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
</UL>

<P><STRONG><a name="[4a9]"></a>f_typetell</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, exfuns.o(i.f_typetell))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = f_typetell &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_upper
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;picviewer_play
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_load_picfile
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp3_play_song
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filelistbox_scan_filelist
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_play_task
</UL>

<P><STRONG><a name="[62a]"></a>f_unlink</STRONG> (Thumb, 188 bytes, Stack size 104 bytes, ff.o(i.f_unlink))
<BR><BR>[Stack]<UL><LI>Max Depth = 512 + Unknown Stack Size
<LI>Call Chain = f_unlink &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Erase_Sector &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memfree
<LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memalloc
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_leave
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[61f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove
<LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mf_unlink
</UL>

<P><STRONG><a name="[53c]"></a>f_write</STRONG> (Thumb, 428 bytes, Stack size 40 bytes, ff.o(i.f_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = f_write &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Erase_Sector &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_leave
<LI><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clmt_clust
</UL>
<BR>[Called By]<UL><LI><a href="#[6be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recorder_play
<LI><a href="#[6bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;notepad_play
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mf_write
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp_encode
<LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exf_copy
</UL>

<P><STRONG><a name="[56c]"></a>ff_convert</STRONG> (Thumb, 106 bytes, Stack size 40 bytes, mycc936.o(i.ff_convert))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = ff_convert &rArr; W25QXX_Read &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_setlabel
<LI><a href="#[765]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sim900a_unigbk_exchange
<LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fileinfo
<LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>

<P><STRONG><a name="[532]"></a>ff_enter</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, diskio.o(i.ff_enter))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = ff_enter &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;picviewer_play
<LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebook_play
<LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_play_task
</UL>

<P><STRONG><a name="[534]"></a>ff_leave</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, diskio.o(i.ff_leave))
<BR><BR>[Calls]<UL><LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;picviewer_play
<LI><a href="#[628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_setlabel
<LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebook_play
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[62a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[619]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getlabel
<LI><a href="#[60f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getfree
<LI><a href="#[615]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_closedir
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_play_task
</UL>

<P><STRONG><a name="[61c]"></a>ff_memalloc</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, diskio.o(i.ff_memalloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ff_memalloc &rArr; mymalloc &rArr; my_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mymalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[62a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
</UL>

<P><STRONG><a name="[621]"></a>ff_memfree</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, diskio.o(i.ff_memfree))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ff_memfree &rArr; myfree &rArr; my_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myfree
</UL>
<BR>[Called By]<UL><LI><a href="#[62a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
</UL>

<P><STRONG><a name="[56f]"></a>ff_wtoupper</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, mycc936.o(i.ff_wtoupper))
<BR><BR>[Called By]<UL><LI><a href="#[628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_setlabel
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>

<P><STRONG><a name="[62b]"></a>filelist_delete</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, filelistbox.o(i.filelist_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = filelist_delete &rArr; gui_memex_free &rArr; myfree &rArr; my_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filelist_search
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_memex_free
</UL>
<BR>[Called By]<UL><LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filelistbox_scan_filelist
<LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filelistbox_delete
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filelistbox_check
</UL>

<P><STRONG><a name="[516]"></a>filelist_search</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, filelistbox.o(i.filelist_search))
<BR><BR>[Called By]<UL><LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;picviewer_play
<LI><a href="#[6bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;paint_play
<LI><a href="#[6bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;notepad_play
<LI><a href="#[6bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nes_play
<LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exe_play
<LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebook_play
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_filelist
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filelistbox_check
<LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filelistbox_show_info
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filelistbox_draw_list
<LI><a href="#[630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filelistbox_check_filelist
<LI><a href="#[62b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filelist_delete
</UL>

<P><STRONG><a name="[514]"></a>filelistbox_add_disk</STRONG> (Thumb, 202 bytes, Stack size 48 bytes, filelistbox.o(i.filelistbox_add_disk))
<BR><BR>[Stack]<UL><LI>Max Depth = 512 + Unknown Stack Size
<LI>Call Chain = filelistbox_add_disk &rArr; f_getlabel &rArr; dir_read &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Erase_Sector &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getlabel
<LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filelistbox_addlist
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;picviewer_play
<LI><a href="#[6bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;paint_play
<LI><a href="#[6bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;notepad_play
<LI><a href="#[6bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nes_play
<LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exe_play
<LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebook_play
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filelistbox_scan_filelist
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_filelist
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filelistbox_check
</UL>

<P><STRONG><a name="[62c]"></a>filelistbox_addlist</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, filelistbox.o(i.filelistbox_addlist))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = filelistbox_addlist &rArr; gui_memex_malloc &rArr; mymalloc &rArr; my_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_memset
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_memex_malloc
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_memex_free
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filelistbox_scan_filelist
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filelistbox_add_disk
<LI><a href="#[630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filelistbox_check_filelist
</UL>

<P><STRONG><a name="[517]"></a>filelistbox_back</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, filelistbox.o(i.filelistbox_back))
<BR><BR>[Stack]<UL><LI>Max Depth = 624 + Unknown Stack Size
<LI>Call Chain = filelistbox_back &rArr; filelistbox_scan_filelist &rArr; filelistbox_add_disk &rArr; f_getlabel &rArr; dir_read &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Erase_Sector &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_memin_free
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filelistbox_scan_filelist
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filelistbox_draw_listbox
<LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filelistbox_get_pathdepth
</UL>
<BR>[Called By]<UL><LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;picviewer_play
<LI><a href="#[6bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;paint_play
<LI><a href="#[6bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;notepad_play
<LI><a href="#[6bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nes_play
<LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exe_play
<LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebook_play
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_filelist
<LI><a href="#[630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filelistbox_check_filelist
</UL>

<P><STRONG><a name="[515]"></a>filelistbox_check</STRONG> (Thumb, 1200 bytes, Stack size 56 bytes, filelistbox.o(i.filelistbox_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 704 + Unknown Stack Size
<LI>Call Chain = filelistbox_check &rArr; filelistbox_check_filelist &rArr; filelistbox_back &rArr; filelistbox_scan_filelist &rArr; filelistbox_add_disk &rArr; f_getlabel &rArr; dir_read &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Erase_Sector &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_fill_rectangle
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_show_ptstr
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filelistbox_draw_listbox
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filelistbox_add_disk
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filelist_search
<LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_disabs
<LI><a href="#[62e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scrollbar_check
<LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_icos
<LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filelistbox_show_info
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filelistbox_draw_list
<LI><a href="#[630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filelistbox_check_filelist
<LI><a href="#[62b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filelist_delete
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;picviewer_play
<LI><a href="#[6bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;paint_play
<LI><a href="#[6bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;notepad_play
<LI><a href="#[6bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nes_play
<LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exe_play
<LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebook_play
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_filelist
</UL>

<P><STRONG><a name="[630]"></a>filelistbox_check_filelist</STRONG> (Thumb, 302 bytes, Stack size 24 bytes, filelistbox.o(i.filelistbox_check_filelist))
<BR><BR>[Stack]<UL><LI>Max Depth = 648 + Unknown Stack Size
<LI>Call Chain = filelistbox_check_filelist &rArr; filelistbox_back &rArr; filelistbox_scan_filelist &rArr; filelistbox_add_disk &rArr; f_getlabel &rArr; dir_read &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Erase_Sector &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_memin_malloc
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_memin_free
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filelistbox_scan_filelist
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_path_name
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filelistbox_draw_listbox
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filelistbox_back
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filelist_search
<LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filelistbox_get_pathdepth
<LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filelistbox_addlist
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filelistbox_check
</UL>

<P><STRONG><a name="[510]"></a>filelistbox_creat</STRONG> (Thumb, 248 bytes, Stack size 40 bytes, filelistbox.o(i.filelistbox_creat))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = filelistbox_creat &rArr; scrollbar_creat &rArr; gui_memin_malloc &rArr; mymalloc &rArr; my_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_memin_malloc
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_memin_free
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_memset
<LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scrollbar_creat
</UL>
<BR>[Called By]<UL><LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;picviewer_play
<LI><a href="#[6bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;paint_play
<LI><a href="#[6bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;notepad_play
<LI><a href="#[6bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nes_play
<LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exe_play
<LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebook_play
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_filelist
</UL>

<P><STRONG><a name="[518]"></a>filelistbox_delete</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, filelistbox.o(i.filelistbox_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = filelistbox_delete &rArr; filelist_delete &rArr; gui_memex_free &rArr; myfree &rArr; my_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_memin_free
<LI><a href="#[62b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filelist_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;picviewer_play
<LI><a href="#[6bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;paint_play
<LI><a href="#[6bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;notepad_play
<LI><a href="#[6bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nes_play
<LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exe_play
<LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebook_play
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_filelist
</UL>

<P><STRONG><a name="[62f]"></a>filelistbox_draw_list</STRONG> (Thumb, 330 bytes, Stack size 56 bytes, filelistbox.o(i.filelistbox_draw_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = filelistbox_draw_list &rArr; gui_show_ptstr &rArr; gui_show_ptfont &rArr; Get_HzMat &rArr; W25QXX_Read &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_fill_rectangle
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_show_ptstr
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filelist_search
<LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_icos
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filelistbox_draw_listbox
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filelistbox_check
</UL>

<P><STRONG><a name="[512]"></a>filelistbox_draw_listbox</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, filelistbox.o(i.filelistbox_draw_listbox))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = filelistbox_draw_listbox &rArr; filelistbox_show_info &rArr; f_getfree &rArr; find_volume &rArr; check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Erase_Sector &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_fill_rectangle
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_hline
<LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scrollbar_draw_scrollbar
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filelistbox_show_path
<LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filelistbox_show_info
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filelistbox_draw_list
</UL>
<BR>[Called By]<UL><LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;picviewer_play
<LI><a href="#[6bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;paint_play
<LI><a href="#[6bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;notepad_play
<LI><a href="#[6bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nes_play
<LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exe_play
<LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebook_play
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_filelist
<LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filelistbox_rebuild_filelist
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filelistbox_check
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filelistbox_back
<LI><a href="#[630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filelistbox_check_filelist
</UL>

<P><STRONG><a name="[62d]"></a>filelistbox_get_pathdepth</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, filelistbox.o(i.filelistbox_get_pathdepth))
<BR><BR>[Called By]<UL><LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filelistbox_back
<LI><a href="#[630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filelistbox_check_filelist
</UL>

<P><STRONG><a name="[5e3]"></a>filelistbox_rebuild_filelist</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, filelistbox.o(i.filelistbox_rebuild_filelist))
<BR><BR>[Stack]<UL><LI>Max Depth = 624 + Unknown Stack Size
<LI>Call Chain = filelistbox_rebuild_filelist &rArr; filelistbox_scan_filelist &rArr; filelistbox_add_disk &rArr; f_getlabel &rArr; dir_read &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Erase_Sector &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filelistbox_scan_filelist
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filelistbox_draw_listbox
</UL>
<BR>[Called By]<UL><LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;picviewer_play
<LI><a href="#[6bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nes_play
<LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exe_play
<LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebook_play
</UL>

<P><STRONG><a name="[511]"></a>filelistbox_scan_filelist</STRONG> (Thumb, 354 bytes, Stack size 96 bytes, filelistbox.o(i.filelistbox_scan_filelist))
<BR><BR>[Stack]<UL><LI>Max Depth = 608 + Unknown Stack Size
<LI>Call Chain = filelistbox_scan_filelist &rArr; filelistbox_add_disk &rArr; f_getlabel &rArr; dir_read &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Erase_Sector &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_memin_malloc
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_memin_free
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_typetell
<LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[615]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_closedir
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_memset
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filelistbox_add_disk
<LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_memin_realloc
<LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filelistbox_addlist
<LI><a href="#[62b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filelist_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_filelist
<LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filelistbox_rebuild_filelist
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filelistbox_back
<LI><a href="#[630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filelistbox_check_filelist
</UL>

<P><STRONG><a name="[632]"></a>filelistbox_show_info</STRONG> (Thumb, 500 bytes, Stack size 64 bytes, filelistbox.o(i.filelistbox_show_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = filelistbox_show_info &rArr; f_getfree &rArr; find_volume &rArr; check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Erase_Sector &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_memin_malloc
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_memin_free
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_fill_rectangle
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_show_ptstr
<LI><a href="#[60f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getfree
<LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_num2str
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_memset
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filelist_search
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_hline
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filelistbox_draw_listbox
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filelistbox_check
</UL>

<P><STRONG><a name="[634]"></a>filelistbox_show_path</STRONG> (Thumb, 280 bytes, Stack size 56 bytes, filelistbox.o(i.filelistbox_show_path))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = filelistbox_show_path &rArr; gui_show_ptstr &rArr; gui_show_ptfont &rArr; Get_HzMat &rArr; W25QXX_Read &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_show_ptstr
<LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_icosalpha
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filelistbox_draw_listbox
</UL>

<P><STRONG><a name="[63a]"></a>font_init</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, fontupd.o(i.font_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = font_init &rArr; delay_ms &rArr; delay_us &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Init
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_init
</UL>

<P><STRONG><a name="[97]"></a>fputc</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, usart.o(i.fputc))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_file.o(.text)
</UL>
<P><STRONG><a name="[496]"></a>frexp</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, frexp.o(i.frexp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = frexp
</UL>
<BR>[Calls]<UL><LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_tofloat
</UL>

<P><STRONG><a name="[669]"></a>fs_bytes_left</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fs.o(i.fs_bytes_left))
<BR><BR>[Called By]<UL><LI><a href="#[668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_send_data
</UL>

<P><STRONG><a name="[66d]"></a>fs_close</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fs.o(i.fs_close))
<BR><BR>[Called By]<UL><LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_state_free
</UL>

<P><STRONG><a name="[63c]"></a>fs_open</STRONG> (Thumb, 236 bytes, Stack size 32 bytes, fs.o(i.fs_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 568 + Unknown Stack Size
<LI>Call Chain = fs_open &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Erase_Sector &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mymalloc
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myfree
<LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spb_delete
<LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_free
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_get_404_file
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_find_file
</UL>

<P><STRONG><a name="[63d]"></a>fs_read</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, fs.o(i.fs_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = fs_read &rArr; f_read &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Erase_Sector &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_send_data
</UL>

<P><STRONG><a name="[63e]"></a>fupd_prog</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, fontupd.o(i.fupd_prog))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = fupd_prog &rArr; LCD_ShowNum &rArr; LCD_ShowChar &rArr; LCD_Fast_DrawPoint
</UL>
<BR>[Calls]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowString
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowNum
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[63f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmpeq
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[79d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_font
<LI><a href="#[7df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updata_fontx
</UL>

<P><STRONG><a name="[6ff]"></a>get_crc32</STRONG> (Thumb, 170 bytes, Stack size 8 bytes, nes_crc32.o(i.get_crc32))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get_crc32
</UL>
<BR>[Called By]<UL><LI><a href="#[6fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nes_load
</UL>

<P><STRONG><a name="[567]"></a>get_fat</STRONG> (Thumb, 190 bytes, Stack size 24 bytes, ff.o(i.get_fat))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Erase_Sector &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[619]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[60f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getfree
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[61f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
</UL>

<P><STRONG><a name="[61b]"></a>get_fattime</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, diskio.o(i.get_fattime))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = get_fattime &rArr; RTC_Get &rArr; RTC_Get_Week
</UL>
<BR>[Calls]<UL><LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Get
</UL>
<BR>[Called By]<UL><LI><a href="#[628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_setlabel
<LI><a href="#[622]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
</UL>

<P><STRONG><a name="[640]"></a>get_matched_pymb</STRONG> (Thumb, 94 bytes, Stack size 44 bytes, pyinput.o(i.get_matched_pymb))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = get_matched_pymb &rArr; str_match
</UL>
<BR>[Calls]<UL><LI><a href="#[641]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_match
</UL>
<BR>[Called By]<UL><LI><a href="#[7af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t9_pinyin_process
</UL>

<P><STRONG><a name="[644]"></a>gif_check_head</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, gif.o(i.gif_check_head))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = gif_check_head &rArr; f_read &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Erase_Sector &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
</UL>
<BR>[Called By]<UL><LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gif_decode
</UL>

<P><STRONG><a name="[64d]"></a>gif_clear2bkcolor</STRONG> (Thumb, 326 bytes, Stack size 56 bytes, gif.o(i.gif_clear2bkcolor))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = gif_clear2bkcolor
</UL>
<BR>[Called By]<UL><LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gif_drawimage
</UL>

<P><STRONG><a name="[4ac]"></a>gif_decode</STRONG> (Thumb, 258 bytes, Stack size 40 bytes, gif.o(i.gif_decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 616 + Unknown Stack Size
<LI>Call Chain = gif_decode &rArr; gif_drawimage &rArr; gif_dispimage &rArr; gif_getnextbyte &rArr; gif_getnextcode &rArr; gif_getdatablock &rArr; f_lseek &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Erase_Sector &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gif_recovergctbl
<LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gif_getinfo
<LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gif_drawimage
<LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gif_check_head
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pic_memfree
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pic_memalloc
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_load_picfile
</UL>

<P><STRONG><a name="[648]"></a>gif_dispimage</STRONG> (Thumb, 410 bytes, Stack size 88 bytes, gif.o(i.gif_dispimage))
<BR><BR>[Stack]<UL><LI>Max Depth = 520 + Unknown Stack Size
<LI>Call Chain = gif_dispimage &rArr; gif_getnextbyte &rArr; gif_getnextcode &rArr; gif_getdatablock &rArr; f_lseek &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Erase_Sector &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gif_initlzw
<LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gif_getnextbyte
<LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
</UL>
<BR>[Called By]<UL><LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gif_drawimage
</UL>

<P><STRONG><a name="[646]"></a>gif_drawimage</STRONG> (Thumb, 284 bytes, Stack size 56 bytes, gif.o(i.gif_drawimage))
<BR><BR>[Stack]<UL><LI>Max Depth = 576 + Unknown Stack Size
<LI>Call Chain = gif_drawimage &rArr; gif_dispimage &rArr; gif_getnextbyte &rArr; gif_getnextcode &rArr; gif_getdatablock &rArr; f_lseek &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Erase_Sector &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gif_savegctbl
<LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gif_readextension
<LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gif_readcolortbl
<LI><a href="#[648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gif_dispimage
<LI><a href="#[64d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gif_clear2bkcolor
<LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[619]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
</UL>
<BR>[Called By]<UL><LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gif_decode
</UL>

<P><STRONG><a name="[64f]"></a>gif_getdatablock</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, gif.o(i.gif_getdatablock))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = gif_getdatablock &rArr; f_lseek &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Erase_Sector &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[619]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
</UL>
<BR>[Called By]<UL><LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gif_readextension
<LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gif_getnextcode
</UL>

<P><STRONG><a name="[645]"></a>gif_getinfo</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, gif.o(i.gif_getinfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = gif_getinfo &rArr; gif_readcolortbl &rArr; f_read &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Erase_Sector &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gif_readcolortbl
<LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
</UL>
<BR>[Called By]<UL><LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gif_decode
</UL>

<P><STRONG><a name="[64a]"></a>gif_getnextbyte</STRONG> (Thumb, 572 bytes, Stack size 32 bytes, gif.o(i.gif_getnextbyte))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = gif_getnextbyte &rArr; gif_getnextcode &rArr; gif_getdatablock &rArr; f_lseek &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Erase_Sector &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mymemset
<LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gif_getnextcode
</UL>
<BR>[Called By]<UL><LI><a href="#[648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gif_dispimage
</UL>

<P><STRONG><a name="[650]"></a>gif_getnextcode</STRONG> (Thumb, 288 bytes, Stack size 16 bytes, gif.o(i.gif_getnextcode))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = gif_getnextcode &rArr; gif_getdatablock &rArr; f_lseek &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Erase_Sector &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gif_getdatablock
</UL>
<BR>[Called By]<UL><LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gif_getnextbyte
</UL>

<P><STRONG><a name="[651]"></a>gif_getrgb565</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, gif.o(i.gif_getrgb565))
<BR><BR>[Called By]<UL><LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gif_readcolortbl
</UL>

<P><STRONG><a name="[649]"></a>gif_initlzw</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, gif.o(i.gif_initlzw))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gif_initlzw
</UL>
<BR>[Calls]<UL><LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mymemset
</UL>
<BR>[Called By]<UL><LI><a href="#[648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gif_dispimage
</UL>

<P><STRONG><a name="[64c]"></a>gif_readcolortbl</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, gif.o(i.gif_readcolortbl))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = gif_readcolortbl &rArr; f_read &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Erase_Sector &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[651]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gif_getrgb565
<LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
</UL>
<BR>[Called By]<UL><LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gif_getinfo
<LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gif_drawimage
</UL>

<P><STRONG><a name="[64e]"></a>gif_readextension</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, gif.o(i.gif_readextension))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = gif_readextension &rArr; gif_getdatablock &rArr; f_lseek &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Erase_Sector &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gif_getdatablock
<LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
</UL>
<BR>[Called By]<UL><LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gif_drawimage
</UL>

<P><STRONG><a name="[647]"></a>gif_recovergctbl</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, gif.o(i.gif_recovergctbl))
<BR><BR>[Called By]<UL><LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gif_decode
</UL>

<P><STRONG><a name="[64b]"></a>gif_savegctbl</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, gif.o(i.gif_savegctbl))
<BR><BR>[Called By]<UL><LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gif_drawimage
</UL>

<P><STRONG><a name="[544]"></a>gui_alpha_blend565</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, gui.o(i.gui_alpha_blend565))
<BR><BR>[Called By]<UL><LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_alphablend_area
<LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_draw_arcbtn
<LI><a href="#[62e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scrollbar_check
</UL>

<P><STRONG><a name="[4f7]"></a>gui_alphablend_area</STRONG> (Thumb, 82 bytes, Stack size 56 bytes, gui.o(i.gui_alphablend_area))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = gui_alphablend_area
</UL>
<BR>[Calls]<UL><LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_alpha_blend565
</UL>
<BR>[Called By]<UL><LI><a href="#[77b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spb_set_sel
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appplay_set_sel
</UL>

<P><STRONG><a name="[12]"></a>gui_color_chg</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, gui.o(i.gui_color_chg))
<BR>[Address Reference Count : 1]<UL><LI> usmart_config.o(.data)
</UL>
<P><STRONG><a name="[528]"></a>gui_disabs</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gui.o(i.gui_disabs))
<BR><BR>[Called By]<UL><LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spb_move_chk
<LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_lrc_show
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memo_check
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filelistbox_check
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;listbox_check
<LI><a href="#[6d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memo_cursor_flash
<LI><a href="#[5eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_cursor_flash
</UL>

<P><STRONG><a name="[652]"></a>gui_draw_arc</STRONG> (Thumb, 120 bytes, Stack size 72 bytes, gui.o(i.gui_draw_arc))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = gui_draw_arc &rArr; gui_draw_circle8 &rArr; gui_draw_expoint &rArr; LCD_DrawPoint &rArr; LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_circle8
</UL>
<BR>[Called By]<UL><LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_arcrectangle
</UL>

<P><STRONG><a name="[545]"></a>gui_draw_arcrectangle</STRONG> (Thumb, 438 bytes, Stack size 88 bytes, gui.o(i.gui_draw_arcrectangle))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = gui_draw_arcrectangle &rArr; gui_draw_arc &rArr; gui_draw_circle8 &rArr; gui_draw_expoint &rArr; LCD_DrawPoint &rArr; LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_fill_rectangle
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_vline
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_hline
<LI><a href="#[652]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_arc
</UL>
<BR>[Called By]<UL><LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_draw
<LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_draw_arcbtn
</UL>

<P><STRONG><a name="[659]"></a>gui_draw_bigpoint</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, gui.o(i.gui_draw_bigpoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = gui_draw_bigpoint
</UL>
<BR>[Called By]<UL><LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_show_ptchar
<LI><a href="#[65a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_show_ptfont
</UL>

<P><STRONG><a name="[654]"></a>gui_draw_bline</STRONG> (Thumb, 190 bytes, Stack size 48 bytes, gui.o(i.gui_draw_bline))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = gui_draw_bline &rArr; gui_fill_circle &rArr; gui_draw_hline
</UL>
<BR>[Calls]<UL><LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_fill_circle
</UL>
<BR>[Called By]<UL><LI><a href="#[6c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wireless_play
<LI><a href="#[6bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;paint_play
<LI><a href="#[715]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t9_check
</UL>

<P><STRONG><a name="[55c]"></a>gui_draw_bline1</STRONG> (Thumb, 342 bytes, Stack size 64 bytes, gui.o(i.gui_draw_bline1))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = gui_draw_bline1 &rArr; LCD_Fast_DrawPoint
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fast_DrawPoint
</UL>
<BR>[Called By]<UL><LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calendar_circle_clock_showtime
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calendar_circle_clock_drawpanel
<LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro_circle_show
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro_circle_panel
</UL>

<P><STRONG><a name="[653]"></a>gui_draw_circle8</STRONG> (Thumb, 210 bytes, Stack size 72 bytes, gui.o(i.gui_draw_circle8))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = gui_draw_circle8 &rArr; gui_draw_expoint &rArr; LCD_DrawPoint &rArr; LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_expoint
</UL>
<BR>[Called By]<UL><LI><a href="#[652]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_arc
</UL>

<P><STRONG><a name="[655]"></a>gui_draw_expoint</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, gui.o(i.gui_draw_expoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = gui_draw_expoint &rArr; LCD_DrawPoint &rArr; LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawPoint
</UL>
<BR>[Called By]<UL><LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_circle8
</UL>

<P><STRONG><a name="[4b7]"></a>gui_draw_hline</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, gui.o(i.gui_draw_hline))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gui_draw_hline
</UL>
<BR>[Called By]<UL><LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_rectangle
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_fill_circle
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filelistbox_draw_listbox
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gui_tcbar
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_arcrectangle
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_draw_stdbtn
<LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_draw_arcbtn
<LI><a href="#[774]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sms_send_sms
<LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_draw
<LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_test
<LI><a href="#[749]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progressbar_draw_sign
<LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filelistbox_show_info
<LI><a href="#[7ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t9_drawvbtn_rim
</UL>

<P><STRONG><a name="[631]"></a>gui_draw_icos</STRONG> (Thumb, 142 bytes, Stack size 40 bytes, gui.o(i.gui_draw_icos))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = gui_draw_icos &rArr; gui_memin_malloc &rArr; mymalloc &rArr; my_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_memin_malloc
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_memin_free
<LI><a href="#[656]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_rgb332torgb565
</UL>
<BR>[Called By]<UL><LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filelistbox_check
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filelistbox_draw_list
</UL>

<P><STRONG><a name="[638]"></a>gui_draw_icosalpha</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, gui.o(i.gui_draw_icosalpha))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = gui_draw_icosalpha
</UL>
<BR>[Called By]<UL><LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filelistbox_show_path
</UL>

<P><STRONG><a name="[546]"></a>gui_draw_rectangle</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, gui.o(i.gui_draw_rectangle))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = gui_draw_rectangle &rArr; gui_draw_vline
</UL>
<BR>[Calls]<UL><LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_vline
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_hline
</UL>
<BR>[Called By]<UL><LI><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;paint_pen_color_set
<LI><a href="#[788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysset_system_update
<LI><a href="#[789]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysset_system_info
<LI><a href="#[78b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysset_system_about
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progressbar_draw_progressbar
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_draw
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_draw_stdbtn
<LI><a href="#[75b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scrollbar_draw_btn
<LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scrollbar_draw_scrollbar
</UL>

<P><STRONG><a name="[4af]"></a>gui_draw_smooth_rectangle</STRONG> (Thumb, 102 bytes, Stack size 56 bytes, gui.o(i.gui_draw_smooth_rectangle))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = gui_draw_smooth_rectangle &rArr; gui_memin_malloc &rArr; mymalloc &rArr; my_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_memin_malloc
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_memin_free
<LI><a href="#[657]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_smooth_color
</UL>
<BR>[Called By]<UL><LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_draw_smooth_line
</UL>

<P><STRONG><a name="[4b8]"></a>gui_draw_vline</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, gui.o(i.gui_draw_vline))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gui_draw_vline
</UL>
<BR>[Called By]<UL><LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_rectangle
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gui_tcbar
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_arcrectangle
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_draw_stdbtn
<LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_draw
<LI><a href="#[749]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progressbar_draw_sign
<LI><a href="#[7ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t9_drawvbtn_rim
</UL>

<P><STRONG><a name="[55b]"></a>gui_fill_circle</STRONG> (Thumb, 182 bytes, Stack size 56 bytes, gui.o(i.gui_fill_circle))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = gui_fill_circle &rArr; gui_draw_hline
</UL>
<BR>[Calls]<UL><LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_hline
</UL>
<BR>[Called By]<UL><LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_bline
<LI><a href="#[72d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;paint_draw_point
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calendar_circle_clock_drawpanel
<LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro_circle_show
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro_circle_panel
</UL>

<P><STRONG><a name="[4b6]"></a>gui_fill_rectangle</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, gui.o(i.gui_fill_rectangle))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gui_fill_rectangle
</UL>
<BR>[Called By]<UL><LI><a href="#[6c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wireless_play
<LI><a href="#[6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spb_stabar_msg_show
<LI><a href="#[79e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_usb_update_confirm
<LI><a href="#[795]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_font_update_confirm
<LI><a href="#[794]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_files_erase
<LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;paint_pen_size_set
<LI><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;paint_pen_color_set
<LI><a href="#[714]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t9_draw
<LI><a href="#[78f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysset_vs1053_vol3d_show
<LI><a href="#[78e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysset_vs1053_eq_show
<LI><a href="#[785]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysset_time_set
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysset_system_update_cpymsg
<LI><a href="#[788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysset_system_update
<LI><a href="#[783]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysset_date_set
<LI><a href="#[782]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysset_bklight_set
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_show_vol
<LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_load_ui
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_info_upd
<LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memo_draw_memo
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filelistbox_draw_listbox
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filelistbox_check
<LI><a href="#[77a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spb_unsel_micos
<LI><a href="#[779]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spb_load_micos
<LI><a href="#[777]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spb_gsm_signal_show
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_draw
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;listbox_check
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_show_items
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_show_float
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gui_tcbar
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_arcrectangle
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_draw_textbbtn
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_draw_stdbtn
<LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_draw_picbtn
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro_circle_yaw
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro_circle_roll
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro_circle_pitch
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appplay_set_sel
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appplay_load_ui
<LI><a href="#[774]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sms_send_sms
<LI><a href="#[73b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phone_show_time
<LI><a href="#[738]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phone_show_phone
<LI><a href="#[73d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phone_show_input
<LI><a href="#[73e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phone_show_clear
<LI><a href="#[739]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phone_show_calling
<LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_show_inbuf
<LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_show_exp
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_load_ui
<LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_fmt_show
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_ctype_show
<LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_test
<LI><a href="#[70f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_msg_show
<LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_load_ui
<LI><a href="#[7da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tomcat_show_spd
<LI><a href="#[7db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tomcat_load_ui
<LI><a href="#[751]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recorder_vu_meter
<LI><a href="#[753]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recorder_show_samplerate
<LI><a href="#[755]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recorder_show_name
<LI><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recorder_show_agc
<LI><a href="#[750]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recorder_load_ui
<LI><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scrollbar_setpos
<LI><a href="#[75b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scrollbar_draw_btn
<LI><a href="#[748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progressbar_setpos
<LI><a href="#[749]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progressbar_draw_sign
<LI><a href="#[6cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memo_draw_text
<LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;listbox_draw_list
<LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scrollbar_draw_scrollbar
<LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filelistbox_show_info
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filelistbox_draw_list
<LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_draw_text
<LI><a href="#[7a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t9_ncr_clr
</UL>

<P><STRONG><a name="[2d]"></a>gui_get_key</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, gui.o(i.gui_get_key))
<BR>[Address Reference Count : 1]<UL><LI> gui.o(.data)
</UL>
<P><STRONG><a name="[6d7]"></a>gui_get_stringline</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, gui.o(i.gui_get_stringline))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gui_get_stringline
</UL>
<BR>[Called By]<UL><LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_msg_box
<LI><a href="#[6ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memo_info_update
</UL>

<P><STRONG><a name="[79a]"></a>gui_init</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, gui.o(i.gui_init))
<BR><BR>[Called By]<UL><LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_init
</UL>

<P><STRONG><a name="[519]"></a>gui_memex_free</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gui.o(i.gui_memex_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gui_memex_free &rArr; myfree &rArr; my_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myfree
</UL>
<BR>[Called By]<UL><LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tomcat_play
<LI><a href="#[6be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recorder_play
<LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phone_play
<LI><a href="#[6bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;paint_play
<LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calendar_play
<LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calendar_alarm_msg
<LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_play
<LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memo_add_text
<LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_task_delete
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_filelist
<LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memo_delete
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_delete
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spb_delete
<LI><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sms_read_sms
<LI><a href="#[76c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sms_node_free
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phone_incall_task
<LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_test
<LI><a href="#[6ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memo_info_update
<LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filelistbox_addlist
<LI><a href="#[62b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filelist_delete
</UL>

<P><STRONG><a name="[51b]"></a>gui_memex_malloc</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gui.o(i.gui_memex_malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = gui_memex_malloc &rArr; mymalloc &rArr; my_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mymalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tomcat_play
<LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spb_init
<LI><a href="#[6c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sms_play
<LI><a href="#[6be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recorder_play
<LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phone_play
<LI><a href="#[6bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;paint_play
<LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calendar_play
<LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calendar_alarm_msg
<LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_play
<LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memo_add_text
<LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_task_creat
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_filelist
<LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memo_creat
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_creat
<LI><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sms_read_sms
<LI><a href="#[770]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sms_node_creat
<LI><a href="#[769]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sms_delete_sms
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phone_incall_task
<LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_test
<LI><a href="#[6ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memo_info_update
<LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filelistbox_addlist
</UL>

<P><STRONG><a name="[4d6]"></a>gui_memin_free</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gui.o(i.gui_memin_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gui_memin_free &rArr; myfree &rArr; my_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myfree
</UL>
<BR>[Called By]<UL><LI><a href="#[6bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_play
<LI><a href="#[6be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recorder_play
<LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;picviewer_play
<LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phone_play
<LI><a href="#[6bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;paint_play
<LI><a href="#[6bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;notepad_play
<LI><a href="#[6bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nes_play
<LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exe_play
<LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebook_play
<LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_play
<LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calendar_play
<LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calendar_alarm_msg
<LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_play
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_system_update
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_system_file_check
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_play
<LI><a href="#[79e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_usb_update_confirm
<LI><a href="#[722]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t9_delete
<LI><a href="#[782]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysset_bklight_set
<LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progressbar_delete
<LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lrc_read
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lrc_delete
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lrc_creat
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filelistbox_scan_filelist
<LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_task_delete
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_play_task
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_info_upd
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_filelist
<LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memo_delete
<LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filelistbox_delete
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filelistbox_creat
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filelistbox_back
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_delete
<LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;listbox_delete
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;listbox_creat
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_smooth_rectangle
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_delete
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro_circle_yaw
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro_circle_roll
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro_circle_pitch
<LI><a href="#[774]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sms_send_sms
<LI><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sms_read_sms
<LI><a href="#[769]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sms_delete_sms
<LI><a href="#[73b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phone_show_time
<LI><a href="#[741]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phone_incall_task_delete
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phone_incall_task
<LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_delete
<LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_add_text
<LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_test
<LI><a href="#[70f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_msg_show
<LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_load_ui
<LI><a href="#[70c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_get_ip
<LI><a href="#[753]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recorder_show_samplerate
<LI><a href="#[6d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scrollbar_delete
<LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_icos
<LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filelistbox_show_info
<LI><a href="#[630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filelistbox_check_filelist
</UL>

<P><STRONG><a name="[4d0]"></a>gui_memin_malloc</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gui.o(i.gui_memin_malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = gui_memin_malloc &rArr; mymalloc &rArr; my_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mymalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[6bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_play
<LI><a href="#[6be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recorder_play
<LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;picviewer_play
<LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phone_play
<LI><a href="#[6bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;paint_play
<LI><a href="#[6bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;notepad_play
<LI><a href="#[6bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nes_play
<LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exe_play
<LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebook_play
<LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_play
<LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calendar_play
<LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calendar_alarm_msg
<LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_play
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_system_update
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_system_file_check
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_play
<LI><a href="#[79e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_usb_update_confirm
<LI><a href="#[742]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phone_incall_task_creat
<LI><a href="#[713]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t9_creat
<LI><a href="#[782]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysset_bklight_set
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progressbar_creat
<LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lrc_read
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lrc_creat
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filelistbox_scan_filelist
<LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_task_creat
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_play_task
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_info_upd
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_filelist
<LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memo_creat
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filelistbox_creat
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_creat
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;listbox_creat
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;listbox_addlist
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_smooth_rectangle
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_creat
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro_circle_yaw
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro_circle_roll
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro_circle_pitch
<LI><a href="#[774]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sms_send_sms
<LI><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sms_read_sms
<LI><a href="#[769]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sms_delete_sms
<LI><a href="#[73b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phone_show_time
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phone_incall_task
<LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_creat
<LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_add_text
<LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_test
<LI><a href="#[70f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_msg_show
<LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_load_ui
<LI><a href="#[70c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_get_ip
<LI><a href="#[753]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recorder_show_samplerate
<LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scrollbar_creat
<LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_icos
<LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filelistbox_show_info
<LI><a href="#[630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filelistbox_check_filelist
</UL>

<P><STRONG><a name="[636]"></a>gui_memin_realloc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gui.o(i.gui_memin_realloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = gui_memin_realloc &rArr; myrealloc &rArr; my_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myrealloc
</UL>
<BR>[Called By]<UL><LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filelistbox_scan_filelist
</UL>

<P><STRONG><a name="[513]"></a>gui_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gui.o(i.gui_memset))
<BR><BR>[Called By]<UL><LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;picviewer_play
<LI><a href="#[6bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;paint_play
<LI><a href="#[6bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;notepad_play
<LI><a href="#[6bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nes_play
<LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exe_play
<LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebook_play
<LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_play
<LI><a href="#[713]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t9_creat
<LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lrc_read
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lrc_creat
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filelistbox_scan_filelist
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_filelist
<LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memo_creat
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filelistbox_creat
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_show_res
<LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_fmt_show
<LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_exe
<LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_creat
<LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scrollbar_creat
<LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filelistbox_show_info
<LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filelistbox_addlist
</UL>

<P><STRONG><a name="[637]"></a>gui_num2str</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, gui.o(i.gui_num2str))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = gui_num2str &rArr; gui_pow
</UL>
<BR>[Calls]<UL><LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_pow
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[789]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysset_system_info
<LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filelistbox_show_info
</UL>

<P><STRONG><a name="[536]"></a>gui_path_name</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, gui.o(i.gui_path_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = gui_path_name &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;picviewer_play
<LI><a href="#[6bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;paint_play
<LI><a href="#[6bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;notepad_play
<LI><a href="#[6bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nes_play
<LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exe_play
<LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebook_play
<LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lrc_read
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_play_task
<LI><a href="#[630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filelistbox_check_filelist
</UL>

<P><STRONG><a name="[4b5]"></a>gui_pow</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, gui.o(i.gui_pow))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gui_pow
</UL>
<BR>[Called By]<UL><LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_num2str
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_show_num
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_show_float
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_numlen
<LI><a href="#[74a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progressbar_show_percnt
</UL>

<P><STRONG><a name="[656]"></a>gui_rgb332torgb565</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, gui.o(i.gui_rgb332torgb565))
<BR><BR>[Called By]<UL><LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_icos
</UL>

<P><STRONG><a name="[4dd]"></a>gui_show_num</STRONG> (Thumb, 168 bytes, Stack size 72 bytes, gui.o(i.gui_show_num))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = gui_show_num &rArr; gui_show_ptchar &rArr; gui_draw_bigpoint
</UL>
<BR>[Calls]<UL><LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_show_ptchar
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_pow
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spb_stabar_msg_show
<LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calendar_play
<LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calendar_alarm_msg
<LI><a href="#[730]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;paint_show_colorval
<LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;paint_pen_size_set
<LI><a href="#[78f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysset_vs1053_vol3d_show
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysset_system_update_cpymsg
<LI><a href="#[788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysset_system_update
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_time_show
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_show_vol
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_show_float
<LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_show_exp
<LI><a href="#[7da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tomcat_show_spd
<LI><a href="#[754]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recorder_show_time
<LI><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recorder_show_agc
</UL>

<P><STRONG><a name="[4de]"></a>gui_show_ptchar</STRONG> (Thumb, 288 bytes, Stack size 56 bytes, gui.o(i.gui_show_ptchar))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = gui_show_ptchar &rArr; gui_draw_bigpoint
</UL>
<BR>[Calls]<UL><LI><a href="#[659]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_bigpoint
</UL>
<BR>[Called By]<UL><LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calendar_play
<LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calendar_alarm_msg
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_show_ptstr
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_time_show
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_show_vol
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_show_string
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_show_num
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_show_float
<LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_show_flag
<LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_show_exp
<LI><a href="#[754]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recorder_show_time
</UL>

<P><STRONG><a name="[65a]"></a>gui_show_ptfont</STRONG> (Thumb, 214 bytes, Stack size 128 bytes, gui.o(i.gui_show_ptfont))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = gui_show_ptfont &rArr; Get_HzMat &rArr; W25QXX_Read &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_HzMat
<LI><a href="#[659]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_bigpoint
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_show_ptstr
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_show_string
</UL>

<P><STRONG><a name="[11]"></a>gui_show_ptstr</STRONG> (Thumb, 248 bytes, Stack size 72 bytes, gui.o(i.gui_show_ptstr))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = gui_show_ptstr &rArr; gui_show_ptfont &rArr; Get_HzMat &rArr; W25QXX_Read &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_show_ptchar
<LI><a href="#[65a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_show_ptfont
</UL>
<BR>[Called By]<UL><LI><a href="#[730]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;paint_show_colorval
<LI><a href="#[78b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysset_system_about
<LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_show_ptstrwhiterim
<LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_lrc_show
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filelistbox_check
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_draw
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;listbox_check
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_show_strmid
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_show_items
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_muti_remind_msg
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appplay_remote
<LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_fmt_show
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_ctype_show
<LI><a href="#[6d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memo_show_cursor
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_show_cursor
<LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;listbox_draw_list
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filelistbox_show_path
<LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filelistbox_show_info
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filelistbox_draw_list
<LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_draw_text
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usmart_config.o(.data)
</UL>
<P><STRONG><a name="[51d]"></a>gui_show_ptstrwhiterim</STRONG> (Thumb, 74 bytes, Stack size 56 bytes, gui.o(i.gui_show_ptstrwhiterim))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = gui_show_ptstrwhiterim &rArr; gui_show_ptstr &rArr; gui_show_ptfont &rArr; Get_HzMat &rArr; W25QXX_Read &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_show_ptstr
</UL>
<BR>[Called By]<UL><LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_info_upd
<LI><a href="#[755]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recorder_show_name
</UL>

<P><STRONG><a name="[51f]"></a>gui_show_string</STRONG> (Thumb, 200 bytes, Stack size 56 bytes, gui.o(i.gui_show_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = gui_show_string &rArr; gui_show_ptfont &rArr; Get_HzMat &rArr; W25QXX_Read &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_show_ptchar
<LI><a href="#[65a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_show_ptfont
</UL>
<BR>[Called By]<UL><LI><a href="#[6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spb_stabar_msg_show
<LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;picviewer_play
<LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebook_play
<LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;paint_pen_size_set
<LI><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;paint_pen_color_set
<LI><a href="#[78f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysset_vs1053_vol3d_show
<LI><a href="#[786]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysset_vs1053_vol3d_set
<LI><a href="#[78e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysset_vs1053_eq_show
<LI><a href="#[787]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysset_vs1053_eq_set
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysset_system_update_cpymsg
<LI><a href="#[788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysset_system_update
<LI><a href="#[78a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysset_system_status
<LI><a href="#[789]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysset_system_info
<LI><a href="#[78b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysset_system_about
<LI><a href="#[782]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysset_bklight_set
<LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_load_ui
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_info_upd
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_msg_box
<LI><a href="#[774]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sms_send_sms
<LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_show_inbuf
<LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_fmt_show
<LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_test
<LI><a href="#[70f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_msg_show
<LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_load_ui
<LI><a href="#[7d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tomcat_agcspd_set
<LI><a href="#[753]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recorder_show_samplerate
<LI><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recorder_show_agc
<LI><a href="#[74d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recorder_agc_set
<LI><a href="#[6cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memo_draw_text
</UL>

<P><STRONG><a name="[4b2]"></a>gui_show_strmid</STRONG> (Thumb, 120 bytes, Stack size 56 bytes, gui.o(i.gui_show_strmid))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = gui_show_strmid &rArr; gui_show_ptstr &rArr; gui_show_ptfont &rArr; Get_HzMat &rArr; W25QXX_Read &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_show_ptstr
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lrc_show_linelrc
<LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_load_ui
<LI><a href="#[77a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spb_unsel_micos
<LI><a href="#[77b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spb_set_sel
<LI><a href="#[779]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spb_load_micos
<LI><a href="#[778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spb_load_icos
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_draw
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_filebrower
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_draw_textbbtn
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_draw_textabtn
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_draw_stdbtn
<LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_draw_arcbtn
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro_circle_yaw
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro_circle_roll
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro_circle_pitch
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appplay_gyro
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appplay_set_sel
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appplay_load_ui
<LI><a href="#[774]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sms_send_sms
<LI><a href="#[73b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phone_show_time
<LI><a href="#[738]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phone_show_phone
<LI><a href="#[73d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phone_show_input
<LI><a href="#[739]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phone_show_calling
<LI><a href="#[7db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tomcat_load_ui
<LI><a href="#[750]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recorder_load_ui
</UL>

<P><STRONG><a name="[657]"></a>gui_smooth_color</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, gui.o(i.gui_smooth_color))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = gui_smooth_color
</UL>
<BR>[Called By]<UL><LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_smooth_rectangle
</UL>

<P><STRONG><a name="[5f0]"></a>gui_string_forwardgbk_count</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, gui.o(i.gui_string_forwardgbk_count))
<BR><BR>[Called By]<UL><LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memo_cursor_set
<LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_cursor_set
</UL>

<P><STRONG><a name="[4f0]"></a>gyro_circle_panel</STRONG> (Thumb, 726 bytes, Stack size 96 bytes, appplay_gyro.o(i.gyro_circle_panel))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = gyro_circle_panel &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_fill_circle
<LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_bline1
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appplay_gyro
</UL>

<P><STRONG><a name="[4f1]"></a>gyro_circle_pitch</STRONG> (Thumb, 172 bytes, Stack size 64 bytes, appplay_gyro.o(i.gyro_circle_pitch))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = gyro_circle_pitch &rArr; gui_show_strmid &rArr; gui_show_ptstr &rArr; gui_show_ptfont &rArr; Get_HzMat &rArr; W25QXX_Read &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_memin_malloc
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_memin_free
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_fill_rectangle
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_show_strmid
<LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro_circle_show
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appplay_gyro
</UL>

<P><STRONG><a name="[4f2]"></a>gyro_circle_roll</STRONG> (Thumb, 172 bytes, Stack size 64 bytes, appplay_gyro.o(i.gyro_circle_roll))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = gyro_circle_roll &rArr; gui_show_strmid &rArr; gui_show_ptstr &rArr; gui_show_ptfont &rArr; Get_HzMat &rArr; W25QXX_Read &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_memin_malloc
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_memin_free
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_fill_rectangle
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_show_strmid
<LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro_circle_show
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appplay_gyro
</UL>

<P><STRONG><a name="[65b]"></a>gyro_circle_show</STRONG> (Thumb, 170 bytes, Stack size 64 bytes, appplay_gyro.o(i.gyro_circle_show))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = gyro_circle_show &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_fill_circle
<LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_bline1
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro_circle_yaw
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro_circle_roll
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro_circle_pitch
</UL>

<P><STRONG><a name="[4f3]"></a>gyro_circle_yaw</STRONG> (Thumb, 172 bytes, Stack size 64 bytes, appplay_gyro.o(i.gyro_circle_yaw))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = gyro_circle_yaw &rArr; gui_show_strmid &rArr; gui_show_ptstr &rArr; gui_show_ptfont &rArr; Get_HzMat &rArr; W25QXX_Read &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_memin_malloc
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_memin_free
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_fill_rectangle
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_show_strmid
<LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro_circle_show
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appplay_gyro
</UL>

<P><STRONG><a name="[66b]"></a>http_set_cgi_handlers</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, httpd.o(i.http_set_cgi_handlers))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = http_set_cgi_handlers &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpd_cgi_init
</UL>

<P><STRONG><a name="[66c]"></a>http_set_ssi_handler</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, httpd.o(i.http_set_ssi_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = http_set_ssi_handler &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[671]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpd_ssi_init
</UL>

<P><STRONG><a name="[66f]"></a>httpd_cgi_init</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, httpd_cgi_ssi.o(i.httpd_cgi_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = httpd_cgi_init &rArr; http_set_cgi_handlers &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[66b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_set_cgi_handlers
</UL>
<BR>[Called By]<UL><LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpd_init
</UL>

<P><STRONG><a name="[670]"></a>httpd_init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, httpd.o(i.httpd_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 568 + Unknown Stack Size
<LI>Call Chain = httpd_init &rArr; httpd_init_addr &rArr; tcp_new &rArr; tcp_alloc &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[671]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpd_ssi_init
<LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpd_cgi_init
<LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpd_init_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_play
</UL>

<P><STRONG><a name="[671]"></a>httpd_ssi_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, httpd_cgi_ssi.o(i.httpd_ssi_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = httpd_ssi_init &rArr; http_set_ssi_handler &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_set_ssi_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpd_init
</UL>

<P><STRONG><a name="[674]"></a>icmp_dest_unreach</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, icmp.o(i.icmp_dest_unreach))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = icmp_dest_unreach &rArr; icmp_send_response &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[675]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
</UL>
<BR>[Called By]<UL><LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
</UL>

<P><STRONG><a name="[676]"></a>icmp_input</STRONG> (Thumb, 338 bytes, Stack size 48 bytes, icmp.o(i.icmp_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = icmp_input &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[679]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if
<LI><a href="#[677]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pbuf
<LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
<LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy
<LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
</UL>

<P><STRONG><a name="[67b]"></a>icmp_time_exceeded</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, icmp.o(i.icmp_time_exceeded))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = icmp_time_exceeded &rArr; icmp_send_response &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[675]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
</UL>
<BR>[Called By]<UL><LI><a href="#[68e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_free_complete_datagram
</UL>

<P><STRONG><a name="[678]"></a>inet_chksum</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, inet_chksum.o(i.inet_chksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = inet_chksum &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_standard_chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[686]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass
<LI><a href="#[680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag
<LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[675]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
<LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
</UL>

<P><STRONG><a name="[677]"></a>inet_chksum_pbuf</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, inet_chksum.o(i.inet_chksum_pbuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = inet_chksum_pbuf &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_standard_chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
</UL>

<P><STRONG><a name="[67d]"></a>inet_chksum_pseudo</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, inet_chksum.o(i.inet_chksum_pseudo))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = inet_chksum_pseudo &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_standard_chksum
<LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
</UL>
<BR>[Called By]<UL><LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[689]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[7cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[7d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[7b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[7c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
</UL>

<P><STRONG><a name="[67e]"></a>inv_orientation_matrix_to_scalar</STRONG> (Thumb, 34 bytes, Stack size 4 bytes, inv_mpu.o(i.inv_orientation_matrix_to_scalar))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = inv_orientation_matrix_to_scalar
</UL>
<BR>[Calls]<UL><LI><a href="#[67f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_row_2_scale
</UL>
<BR>[Called By]<UL><LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_dmp_init
</UL>

<P><STRONG><a name="[67f]"></a>inv_row_2_scale</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, inv_mpu.o(i.inv_row_2_scale))
<BR><BR>[Called By]<UL><LI><a href="#[67e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_orientation_matrix_to_scalar
</UL>

<P><STRONG><a name="[5fb]"></a>ip4_addr_isbroadcast</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, ip_addr.o(i.ip4_addr_isbroadcast))
<BR><BR>[Called By]<UL><LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[689]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
<LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
<LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_update_arp_entry
</UL>

<P><STRONG><a name="[680]"></a>ip_frag</STRONG> (Thumb, 378 bytes, Stack size 88 bytes, ip_frag.o(i.ip_frag))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[683]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloced_custom
<LI><a href="#[682]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[684]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag_free_pbuf_custom_ref
<LI><a href="#[681]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
<LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
<LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
<LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[679]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if
</UL>

<P><STRONG><a name="[604]"></a>ip_input</STRONG> (Thumb, 378 bytes, Stack size 40 bytes, ip.o(i.ip_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 648 + Unknown Stack Size
<LI>Call Chain = ip_input &rArr; tcp_input &rArr; tcp_process &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[689]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_input
<LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[681]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
<LI><a href="#[686]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass
<LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
<LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_dest_unreach
<LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast
</UL>
<BR>[Called By]<UL><LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_thread
</UL>

<P><STRONG><a name="[67a]"></a>ip_output</STRONG> (Thumb, 72 bytes, Stack size 40 bytes, ip.o(i.ip_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[68a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_route
<LI><a href="#[679]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[675]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[7cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[7d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[7b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[7c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
</UL>

<P><STRONG><a name="[679]"></a>ip_output_if</STRONG> (Thumb, 250 bytes, Stack size 40 bytes, ip.o(i.ip_output_if))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag
<LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[67a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
<LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
</UL>

<P><STRONG><a name="[686]"></a>ip_reass</STRONG> (Thumb, 414 bytes, Stack size 40 bytes, ip_frag.o(i.ip_reass))
<BR><BR>[Stack]<UL><LI>Max Depth = 544 + Unknown Stack Size
<LI>Call Chain = ip_reass &rArr; ip_reass_remove_oldest_datagram &rArr; ip_reass_free_complete_datagram &rArr; icmp_time_exceeded &rArr; icmp_send_response &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[682]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_remove_oldest_datagram
<LI><a href="#[68d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_dequeue_datagram
<LI><a href="#[68c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_chain_frag_into_datagram_and_validate
<LI><a href="#[681]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
<LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
<LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[667]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clen
<LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
<LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
</UL>

<P><STRONG><a name="[1cf]"></a>ip_reass_timer</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, timers.o(i.ip_reass_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 504 + Unknown Stack Size
<LI>Call Chain = ip_reass_timer &rArr; ip_reass_tmr &rArr; ip_reass_free_complete_datagram &rArr; icmp_time_exceeded &rArr; icmp_send_response &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_tmr
<LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
</UL>
<BR>[Address Reference Count : 3]<UL><LI> lwip_comm.o(i.lwip_comm_delete_next_timeout)
<LI> timers.o(i.ip_reass_timer)
<LI> timers.o(i.sys_timeouts_init)
</UL>
<P><STRONG><a name="[68f]"></a>ip_reass_tmr</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, ip_frag.o(i.ip_reass_tmr))
<BR><BR>[Stack]<UL><LI>Max Depth = 496 + Unknown Stack Size
<LI>Call Chain = ip_reass_tmr &rArr; ip_reass_free_complete_datagram &rArr; icmp_time_exceeded &rArr; icmp_send_response &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[68e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_free_complete_datagram
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_timer
</UL>

<P><STRONG><a name="[68a]"></a>ip_route</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, ip.o(i.ip_route))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ip_route
</UL>
<BR>[Called By]<UL><LI><a href="#[67a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[7bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_eff_send_mss
<LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
<LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto
</UL>

<P><STRONG><a name="[696]"></a>is_element_ok</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, piclib.o(i.is_element_ok))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = is_element_ok
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_out_func_point
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stdbmp_decode
</UL>

<P><STRONG><a name="[690]"></a>jd_decomp</STRONG> (Thumb, 230 bytes, Stack size 56 bytes, tjpgd.o(i.jd_decomp))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = jd_decomp &rArr; mcu_load &rArr; huffext
</UL>
<BR>[Calls]<UL><LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_output
<LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_load
</UL>
<BR>[Called By]<UL><LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpg_decode
</UL>

<P><STRONG><a name="[693]"></a>jd_prepare</STRONG> (Thumb, 706 bytes, Stack size 40 bytes, tjpgd.o(i.jd_prepare))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = jd_prepare &rArr; create_huffman_tbl
</UL>
<BR>[Calls]<UL><LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_huffman_tbl
<LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_pool
</UL>
<BR>[Called By]<UL><LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpg_decode
</UL>

<P><STRONG><a name="[694]"></a>jpeg_freeall</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, tjpgd.o(i.jpeg_freeall))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = jpeg_freeall &rArr; pic_memfree &rArr; myfree &rArr; my_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pic_memfree
</UL>
<BR>[Called By]<UL><LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpg_decode
</UL>

<P><STRONG><a name="[1cc]"></a>jpeg_in_func</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, tjpgd.o(i.jpeg_in_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = jpeg_in_func &rArr; f_lseek &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Erase_Sector &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[619]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tjpgd.o(i.jpg_decode)
</UL>
<P><STRONG><a name="[695]"></a>jpeg_mallocall</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, tjpgd.o(i.jpeg_mallocall))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = jpeg_mallocall &rArr; pic_memalloc &rArr; mymalloc &rArr; my_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pic_memalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpg_decode
</UL>

<P><STRONG><a name="[1ce]"></a>jpeg_out_func_fill</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, tjpgd.o(i.jpeg_out_func_fill))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = jpeg_out_func_fill
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tjpgd.o(i.jpg_decode)
</UL>
<P><STRONG><a name="[1cd]"></a>jpeg_out_func_point</STRONG> (Thumb, 160 bytes, Stack size 40 bytes, tjpgd.o(i.jpeg_out_func_point))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = jpeg_out_func_point &rArr; is_element_ok
</UL>
<BR>[Calls]<UL><LI><a href="#[696]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_element_ok
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tjpgd.o(i.jpg_decode)
</UL>
<P><STRONG><a name="[4ab]"></a>jpg_decode</STRONG> (Thumb, 174 bytes, Stack size 32 bytes, tjpgd.o(i.jpg_decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 568 + Unknown Stack Size
<LI>Call Chain = jpg_decode &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Erase_Sector &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[695]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_mallocall
<LI><a href="#[694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_freeall
<LI><a href="#[693]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jd_prepare
<LI><a href="#[690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jd_decomp
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_draw_init
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_load_picfile
</UL>

<P><STRONG><a name="[499]"></a>ldexp</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, ldexp.o(i.ldexp))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ldexp &rArr; __aeabi_cdcmpeq
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__support_ldexp
</UL>

<P><STRONG><a name="[698]"></a>list_search</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, listbox.o(i.list_search))
<BR><BR>[Called By]<UL><LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;listbox_delete
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;listbox_check
<LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;listbox_draw_list
</UL>

<P><STRONG><a name="[4c8]"></a>listbox_addlist</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, listbox.o(i.listbox_addlist))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = listbox_addlist &rArr; gui_memin_malloc &rArr; mymalloc &rArr; my_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_memin_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_listbox_select
<LI><a href="#[76e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sms_msg_select
</UL>

<P><STRONG><a name="[4ca]"></a>listbox_check</STRONG> (Thumb, 944 bytes, Stack size 64 bytes, listbox.o(i.listbox_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = listbox_check &rArr; listbox_draw_listbox &rArr; listbox_draw_list &rArr; gui_show_ptstr &rArr; gui_show_ptfont &rArr; Get_HzMat &rArr; W25QXX_Read &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_fill_rectangle
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_show_ptstr
<LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_disabs
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;listbox_draw_listbox
<LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;listbox_draw_list
<LI><a href="#[698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_search
<LI><a href="#[62e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scrollbar_check
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_listbox_select
<LI><a href="#[76e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sms_msg_select
</UL>

<P><STRONG><a name="[4c7]"></a>listbox_creat</STRONG> (Thumb, 168 bytes, Stack size 40 bytes, listbox.o(i.listbox_creat))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = listbox_creat &rArr; scrollbar_creat &rArr; gui_memin_malloc &rArr; mymalloc &rArr; my_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_memin_malloc
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_memin_free
<LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scrollbar_creat
</UL>
<BR>[Called By]<UL><LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_listbox_select
<LI><a href="#[76e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sms_msg_select
</UL>

<P><STRONG><a name="[4cb]"></a>listbox_delete</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, listbox.o(i.listbox_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = listbox_delete &rArr; gui_memin_free &rArr; myfree &rArr; my_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_memin_free
<LI><a href="#[698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_search
</UL>
<BR>[Called By]<UL><LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_listbox_select
<LI><a href="#[76e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sms_msg_select
</UL>

<P><STRONG><a name="[697]"></a>listbox_draw_list</STRONG> (Thumb, 250 bytes, Stack size 56 bytes, listbox.o(i.listbox_draw_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = listbox_draw_list &rArr; gui_show_ptstr &rArr; gui_show_ptfont &rArr; Get_HzMat &rArr; W25QXX_Read &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_fill_rectangle
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_show_ptstr
<LI><a href="#[698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_search
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;listbox_draw_listbox
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;listbox_check
</UL>

<P><STRONG><a name="[4c9]"></a>listbox_draw_listbox</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, listbox.o(i.listbox_draw_listbox))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = listbox_draw_listbox &rArr; listbox_draw_list &rArr; gui_show_ptstr &rArr; gui_show_ptfont &rArr; Get_HzMat &rArr; W25QXX_Read &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;listbox_draw_list
<LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scrollbar_draw_scrollbar
</UL>
<BR>[Called By]<UL><LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;listbox_check
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_listbox_select
<LI><a href="#[76e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sms_msg_select
</UL>

<P><STRONG><a name="[54e]"></a>log</STRONG> (Thumb, 808 bytes, Stack size 96 bytes, log.o(i.log))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = log &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_exe
<LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log10
</UL>

<P><STRONG><a name="[54d]"></a>log10</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, log10.o(i.log10))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = log10 &rArr; log &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
</UL>
<BR>[Called By]<UL><LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_exe
</UL>

<P><STRONG><a name="[699]"></a>lrc_analyze</STRONG> (Thumb, 276 bytes, Stack size 40 bytes, lyric.o(i.lrc_analyze))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = lrc_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lrc_str2num
</UL>
<BR>[Called By]<UL><LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lrc_read
</UL>

<P><STRONG><a name="[69b]"></a>lrc_chg_suffix</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, lyric.o(i.lrc_chg_suffix))
<BR><BR>[Called By]<UL><LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lrc_read
</UL>

<P><STRONG><a name="[538]"></a>lrc_creat</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, lyric.o(i.lrc_creat))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = lrc_creat &rArr; gui_memin_malloc &rArr; mymalloc &rArr; my_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_memin_malloc
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_memin_free
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_task_creat
</UL>

<P><STRONG><a name="[539]"></a>lrc_delete</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lyric.o(i.lrc_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lrc_delete &rArr; gui_memin_free &rArr; myfree &rArr; my_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_memin_free
</UL>
<BR>[Called By]<UL><LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_task_delete
</UL>

<P><STRONG><a name="[520]"></a>lrc_read</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, lyric.o(i.lrc_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 568 + Unknown Stack Size
<LI>Call Chain = lrc_read &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Erase_Sector &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_memin_malloc
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_memin_free
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_gets
<LI><a href="#[69c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lrc_sequence
<LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lrc_chg_suffix
<LI><a href="#[699]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lrc_analyze
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_path_name
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_memset
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_info_upd
</UL>

<P><STRONG><a name="[69c]"></a>lrc_sequence</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, lyric.o(i.lrc_sequence))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = lrc_sequence
</UL>
<BR>[Called By]<UL><LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lrc_read
</UL>

<P><STRONG><a name="[529]"></a>lrc_show_linelrc</STRONG> (Thumb, 128 bytes, Stack size 40 bytes, lyric.o(i.lrc_show_linelrc))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = lrc_show_linelrc &rArr; f_lseek &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Erase_Sector &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[619]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_gets
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_show_strmid
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_lrc_show
</UL>

<P><STRONG><a name="[69a]"></a>lrc_str2num</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, lyric.o(i.lrc_str2num))
<BR><BR>[Called By]<UL><LI><a href="#[699]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lrc_analyze
</UL>

<P><STRONG><a name="[6a7]"></a>lwip_comm_default_ip_set</STRONG> (Thumb, 78 bytes, Stack size 12 bytes, lwip_comm.o(i.lwip_comm_default_ip_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = lwip_comm_default_ip_set
</UL>
<BR>[Called By]<UL><LI><a href="#[6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_comm_init
</UL>

<P><STRONG><a name="[69d]"></a>lwip_comm_delete_next_timeout</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, lwip_comm.o(i.lwip_comm_delete_next_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = lwip_comm_delete_next_timeout &rArr; sys_untimeout &rArr; memp_free &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_untimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_comm_destroy
</UL>

<P><STRONG><a name="[69f]"></a>lwip_comm_destroy</STRONG> (Thumb, 238 bytes, Stack size 16 bytes, lwip_comm.o(i.lwip_comm_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = lwip_comm_destroy &rArr; netif_remove &rArr; netif_set_down &rArr; etharp_cleanup_netif &rArr; etharp_free_entry &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemDel
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexDel
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_free
<LI><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_remove
<LI><a href="#[6a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_comm_mem_free
<LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_comm_dhcp_delete
<LI><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_comm_delete_next_timeout
<LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_play
</UL>

<P><STRONG><a name="[6a3]"></a>lwip_comm_dhcp_creat</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, lwip_comm.o(i.lwip_comm_dhcp_creat))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = lwip_comm_dhcp_creat &rArr; OSTaskCreate &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_play
<LI><a href="#[6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_comm_init
</UL>

<P><STRONG><a name="[6a0]"></a>lwip_comm_dhcp_delete</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lwip_comm.o(i.lwip_comm_dhcp_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = lwip_comm_dhcp_delete &rArr; dhcp_stop &rArr; udp_remove &rArr; memp_free &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_comm_destroy
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_dhcp_task
</UL>

<P><STRONG><a name="[6a4]"></a>lwip_comm_init</STRONG> (Thumb, 146 bytes, Stack size 40 bytes, lwip_comm.o(i.lwip_comm_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 624 + Unknown Stack Size
<LI>Call Chain = lwip_comm_init &rArr; netif_add &rArr; netif_set_addr &rArr; netif_set_ipaddr &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM9000_Init
<LI><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_comm_dhcp_creat
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexCreate
<LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init
<LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_up
<LI><a href="#[6a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_default
<LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_add
<LI><a href="#[6a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_comm_mem_malloc
<LI><a href="#[6a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_comm_default_ip_set
</UL>
<BR>[Called By]<UL><LI><a href="#[6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_play
</UL>

<P><STRONG><a name="[6a2]"></a>lwip_comm_mem_free</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, lwip_comm.o(i.lwip_comm_mem_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lwip_comm_mem_free &rArr; myfree &rArr; my_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myfree
</UL>
<BR>[Called By]<UL><LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_comm_destroy
<LI><a href="#[6a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_comm_mem_malloc
</UL>

<P><STRONG><a name="[6a5]"></a>lwip_comm_mem_malloc</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, lwip_comm.o(i.lwip_comm_mem_malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = lwip_comm_mem_malloc &rArr; mymalloc &rArr; my_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mymalloc
<LI><a href="#[6aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_get_memorysize
<LI><a href="#[6a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_comm_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_comm_init
</UL>

<P><STRONG><a name="[1d3]"></a>lwip_dhcp_task</STRONG> (Thumb, 302 bytes, Stack size 40 bytes, lwip_comm.o(i.lwip_dhcp_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 496 + Unknown Stack Size
<LI>Call Chain = lwip_dhcp_task &rArr; dhcp_start &rArr; dhcp_discover &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
<LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_comm_dhcp_delete
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip_comm.o(i.lwip_comm_dhcp_creat)
</UL>
<P><STRONG><a name="[1d6]"></a>lwip_dm9000_input_task</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lwip_comm.o(i.lwip_dm9000_input_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = lwip_dm9000_input_task &rArr; ethernetif_input &rArr; DM9000_Receive_Packet &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_input
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip_comm.o(i.lwip_comm_init)
</UL>
<P><STRONG><a name="[57e]"></a>lwip_htonl</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, def.o(i.lwip_htonl))
<BR><BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
<LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_parse_reply
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_ack
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[7c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header
<LI><a href="#[7c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[7cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[7b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[7c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
</UL>

<P><STRONG><a name="[5f6]"></a>lwip_htons</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, def.o(i.lwip_htons))
<BR><BR>[Called By]<UL><LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[686]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass
<LI><a href="#[680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag
<LI><a href="#[67d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo
<LI><a href="#[679]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if
<LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
<LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_arp_input
<LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[7c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header
<LI><a href="#[7c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[7cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_oos_insert_segment
<LI><a href="#[7d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[7be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_fin
<LI><a href="#[7b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
</UL>

<P><STRONG><a name="[6ab]"></a>lwip_init</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, init.o(i.lwip_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = lwip_init &rArr; sys_timeouts_init &rArr; sys_timeout &rArr; memp_malloc &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[6b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_init
<LI><a href="#[6b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_init
<LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeouts_init
<LI><a href="#[6ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_init
<LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_init
<LI><a href="#[6ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_init
<LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_init
<LI><a href="#[6b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_socket_init
</UL>
<BR>[Called By]<UL><LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init
</UL>

<P><STRONG><a name="[581]"></a>lwip_ntohl</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, def.o(i.lwip_ntohl))
<BR><BR>[Called By]<UL><LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
<LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_parse_reply
<LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
<LI><a href="#[689]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[7d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit
<LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[7c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
</UL>

<P><STRONG><a name="[681]"></a>lwip_ntohs</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, def.o(i.lwip_ntohs))
<BR><BR>[Called By]<UL><LI><a href="#[68c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_chain_frag_into_datagram_and_validate
<LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[689]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[686]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass
<LI><a href="#[680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag
<LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
<LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[7ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_parseopt
<LI><a href="#[7cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_oos_insert_segment
<LI><a href="#[7d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[7be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_fin
</UL>

<P><STRONG><a name="[6b0]"></a>lwip_socket_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sockets.o(i.lwip_socket_init))
<BR><BR>[Called By]<UL><LI><a href="#[6ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[230]"></a>main</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, test.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 808 + Unknown Stack Size
<LI>Call Chain = main &rArr; system_init &rArr; app_system_update &rArr; exf_fdcopy &rArr;  exf_fdcopy (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStart
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
<LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_init
</UL>
<BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[1ee]"></a>main_task</STRONG> (Thumb, 218 bytes, Stack size 0 bytes, test.o(i.main_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 1048 + Unknown Stack Size
<LI>Call Chain = main_task &rArr; net_play &rArr; net_test &rArr; t9_check &rArr; t9_process &rArr; t9_pinyin_process &rArr; t9_vbtn_process &rArr; t9_draw &rArr; t9_draw_vbtn &rArr; btn_draw &rArr; btn_draw_picbtn &rArr; minibmp_decode &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Erase_Sector &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[6c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wireless_play
<LI><a href="#[6bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_play
<LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tomcat_play
<LI><a href="#[6ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysset_play
<LI><a href="#[6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spb_stabar_msg_show
<LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spb_move_chk
<LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spb_load_mui
<LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spb_init
<LI><a href="#[6c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sms_play
<LI><a href="#[6b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slcd_frame_show
<LI><a href="#[6be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recorder_play
<LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;picviewer_play
<LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phone_play
<LI><a href="#[6bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;paint_play
<LI><a href="#[6bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;notepad_play
<LI><a href="#[6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_play
<LI><a href="#[6bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nes_play
<LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exe_play
<LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebook_play
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_play
<LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calendar_play
<LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_play
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_play
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_play
</UL>
<BR>[Address Reference Count : 1]<UL><LI> test.o(i.start_task)
</UL>
<P><STRONG><a name="[66e]"></a>mem_free</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, mem.o(i.mem_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = mem_free &rArr; plug_holes &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
<LI><a href="#[6c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plug_holes
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_state_free
</UL>

<P><STRONG><a name="[6ad]"></a>mem_init</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, mem.o(i.mem_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = mem_init &rArr; sys_sem_new &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_new
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[6ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[59a]"></a>mem_malloc</STRONG> (Thumb, 276 bytes, Stack size 24 bytes, mem.o(i.mem_malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = mem_malloc &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
<LI><a href="#[668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_send_data
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_accept
</UL>

<P><STRONG><a name="[6cb]"></a>mem_trim</STRONG> (Thumb, 274 bytes, Stack size 32 bytes, mem.o(i.mem_trim))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = mem_trim &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
</UL>

<P><STRONG><a name="[6cc]"></a>memo_add_text</STRONG> (Thumb, 218 bytes, Stack size 32 bytes, memo.o(i.memo_add_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = memo_add_text &rArr; memo_draw_text &rArr; memo_show_cursor &rArr; gui_show_ptstr &rArr; gui_show_ptfont &rArr; Get_HzMat &rArr; W25QXX_Read &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_memex_malloc
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_memex_free
<LI><a href="#[6ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memo_info_update
<LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memo_get_cursortextpos
<LI><a href="#[6cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memo_draw_text
<LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scrollbar_draw_scrollbar
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[6bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;notepad_play
<LI><a href="#[774]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sms_send_sms
<LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_test
</UL>

<P><STRONG><a name="[5e6]"></a>memo_check</STRONG> (Thumb, 412 bytes, Stack size 24 bytes, memo.o(i.memo_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = memo_check &rArr; memo_draw_text &rArr; memo_show_cursor &rArr; gui_show_ptstr &rArr; gui_show_ptfont &rArr; Get_HzMat &rArr; W25QXX_Read &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_disabs
<LI><a href="#[6d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memo_show_cursor
<LI><a href="#[6cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memo_draw_text
<LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memo_cursor_set
<LI><a href="#[6d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memo_cursor_flash
<LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scrollbar_draw_scrollbar
<LI><a href="#[62e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scrollbar_check
</UL>
<BR>[Called By]<UL><LI><a href="#[6bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;notepad_play
<LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebook_play
<LI><a href="#[774]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sms_send_sms
<LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_test
</UL>

<P><STRONG><a name="[5e4]"></a>memo_creat</STRONG> (Thumb, 224 bytes, Stack size 40 bytes, memo.o(i.memo_creat))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = memo_creat &rArr; scrollbar_creat &rArr; gui_memin_malloc &rArr; mymalloc &rArr; my_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_memin_malloc
<LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memo_delete
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_memset
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_memex_malloc
<LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scrollbar_creat
</UL>
<BR>[Called By]<UL><LI><a href="#[6bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;notepad_play
<LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebook_play
<LI><a href="#[774]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sms_send_sms
<LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_test
</UL>

<P><STRONG><a name="[6d0]"></a>memo_cursor_flash</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, memo.o(i.memo_cursor_flash))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = memo_cursor_flash &rArr; memo_show_cursor &rArr; gui_show_ptstr &rArr; gui_show_ptfont &rArr; Get_HzMat &rArr; W25QXX_Read &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_disabs
<LI><a href="#[6d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memo_show_cursor
</UL>
<BR>[Called By]<UL><LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memo_check
</UL>

<P><STRONG><a name="[6d2]"></a>memo_cursor_set</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, memo.o(i.memo_cursor_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = memo_cursor_set &rArr; memo_show_cursor &rArr; gui_show_ptstr &rArr; gui_show_ptfont &rArr; Get_HzMat &rArr; W25QXX_Read &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[6d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memo_show_cursor
<LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_string_forwardgbk_count
</UL>
<BR>[Called By]<UL><LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memo_check
</UL>

<P><STRONG><a name="[5e2]"></a>memo_delete</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, memo.o(i.memo_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = memo_delete &rArr; gui_memin_free &rArr; myfree &rArr; my_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_memin_free
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_memex_free
<LI><a href="#[6d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scrollbar_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[6bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;notepad_play
<LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebook_play
<LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memo_creat
<LI><a href="#[774]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sms_send_sms
<LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_test
</UL>

<P><STRONG><a name="[6d4]"></a>memo_draw_cursor</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, memo.o(i.memo_draw_cursor))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = memo_draw_cursor
</UL>
<BR>[Calls]<UL><LI><a href="#[6d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memo_get_cursorypos
<LI><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memo_get_cursorxpos
</UL>
<BR>[Called By]<UL><LI><a href="#[6d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memo_show_cursor
</UL>

<P><STRONG><a name="[5e5]"></a>memo_draw_memo</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, memo.o(i.memo_draw_memo))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = memo_draw_memo &rArr; memo_draw_text &rArr; memo_show_cursor &rArr; gui_show_ptstr &rArr; gui_show_ptfont &rArr; Get_HzMat &rArr; W25QXX_Read &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_fill_rectangle
<LI><a href="#[6ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memo_info_update
<LI><a href="#[6cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memo_draw_text
<LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scrollbar_draw_scrollbar
</UL>
<BR>[Called By]<UL><LI><a href="#[6bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;notepad_play
<LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebook_play
<LI><a href="#[774]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sms_send_sms
<LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_test
</UL>

<P><STRONG><a name="[6cf]"></a>memo_draw_text</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, memo.o(i.memo_draw_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = memo_draw_text &rArr; memo_show_cursor &rArr; gui_show_ptstr &rArr; gui_show_ptfont &rArr; Get_HzMat &rArr; W25QXX_Read &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_fill_rectangle
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_show_string
<LI><a href="#[6d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memo_show_cursor
</UL>
<BR>[Called By]<UL><LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memo_add_text
<LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memo_draw_memo
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memo_check
</UL>

<P><STRONG><a name="[6cd]"></a>memo_get_cursortextpos</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, memo.o(i.memo_get_cursortextpos))
<BR><BR>[Called By]<UL><LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memo_add_text
<LI><a href="#[6d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memo_show_cursor
</UL>

<P><STRONG><a name="[6d5]"></a>memo_get_cursorxpos</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, memo.o(i.memo_get_cursorxpos))
<BR><BR>[Called By]<UL><LI><a href="#[6d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memo_show_cursor
<LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memo_draw_cursor
</UL>

<P><STRONG><a name="[6d6]"></a>memo_get_cursorypos</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, memo.o(i.memo_get_cursorypos))
<BR><BR>[Called By]<UL><LI><a href="#[6d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memo_show_cursor
<LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memo_draw_cursor
</UL>

<P><STRONG><a name="[6ce]"></a>memo_info_update</STRONG> (Thumb, 326 bytes, Stack size 32 bytes, memo.o(i.memo_info_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = memo_info_update &rArr; gui_memex_malloc &rArr; mymalloc &rArr; my_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_memex_malloc
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_memex_free
<LI><a href="#[6d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_get_stringline
</UL>
<BR>[Called By]<UL><LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memo_add_text
<LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memo_draw_memo
</UL>

<P><STRONG><a name="[6d1]"></a>memo_show_cursor</STRONG> (Thumb, 228 bytes, Stack size 40 bytes, memo.o(i.memo_show_cursor))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = memo_show_cursor &rArr; gui_show_ptstr &rArr; gui_show_ptfont &rArr; Get_HzMat &rArr; W25QXX_Read &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_show_ptstr
<LI><a href="#[6d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memo_get_cursorypos
<LI><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memo_get_cursorxpos
<LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memo_get_cursortextpos
<LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memo_draw_cursor
</UL>
<BR>[Called By]<UL><LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memo_check
<LI><a href="#[774]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sms_send_sms
<LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_test
<LI><a href="#[6cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memo_draw_text
<LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memo_cursor_set
<LI><a href="#[6d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memo_cursor_flash
</UL>

<P><STRONG><a name="[685]"></a>memp_free</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, memp.o(i.memp_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = memp_free &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[71f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv
<LI><a href="#[716]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new_with_proto_and_callback
<LI><a href="#[71e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_delete
<LI><a href="#[711]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcpserver_remove_timewait
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_input
<LI><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_untimeout
<LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_remove
<LI><a href="#[68d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_dequeue_datagram
<LI><a href="#[684]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag_free_pbuf_custom_ref
<LI><a href="#[689]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_with_backlog
<LI><a href="#[7d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[7c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[7b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
<LI><a href="#[7bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
<LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_remove
<LI><a href="#[735]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_callback_with_block
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_thread
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_free
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_alloc
<LI><a href="#[781]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeouts_mbox_fetch
</UL>

<P><STRONG><a name="[6aa]"></a>memp_get_memorysize</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, memp.o(i.memp_get_memorysize))
<BR><BR>[Called By]<UL><LI><a href="#[6a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_comm_mem_malloc
</UL>

<P><STRONG><a name="[6ae]"></a>memp_init</STRONG> (Thumb, 80 bytes, Stack size 20 bytes, memp.o(i.memp_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = memp_init
</UL>
<BR>[Called By]<UL><LI><a href="#[6ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[682]"></a>memp_malloc</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, memp.o(i.memp_malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = memp_malloc &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[71f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv
<LI><a href="#[71b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_new
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_input
<LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new
<LI><a href="#[686]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass
<LI><a href="#[680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag
<LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_with_backlog
<LI><a href="#[7c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[7d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_copy
<LI><a href="#[7b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
<LI><a href="#[736]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_new
<LI><a href="#[735]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_callback_with_block
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_udp
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_raw
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_alloc
<LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
</UL>

<P><STRONG><a name="[16]"></a>mf_close</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, fattester.o(i.mf_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = mf_close &rArr; f_close &rArr; f_sync &rArr; sync_fs &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Erase_Sector &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usmart_config.o(.data)
</UL>
<P><STRONG><a name="[20]"></a>mf_fmkfs</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fattester.o(i.mf_fmkfs))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = mf_fmkfs &rArr; f_mkfs &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Erase_Sector &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[622]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usmart_config.o(.data)
</UL>
<P><STRONG><a name="[1d]"></a>mf_lseek</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fattester.o(i.mf_lseek))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = mf_lseek &rArr; f_lseek &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Erase_Sector &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[619]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usmart_config.o(.data)
</UL>
<P><STRONG><a name="[21]"></a>mf_mkdir</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fattester.o(i.mf_mkdir))
<BR><BR>[Stack]<UL><LI>Max Depth = 544 + Unknown Stack Size
<LI>Call Chain = mf_mkdir &rArr; f_mkdir &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Erase_Sector &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usmart_config.o(.data)
</UL>
<P><STRONG><a name="[14]"></a>mf_mount</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fattester.o(i.mf_mount))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = mf_mount &rArr; f_mount &rArr; find_volume &rArr; check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Erase_Sector &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usmart_config.o(.data)
</UL>
<P><STRONG><a name="[15]"></a>mf_open</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fattester.o(i.mf_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 536 + Unknown Stack Size
<LI>Call Chain = mf_open &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Erase_Sector &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usmart_config.o(.data)
</UL>
<P><STRONG><a name="[19]"></a>mf_opendir</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fattester.o(i.mf_opendir))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = mf_opendir &rArr; f_opendir &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Erase_Sector &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usmart_config.o(.data)
</UL>
<P><STRONG><a name="[17]"></a>mf_read</STRONG> (Thumb, 210 bytes, Stack size 40 bytes, fattester.o(i.mf_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = mf_read &rArr; f_read &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Erase_Sector &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usmart_config.o(.data)
</UL>
<P><STRONG><a name="[1a]"></a>mf_readdir</STRONG> (Thumb, 170 bytes, Stack size 16 bytes, fattester.o(i.mf_readdir))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = mf_readdir &rArr; f_readdir &rArr; dir_read &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Erase_Sector &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mymalloc
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myfree
<LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usmart_config.o(.data)
</UL>
<P><STRONG><a name="[23]"></a>mf_rename</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fattester.o(i.mf_rename))
<BR><BR>[Stack]<UL><LI>Max Depth = 584 + Unknown Stack Size
<LI>Call Chain = mf_rename &rArr; f_rename &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Erase_Sector &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usmart_config.o(.data)
</UL>
<P><STRONG><a name="[1b]"></a>mf_scan_files</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, fattester.o(i.mf_scan_files))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = mf_scan_files &rArr; f_opendir &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Erase_Sector &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mymalloc
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myfree
<LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usmart_config.o(.data)
</UL>
<P><STRONG><a name="[1c]"></a>mf_showfree</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, fattester.o(i.mf_showfree))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = mf_showfree &rArr; f_getfree &rArr; find_volume &rArr; check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Erase_Sector &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[60f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getfree
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usmart_config.o(.data)
</UL>
<P><STRONG><a name="[1f]"></a>mf_size</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fattester.o(i.mf_size))
<BR>[Address Reference Count : 1]<UL><LI> usmart_config.o(.data)
</UL>
<P><STRONG><a name="[1e]"></a>mf_tell</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fattester.o(i.mf_tell))
<BR>[Address Reference Count : 1]<UL><LI> usmart_config.o(.data)
</UL>
<P><STRONG><a name="[22]"></a>mf_unlink</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fattester.o(i.mf_unlink))
<BR><BR>[Stack]<UL><LI>Max Depth = 512 + Unknown Stack Size
<LI>Call Chain = mf_unlink &rArr; f_unlink &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Erase_Sector &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[62a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usmart_config.o(.data)
</UL>
<P><STRONG><a name="[18]"></a>mf_write</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, fattester.o(i.mf_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = mf_write &rArr; f_write &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Erase_Sector &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usmart_config.o(.data)
</UL>
<P><STRONG><a name="[5bc]"></a>mget_ms</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, inv_mpu.o(i.mget_ms))
<BR><BR>[Called By]<UL><LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_read_fifo
</UL>

<P><STRONG><a name="[4df]"></a>minibmp_decode</STRONG> (Thumb, 734 bytes, Stack size 88 bytes, bmp.o(i.minibmp_decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 624 + Unknown Stack Size
<LI>Call Chain = minibmp_decode &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Erase_Sector &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[6d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;piclib_alpha_blend
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pic_memfree
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pic_memalloc
<LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[619]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
</UL>
<BR>[Called By]<UL><LI><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;paint_pen_color_set
<LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_load_ui
<LI><a href="#[77a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spb_unsel_micos
<LI><a href="#[77b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spb_set_sel
<LI><a href="#[779]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spb_load_micos
<LI><a href="#[778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spb_load_icos
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_show_items
<LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_draw_picbtn
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appplay_set_sel
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appplay_load_ui
<LI><a href="#[7db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tomcat_load_ui
<LI><a href="#[750]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recorder_load_ui
</UL>

<P><STRONG><a name="[1d8]"></a>mp3_file_seek</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, mp3player.o(i.mp3_file_seek))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = mp3_file_seek &rArr; f_lseek &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Erase_Sector &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[619]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mp3player.o(i.mp3_play_song)
</UL>
<P><STRONG><a name="[6db]"></a>mp3_get_curtime</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, mp3player.o(i.mp3_get_curtime))
<BR><BR>[Called By]<UL><LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp3_play_song
</UL>

<P><STRONG><a name="[6d9]"></a>mp3_get_info</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, mp3player.o(i.mp3_get_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mp3_get_info &rArr; VS_Get_HeadInfo &rArr; VS_RD_Reg
</UL>
<BR>[Calls]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VS_RD_Reg
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VS_Get_HeadInfo
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VS_Get_DecodeTime
</UL>
<BR>[Called By]<UL><LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp3_play_song
</UL>

<P><STRONG><a name="[537]"></a>mp3_play_song</STRONG> (Thumb, 288 bytes, Stack size 32 bytes, mp3player.o(i.mp3_play_song))
<BR><BR>[Stack]<UL><LI>Max Depth = 568 + Unknown Stack Size
<LI>Call Chain = mp3_play_song &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Erase_Sector &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mymalloc
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myfree
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VS_Set_All
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VS_Send_MusicData
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VS_SPI_SpeedHigh
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VS_Restart_Play
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VS_Reset_DecodeTime
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VS_Load_Patch
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_typetell
<LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_stop
<LI><a href="#[6da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_start
<LI><a href="#[6d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp3_get_info
<LI><a href="#[6db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp3_get_curtime
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_play_task
</UL>

<P><STRONG><a name="[6dd]"></a>mpu_configure_fifo</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, inv_mpu.o(i.mpu_configure_fifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = mpu_configure_fifo &rArr; mpu_reset_fifo &rArr; MPU_Write_Len &rArr; MPU_IIC_Wait_Ack &rArr; MPU_IIC_Stop &rArr; delay_us &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_reset_fifo
<LI><a href="#[6de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_int_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[6eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_run_self_test
<LI><a href="#[6e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_lp_accel_mode
<LI><a href="#[6df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_init
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_dmp_init
</UL>

<P><STRONG><a name="[4f5]"></a>mpu_dmp_get_data</STRONG> (Thumb, 408 bytes, Stack size 104 bytes, inv_mpu.o(i.mpu_dmp_get_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = mpu_dmp_get_data &rArr; dmp_read_fifo &rArr; mpu_read_fifo_stream &rArr; MPU_Read_Len &rArr; MPU_IIC_Read_Byte &rArr; MPU_IIC_NAck &rArr; delay_us &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_read_fifo
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appplay_gyro
</UL>

<P><STRONG><a name="[4ef]"></a>mpu_dmp_init</STRONG> (Thumb, 158 bytes, Stack size 8 bytes, inv_mpu.o(i.mpu_dmp_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = mpu_dmp_init &rArr; run_self_test &rArr; mpu_run_self_test &rArr; mpu_set_dmp_state &rArr; mpu_set_sample_rate &rArr; mpu_lp_accel_mode &rArr; mpu_configure_fifo &rArr; mpu_reset_fifo &rArr; MPU_Write_Len &rArr; MPU_IIC_Wait_Ack &rArr; MPU_IIC_Stop &rArr; delay_us &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_IIC_Init
<LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_orientation
<LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_fifo_rate
<LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_load_motion_driver_firmware
<LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_feature
<LI><a href="#[6e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_self_test
<LI><a href="#[6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_sensors
<LI><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_sample_rate
<LI><a href="#[6e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_dmp_state
<LI><a href="#[6df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_init
<LI><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_configure_fifo
<LI><a href="#[67e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_orientation_matrix_to_scalar
</UL>
<BR>[Called By]<UL><LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appplay_gyro
</UL>

<P><STRONG><a name="[5c2]"></a>mpu_get_accel_fsr</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, inv_mpu.o(i.mpu_get_accel_fsr))
<BR><BR>[Called By]<UL><LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_tap_thresh
<LI><a href="#[6eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_run_self_test
</UL>

<P><STRONG><a name="[5be]"></a>mpu_get_accel_sens</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, inv_mpu.o(i.mpu_get_accel_sens))
<BR><BR>[Called By]<UL><LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_accel_bias
<LI><a href="#[6e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_self_test
</UL>

<P><STRONG><a name="[6ec]"></a>mpu_get_gyro_fsr</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, inv_mpu.o(i.mpu_get_gyro_fsr))
<BR><BR>[Called By]<UL><LI><a href="#[6eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_run_self_test
</UL>

<P><STRONG><a name="[75a]"></a>mpu_get_gyro_sens</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, inv_mpu.o(i.mpu_get_gyro_sens))
<BR><BR>[Called By]<UL><LI><a href="#[6e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_self_test
</UL>

<P><STRONG><a name="[6ed]"></a>mpu_get_lpf</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, inv_mpu.o(i.mpu_get_lpf))
<BR><BR>[Called By]<UL><LI><a href="#[6eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_run_self_test
</UL>

<P><STRONG><a name="[6ee]"></a>mpu_get_sample_rate</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, inv_mpu.o(i.mpu_get_sample_rate))
<BR><BR>[Called By]<UL><LI><a href="#[6eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_run_self_test
</UL>

<P><STRONG><a name="[6df]"></a>mpu_init</STRONG> (Thumb, 310 bytes, Stack size 32 bytes, inv_mpu.o(i.mpu_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = mpu_init &rArr; mpu_set_sample_rate &rArr; mpu_lp_accel_mode &rArr; mpu_configure_fifo &rArr; mpu_reset_fifo &rArr; MPU_Write_Len &rArr; MPU_IIC_Wait_Ack &rArr; MPU_IIC_Stop &rArr; delay_us &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Write_Len
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Read_Len
<LI><a href="#[6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_sensors
<LI><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_sample_rate
<LI><a href="#[6e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_lpf
<LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_gyro_fsr
<LI><a href="#[6e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_bypass
<LI><a href="#[6e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_accel_fsr
<LI><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_configure_fifo
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_dmp_init
</UL>

<P><STRONG><a name="[5b9]"></a>mpu_load_firmware</STRONG> (Thumb, 158 bytes, Stack size 72 bytes, inv_mpu.o(i.mpu_load_firmware))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = mpu_load_firmware &rArr; mpu_read_mem &rArr; MPU_Read_Len &rArr; MPU_IIC_Read_Byte &rArr; MPU_IIC_NAck &rArr; delay_us &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Write_Len
<LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_write_mem
<LI><a href="#[6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_read_mem
<LI><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_load_motion_driver_firmware
</UL>

<P><STRONG><a name="[6e9]"></a>mpu_lp_accel_mode</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, inv_mpu.o(i.mpu_lp_accel_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = mpu_lp_accel_mode &rArr; mpu_configure_fifo &rArr; mpu_reset_fifo &rArr; MPU_Write_Len &rArr; MPU_IIC_Wait_Ack &rArr; MPU_IIC_Stop &rArr; delay_us &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Write_Len
<LI><a href="#[6e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_lpf
<LI><a href="#[6ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_int_latched
<LI><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_configure_fifo
</UL>
<BR>[Called By]<UL><LI><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_sample_rate
</UL>

<P><STRONG><a name="[5bb]"></a>mpu_read_fifo_stream</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, inv_mpu.o(i.mpu_read_fifo_stream))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = mpu_read_fifo_stream &rArr; MPU_Read_Len &rArr; MPU_IIC_Read_Byte &rArr; MPU_IIC_NAck &rArr; delay_us &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Read_Len
<LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_reset_fifo
</UL>
<BR>[Called By]<UL><LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_read_fifo
</UL>

<P><STRONG><a name="[6e8]"></a>mpu_read_mem</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, inv_mpu.o(i.mpu_read_mem))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = mpu_read_mem &rArr; MPU_Read_Len &rArr; MPU_IIC_Read_Byte &rArr; MPU_IIC_NAck &rArr; delay_us &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Write_Len
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Read_Len
</UL>
<BR>[Called By]<UL><LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_load_firmware
</UL>

<P><STRONG><a name="[5ac]"></a>mpu_reset_fifo</STRONG> (Thumb, 344 bytes, Stack size 24 bytes, inv_mpu.o(i.mpu_reset_fifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = mpu_reset_fifo &rArr; MPU_Write_Len &rArr; MPU_IIC_Wait_Ack &rArr; MPU_IIC_Stop &rArr; delay_us &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Write_Len
</UL>
<BR>[Called By]<UL><LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_lp_quat
<LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_6x_lp_quat
<LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_read_fifo
<LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_feature
<LI><a href="#[6e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_dmp_state
<LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_read_fifo_stream
<LI><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_configure_fifo
</UL>

<P><STRONG><a name="[6eb]"></a>mpu_run_self_test</STRONG> (Thumb, 234 bytes, Stack size 72 bytes, inv_mpu.o(i.mpu_run_self_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = mpu_run_self_test &rArr; mpu_set_dmp_state &rArr; mpu_set_sample_rate &rArr; mpu_lp_accel_mode &rArr; mpu_configure_fifo &rArr; mpu_reset_fifo &rArr; MPU_Write_Len &rArr; MPU_IIC_Wait_Ack &rArr; MPU_IIC_Stop &rArr; delay_us &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_sensors
<LI><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_sample_rate
<LI><a href="#[6e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_lpf
<LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_gyro_fsr
<LI><a href="#[6e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_dmp_state
<LI><a href="#[6e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_accel_fsr
<LI><a href="#[6ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_get_sample_rate
<LI><a href="#[6ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_get_lpf
<LI><a href="#[6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_get_gyro_fsr
<LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_get_accel_fsr
<LI><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_configure_fifo
<LI><a href="#[65c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro_self_test
<LI><a href="#[642]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_st_biases
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accel_self_test
</UL>
<BR>[Called By]<UL><LI><a href="#[6e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_self_test
</UL>

<P><STRONG><a name="[6e5]"></a>mpu_set_accel_fsr</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, inv_mpu.o(i.mpu_set_accel_fsr))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = mpu_set_accel_fsr &rArr; MPU_Write_Len &rArr; MPU_IIC_Wait_Ack &rArr; MPU_IIC_Stop &rArr; delay_us &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Write_Len
</UL>
<BR>[Called By]<UL><LI><a href="#[6eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_run_self_test
<LI><a href="#[6df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_init
</UL>

<P><STRONG><a name="[6e7]"></a>mpu_set_bypass</STRONG> (Thumb, 214 bytes, Stack size 24 bytes, inv_mpu.o(i.mpu_set_bypass))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = mpu_set_bypass &rArr; MPU_Read_Len &rArr; MPU_IIC_Read_Byte &rArr; MPU_IIC_NAck &rArr; delay_us &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Write_Len
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Read_Len
</UL>
<BR>[Called By]<UL><LI><a href="#[6e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_dmp_state
<LI><a href="#[6df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_init
</UL>

<P><STRONG><a name="[6e3]"></a>mpu_set_dmp_state</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, inv_mpu.o(i.mpu_set_dmp_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = mpu_set_dmp_state &rArr; mpu_set_sample_rate &rArr; mpu_lp_accel_mode &rArr; mpu_configure_fifo &rArr; mpu_reset_fifo &rArr; MPU_Write_Len &rArr; MPU_IIC_Wait_Ack &rArr; MPU_IIC_Stop &rArr; delay_us &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Write_Len
<LI><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_sample_rate
<LI><a href="#[6e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_bypass
<LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_reset_fifo
<LI><a href="#[6de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_int_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[6eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_run_self_test
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_dmp_init
</UL>

<P><STRONG><a name="[6e4]"></a>mpu_set_gyro_fsr</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, inv_mpu.o(i.mpu_set_gyro_fsr))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = mpu_set_gyro_fsr &rArr; MPU_Write_Len &rArr; MPU_IIC_Wait_Ack &rArr; MPU_IIC_Stop &rArr; delay_us &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Write_Len
</UL>
<BR>[Called By]<UL><LI><a href="#[6eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_run_self_test
<LI><a href="#[6df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_init
</UL>

<P><STRONG><a name="[6ea]"></a>mpu_set_int_latched</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, inv_mpu.o(i.mpu_set_int_latched))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = mpu_set_int_latched &rArr; MPU_Write_Len &rArr; MPU_IIC_Wait_Ack &rArr; MPU_IIC_Stop &rArr; delay_us &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Write_Len
</UL>
<BR>[Called By]<UL><LI><a href="#[6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_sensors
<LI><a href="#[6e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_lp_accel_mode
</UL>

<P><STRONG><a name="[6e6]"></a>mpu_set_lpf</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, inv_mpu.o(i.mpu_set_lpf))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = mpu_set_lpf &rArr; MPU_Write_Len &rArr; MPU_IIC_Wait_Ack &rArr; MPU_IIC_Stop &rArr; delay_us &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Write_Len
</UL>
<BR>[Called By]<UL><LI><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_sample_rate
<LI><a href="#[6eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_run_self_test
<LI><a href="#[6e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_lp_accel_mode
<LI><a href="#[6df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_init
</UL>

<P><STRONG><a name="[6e1]"></a>mpu_set_sample_rate</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, inv_mpu.o(i.mpu_set_sample_rate))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = mpu_set_sample_rate &rArr; mpu_lp_accel_mode &rArr; mpu_configure_fifo &rArr; mpu_reset_fifo &rArr; MPU_Write_Len &rArr; MPU_IIC_Wait_Ack &rArr; MPU_IIC_Stop &rArr; delay_us &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Write_Len
<LI><a href="#[6e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_lpf
<LI><a href="#[6e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_lp_accel_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[6e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_dmp_state
<LI><a href="#[6eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_run_self_test
<LI><a href="#[6df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_init
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_dmp_init
</UL>

<P><STRONG><a name="[6e0]"></a>mpu_set_sensors</STRONG> (Thumb, 178 bytes, Stack size 24 bytes, inv_mpu.o(i.mpu_set_sensors))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = mpu_set_sensors &rArr; mpu_set_int_latched &rArr; MPU_Write_Len &rArr; MPU_IIC_Wait_Ack &rArr; MPU_IIC_Stop &rArr; delay_us &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Write_Len
<LI><a href="#[6ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_int_latched
</UL>
<BR>[Called By]<UL><LI><a href="#[6eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_run_self_test
<LI><a href="#[6df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_init
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_dmp_init
</UL>

<P><STRONG><a name="[5ab]"></a>mpu_write_mem</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, inv_mpu.o(i.mpu_write_mem))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = mpu_write_mem &rArr; MPU_Write_Len &rArr; MPU_IIC_Wait_Ack &rArr; MPU_IIC_Stop &rArr; delay_us &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Write_Len
</UL>
<BR>[Called By]<UL><LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_tap_time_multi
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_tap_time
<LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_tap_thresh
<LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_tap_count
<LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_tap_axes
<LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_shake_reject_timeout
<LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_shake_reject_time
<LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_shake_reject_thresh
<LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_lp_quat
<LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_gyro_cal
<LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_6x_lp_quat
<LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_orientation
<LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_gyro_bias
<LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_fifo_rate
<LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_accel_bias
<LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_feature
<LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_load_firmware
</UL>

<P><STRONG><a name="[6ef]"></a>my_mem_free</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, malloc.o(i.my_mem_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = my_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myfree
</UL>

<P><STRONG><a name="[2b]"></a>my_mem_init</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, malloc.o(i.my_mem_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = my_mem_init
</UL>
<BR>[Calls]<UL><LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mymemset
</UL>
<BR>[Called By]<UL><LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> malloc.o(.data)
</UL>
<P><STRONG><a name="[6f0]"></a>my_mem_malloc</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, malloc.o(i.my_mem_malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = my_mem_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mymalloc
<LI><a href="#[658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myrealloc
</UL>

<P><STRONG><a name="[2c]"></a>my_mem_perused</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, malloc.o(i.my_mem_perused))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = my_mem_perused
</UL>
<BR>[Called By]<UL><LI><a href="#[6bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;notepad_play
<LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebook_play
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_task
<LI><a href="#[78a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysset_system_status
</UL>
<BR>[Address Reference Count : 1]<UL><LI> malloc.o(.data)
</UL>
<P><STRONG><a name="[482]"></a>myfree</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, malloc.o(i.myfree))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = myfree &rArr; my_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[6ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[79d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_font
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_memin_free
<LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_init
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write
<LI><a href="#[73c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u3_printf
<LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memfree
<LI><a href="#[658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myrealloc
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mf_scan_files
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mf_readdir
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pic_memfree
<LI><a href="#[7df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updata_fontx
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exf_fdsize
<LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exf_fdcopy
<LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exf_copy
<LI><a href="#[6fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nes_load
<LI><a href="#[789]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysset_system_info
<LI><a href="#[78b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysset_system_about
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp3_play_song
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_memex_free
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_muti_remind_msg
<LI><a href="#[6fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nes_sram_malloc
<LI><a href="#[705]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nes_sram_free
<LI><a href="#[703]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nes_sound_open
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alientek_ncr_free
<LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_open
<LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_free
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_free
<LI><a href="#[6a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_comm_mem_free
<LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_new
</UL>

<P><STRONG><a name="[480]"></a>mymalloc</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, malloc.o(i.mymalloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mymalloc &rArr; my_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_mem_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[79d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_font
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_memin_malloc
<LI><a href="#[610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exfuns_init
<LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_init
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write
<LI><a href="#[73c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u3_printf
<LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memalloc
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mf_scan_files
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mf_readdir
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pic_memalloc
<LI><a href="#[7df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updata_fontx
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exf_fdsize
<LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exf_fdcopy
<LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exf_copy
<LI><a href="#[6fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nes_load
<LI><a href="#[789]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysset_system_info
<LI><a href="#[78b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysset_system_about
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp3_play_song
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_memex_malloc
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_muti_remind_msg
<LI><a href="#[6fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nes_sram_malloc
<LI><a href="#[703]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nes_sound_open
<LI><a href="#[700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nes_load_rom
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alientek_ncr_malloc
<LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_open
<LI><a href="#[6a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_comm_mem_malloc
<LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_new
</UL>

<P><STRONG><a name="[6f1]"></a>mymemcpy</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, malloc.o(i.mymemcpy))
<BR><BR>[Called By]<UL><LI><a href="#[658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myrealloc
</UL>

<P><STRONG><a name="[4ad]"></a>mymemset</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, malloc.o(i.mymemset))
<BR><BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_mem_init
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp_encode
<LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gif_initlzw
<LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gif_getnextbyte
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apu_reset
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apu_init
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alientek_ncr_memset
<LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_new
</UL>

<P><STRONG><a name="[658]"></a>myrealloc</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, malloc.o(i.myrealloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = myrealloc &rArr; my_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myfree
<LI><a href="#[6f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mymemcpy
<LI><a href="#[6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_mem_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_memin_realloc
</UL>

<P><STRONG><a name="[508]"></a>nes_apu_fill_buffer</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, nes_main.o(i.nes_apu_fill_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = nes_apu_fill_buffer &rArr; delay_ms &rArr; delay_us &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apu_soundoutput
</UL>

<P><STRONG><a name="[6f2]"></a>nes_clock_set</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, nes_main.o(i.nes_clock_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = nes_clock_set &rArr; uart_init &rArr; MY_NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[6f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_init
</UL>
<BR>[Called By]<UL><LI><a href="#[6fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nes_load
</UL>

<P><STRONG><a name="[6f5]"></a>nes_emulate_frame</STRONG> (Thumb, 280 bytes, Stack size 40 bytes, nes_main.o(i.nes_emulate_frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = nes_emulate_frame &rArr; TPAD_Scan &rArr; TPAD_Get_MaxVal &rArr; TPAD_Get_Val &rArr; TPAD_Reset &rArr; delay_ms &rArr; delay_us &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPAD_Scan
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Set_Window
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_Int_Init
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apu_soundoutput
<LI><a href="#[6f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_vblank
<LI><a href="#[6fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scanline_draw
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run6502
<LI><a href="#[6f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;end_vblank
<LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_scanline_and_dont_draw
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPU_start_frame
<LI><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_enabled
<LI><a href="#[6f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nes_set_window
<LI><a href="#[6fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nes_get_gamepadval
</UL>
<BR>[Called By]<UL><LI><a href="#[6fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nes_load
</UL>

<P><STRONG><a name="[6fa]"></a>nes_get_gamepadval</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, nes_main.o(i.nes_get_gamepadval))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = nes_get_gamepadval &rArr; JOYPAD_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[6fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JOYPAD_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[6f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nes_emulate_frame
</UL>

<P><STRONG><a name="[6fd]"></a>nes_load</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, nes_main.o(i.nes_load))
<BR><BR>[Stack]<UL><LI>Max Depth = 560 + Unknown Stack Size
<LI>Call Chain = nes_load &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Erase_Sector &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mymalloc
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myfree
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPAD_Init
<LI><a href="#[701]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JOYPAD_Init
<LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apu_init
<LI><a href="#[6ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_crc32
<LI><a href="#[702]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu6502_init
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPU_reset
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mapper_Init
<LI><a href="#[6fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nes_sram_malloc
<LI><a href="#[705]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nes_sram_free
<LI><a href="#[703]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nes_sound_open
<LI><a href="#[704]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nes_sound_close
<LI><a href="#[700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nes_load_rom
<LI><a href="#[6f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nes_emulate_frame
<LI><a href="#[6f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nes_clock_set
</UL>
<BR>[Called By]<UL><LI><a href="#[6bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nes_play
</UL>

<P><STRONG><a name="[700]"></a>nes_load_rom</STRONG> (Thumb, 322 bytes, Stack size 24 bytes, nes_main.o(i.nes_load_rom))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = nes_load_rom &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mymalloc
<LI><a href="#[706]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compile
<LI><a href="#[666]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[6fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nes_load
</UL>

<P><STRONG><a name="[6bb]"></a>nes_play</STRONG> (Thumb, 914 bytes, Stack size 128 bytes, nesplay.o(i.nes_play))
<BR><BR>[Stack]<UL><LI>Max Depth = 904 + Unknown Stack Size
<LI>Call Chain = nes_play &rArr; app_muti_remind_msg &rArr; window_draw &rArr; btn_draw &rArr; btn_draw_picbtn &rArr; minibmp_decode &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Erase_Sector &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart3_init
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_memin_malloc
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_memin_free
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPAD_Init
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[6fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nes_load
<LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_task_delete
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_stop_req
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_path_name
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_memset
<LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filelistbox_rebuild_filelist
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filelistbox_draw_listbox
<LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filelistbox_delete
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filelistbox_creat
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filelistbox_check
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filelistbox_back
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filelistbox_add_disk
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filelist_search
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_msg_box
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_draw
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_delete
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_creat
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_check
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_muti_remind_msg
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_filebrower
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_task
</UL>

<P><STRONG><a name="[6f6]"></a>nes_set_window</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, nes_main.o(i.nes_set_window))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = nes_set_window &rArr; LCD_Set_Window &rArr; LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteRAM_Prepare
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Set_Window
</UL>
<BR>[Called By]<UL><LI><a href="#[6f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nes_emulate_frame
</UL>

<P><STRONG><a name="[704]"></a>nes_sound_close</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, nes_main.o(i.nes_sound_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = nes_sound_close &rArr; VS_SPK_Set &rArr; VS_WRAM_Write &rArr; VS_WR_Cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VS_Set_Vol
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VS_SPK_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[6fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nes_load
</UL>

<P><STRONG><a name="[703]"></a>nes_sound_open</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, nes_main.o(i.nes_sound_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = nes_sound_open &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mymalloc
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myfree
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VS_HD_Reset
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM6_Int_Init
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VS_Soft_Reset
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VS_Set_All
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VS_Send_MusicData
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VS_Reset_DecodeTime
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[6fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nes_load
</UL>

<P><STRONG><a name="[705]"></a>nes_sram_free</STRONG> (Thumb, 264 bytes, Stack size 16 bytes, nes_main.o(i.nes_sram_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nes_sram_free &rArr; myfree &rArr; my_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myfree
</UL>
<BR>[Called By]<UL><LI><a href="#[6fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nes_load
<LI><a href="#[6fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nes_sram_malloc
</UL>

<P><STRONG><a name="[6fe]"></a>nes_sram_malloc</STRONG> (Thumb, 350 bytes, Stack size 40 bytes, nes_main.o(i.nes_sram_malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = nes_sram_malloc &rArr; mymalloc &rArr; my_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mymalloc
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myfree
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spb_delete
<LI><a href="#[705]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nes_sram_free
<LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[6fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nes_load
</UL>

<P><STRONG><a name="[44b]"></a>nes_vs10xx_feeddata</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, nes_main.o(i.nes_vs10xx_feeddata))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nes_vs10xx_feeddata
</UL>
<BR>[Calls]<UL><LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_ReadWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM6_IRQHandler
</UL>

<P><STRONG><a name="[707]"></a>net_disconnect</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, netplay.o(i.net_disconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = net_disconnect &rArr; netconn_delete &rArr; netconn_free &rArr; memp_free &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[709]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_disconnect
<LI><a href="#[70a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_delete
<LI><a href="#[708]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_close
</UL>
<BR>[Called By]<UL><LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_test
</UL>

<P><STRONG><a name="[70b]"></a>net_edit_colorset</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, netplay.o(i.net_edit_colorset))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = net_edit_colorset &rArr; edit_draw &rArr; edit_draw_text &rArr; edit_show_cursor &rArr; gui_show_ptstr &rArr; gui_show_ptfont &rArr; Get_HzMat &rArr; W25QXX_Read &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_draw
</UL>
<BR>[Called By]<UL><LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_test
</UL>

<P><STRONG><a name="[70c]"></a>net_get_ip</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, netplay.o(i.net_get_ip))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = net_get_ip &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_memin_malloc
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_memin_free
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_test
</UL>

<P><STRONG><a name="[70d]"></a>net_get_port</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, netplay.o(i.net_get_port))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = net_get_port &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_test
</UL>

<P><STRONG><a name="[70e]"></a>net_load_ui</STRONG> (Thumb, 698 bytes, Stack size 56 bytes, netplay.o(i.net_load_ui))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = net_load_ui &rArr; app_filebrower &rArr; gui_show_strmid &rArr; gui_show_ptstr &rArr; gui_show_ptfont &rArr; Get_HzMat &rArr; W25QXX_Read &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_memin_malloc
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_memin_free
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_fill_rectangle
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM9000_Get_SpeedAndDuplex
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_show_string
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_filebrower
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_play
</UL>

<P><STRONG><a name="[70f]"></a>net_msg_show</STRONG> (Thumb, 336 bytes, Stack size 80 bytes, netplay.o(i.net_msg_show))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = net_msg_show &rArr; gui_show_string &rArr; gui_show_ptfont &rArr; Get_HzMat &rArr; W25QXX_Read &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_memin_malloc
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_memin_free
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_fill_rectangle
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_show_string
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_test
</UL>

<P><STRONG><a name="[6c0]"></a>net_play</STRONG> (Thumb, 584 bytes, Stack size 64 bytes, netplay.o(i.net_play))
<BR><BR>[Stack]<UL><LI>Max Depth = 1048 + Unknown Stack Size
<LI>Call Chain = net_play &rArr; net_test &rArr; t9_check &rArr; t9_process &rArr; t9_pinyin_process &rArr; t9_vbtn_process &rArr; t9_draw &rArr; t9_draw_vbtn &rArr; btn_draw &rArr; btn_draw_picbtn &rArr; minibmp_decode &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Erase_Sector &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_task_delete
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_stop_req
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_msg_box
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_draw
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_delete
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_creat
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_check
<LI><a href="#[6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_comm_init
<LI><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_comm_dhcp_creat
<LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_comm_destroy
<LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpd_init
<LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_test
<LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_load_ui
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_task
</UL>

<P><STRONG><a name="[711]"></a>net_tcpserver_remove_timewait</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, netplay.o(i.net_tcpserver_remove_timewait))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = net_tcpserver_remove_timewait &rArr; tcp_pcb_purge &rArr; tcp_segs_free &rArr; tcp_seg_free &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[712]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
<LI><a href="#[685]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_test
</UL>

<P><STRONG><a name="[710]"></a>net_test</STRONG> (Thumb, 3676 bytes, Stack size 192 bytes, netplay.o(i.net_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 984 + Unknown Stack Size
<LI>Call Chain = net_test &rArr; t9_check &rArr; t9_process &rArr; t9_pinyin_process &rArr; t9_vbtn_process &rArr; t9_draw &rArr; t9_draw_vbtn &rArr; btn_draw &rArr; btn_draw_picbtn &rArr; minibmp_decode &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Erase_Sector &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_memin_malloc
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_memin_free
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_fill_rectangle
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[714]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t9_draw
<LI><a href="#[722]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t9_delete
<LI><a href="#[713]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t9_creat
<LI><a href="#[715]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t9_check
<LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memo_add_text
<LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memo_draw_memo
<LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memo_delete
<LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memo_creat
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memo_check
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_msg_box
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_show_string
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_memex_malloc
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_memex_free
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_hline
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_draw
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_delete
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_creat
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_check
<LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_recover_bkcolor
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_read_bkcolor
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_items_sel
<LI><a href="#[71a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_write_partly
<LI><a href="#[71d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_send
<LI><a href="#[71f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv
<LI><a href="#[716]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new_with_proto_and_callback
<LI><a href="#[718]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_listen_with_backlog
<LI><a href="#[721]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_getaddr
<LI><a href="#[719]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_connect
<LI><a href="#[717]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_bind
<LI><a href="#[720]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_accept
<LI><a href="#[71b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_new
<LI><a href="#[71e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_delete
<LI><a href="#[71c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_alloc
<LI><a href="#[6d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memo_show_cursor
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_show_cursor
<LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_draw
<LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_delete
<LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_creat
<LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_check
<LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_add_text
<LI><a href="#[711]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcpserver_remove_timewait
<LI><a href="#[70f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_msg_show
<LI><a href="#[70d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_get_port
<LI><a href="#[70c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_get_ip
<LI><a href="#[70b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_edit_colorset
<LI><a href="#[707]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_disconnect
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_play
</UL>

<P><STRONG><a name="[71c]"></a>netbuf_alloc</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, netbuf.o(i.netbuf_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = netbuf_alloc &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_test
</UL>

<P><STRONG><a name="[71e]"></a>netbuf_delete</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, netbuf.o(i.netbuf_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = netbuf_delete &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[685]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_test
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_udp
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_raw
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
</UL>

<P><STRONG><a name="[71b]"></a>netbuf_new</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, netbuf.o(i.netbuf_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = netbuf_new &rArr; memp_malloc &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[682]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_test
</UL>

<P><STRONG><a name="[720]"></a>netconn_accept</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, api_lib.o(i.netconn_accept))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = netconn_accept &rArr; sys_arch_mbox_fetch &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<LI><a href="#[723]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_fetch
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_test
</UL>

<P><STRONG><a name="[49d]"></a>netconn_alloc</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, api_msg.o(i.netconn_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = netconn_alloc &rArr; memp_free &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[685]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[682]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_new
<LI><a href="#[724]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_free
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_set_invalid
<LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_new
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[716]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new_with_proto_and_callback
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept_function
</UL>

<P><STRONG><a name="[717]"></a>netconn_bind</STRONG> (Thumb, 72 bytes, Stack size 40 bytes, api_lib.o(i.netconn_bind))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = netconn_bind &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[725]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_apimsg
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_test
</UL>

<P><STRONG><a name="[708]"></a>netconn_close</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, api_lib.o(i.netconn_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = netconn_close &rArr; netconn_close_shutdown &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[726]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_close_shutdown
</UL>
<BR>[Called By]<UL><LI><a href="#[707]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_disconnect
</UL>

<P><STRONG><a name="[719]"></a>netconn_connect</STRONG> (Thumb, 72 bytes, Stack size 40 bytes, api_lib.o(i.netconn_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = netconn_connect &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[725]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_apimsg
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_test
</UL>

<P><STRONG><a name="[70a]"></a>netconn_delete</STRONG> (Thumb, 32 bytes, Stack size 32 bytes, api_lib.o(i.netconn_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = netconn_delete &rArr; netconn_free &rArr; memp_free &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[725]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_apimsg
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_free
</UL>
<BR>[Called By]<UL><LI><a href="#[707]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_disconnect
</UL>

<P><STRONG><a name="[709]"></a>netconn_disconnect</STRONG> (Thumb, 66 bytes, Stack size 40 bytes, api_lib.o(i.netconn_disconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = netconn_disconnect &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[725]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_apimsg
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[707]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_disconnect
</UL>

<P><STRONG><a name="[4a7]"></a>netconn_free</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, api_msg.o(i.netconn_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = netconn_free &rArr; memp_free &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[685]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[729]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_set_invalid
<LI><a href="#[724]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_free
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[70a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_delete
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept_function
</UL>

<P><STRONG><a name="[721]"></a>netconn_getaddr</STRONG> (Thumb, 96 bytes, Stack size 40 bytes, api_lib.o(i.netconn_getaddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = netconn_getaddr &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[725]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_apimsg
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_test
</UL>

<P><STRONG><a name="[718]"></a>netconn_listen_with_backlog</STRONG> (Thumb, 66 bytes, Stack size 40 bytes, api_lib.o(i.netconn_listen_with_backlog))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = netconn_listen_with_backlog &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[725]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_apimsg
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_test
</UL>

<P><STRONG><a name="[716]"></a>netconn_new_with_proto_and_callback</STRONG> (Thumb, 152 bytes, Stack size 40 bytes, api_lib.o(i.netconn_new_with_proto_and_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = netconn_new_with_proto_and_callback &rArr; netconn_alloc &rArr; memp_free &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[685]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_free
<LI><a href="#[725]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_apimsg
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_alloc
<LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_valid
<LI><a href="#[724]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_free
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_test
</UL>

<P><STRONG><a name="[71f]"></a>netconn_recv</STRONG> (Thumb, 194 bytes, Stack size 24 bytes, api_lib.o(i.netconn_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = netconn_recv &rArr; netconn_recv_data &rArr; sys_arch_mbox_fetch &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[685]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[682]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[72a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_data
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_test
</UL>

<P><STRONG><a name="[71d]"></a>netconn_send</STRONG> (Thumb, 70 bytes, Stack size 40 bytes, api_lib.o(i.netconn_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = netconn_send &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[725]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_apimsg
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_test
</UL>

<P><STRONG><a name="[71a]"></a>netconn_write_partly</STRONG> (Thumb, 164 bytes, Stack size 48 bytes, api_lib.o(i.netconn_write_partly))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = netconn_write_partly &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[725]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_apimsg
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_test
</UL>

<P><STRONG><a name="[6a8]"></a>netif_add</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, netif.o(i.netif_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 584 + Unknown Stack Size
<LI>Call Chain = netif_add &rArr; netif_set_addr &rArr; netif_set_ipaddr &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[72b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_comm_init
</UL>

<P><STRONG><a name="[6af]"></a>netif_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, netif.o(i.netif_init))
<BR><BR>[Called By]<UL><LI><a href="#[6ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[6a1]"></a>netif_remove</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, netif.o(i.netif_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = netif_remove &rArr; netif_set_down &rArr; etharp_cleanup_netif &rArr; etharp_free_entry &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_down
</UL>
<BR>[Called By]<UL><LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_comm_destroy
</UL>

<P><STRONG><a name="[72b]"></a>netif_set_addr</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, netif.o(i.netif_set_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 552 + Unknown Stack Size
<LI>Call Chain = netif_set_addr &rArr; netif_set_ipaddr &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_netmask
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_ipaddr
<LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_gw
</UL>
<BR>[Called By]<UL><LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_add
</UL>

<P><STRONG><a name="[6a9]"></a>netif_set_default</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, netif.o(i.netif_set_default))
<BR><BR>[Called By]<UL><LI><a href="#[6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_comm_init
</UL>

<P><STRONG><a name="[590]"></a>netif_set_down</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, netif.o(i.netif_set_down))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = netif_set_down &rArr; etharp_cleanup_netif &rArr; etharp_free_entry &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_cleanup_netif
</UL>
<BR>[Called By]<UL><LI><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_remove
<LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
</UL>

<P><STRONG><a name="[575]"></a>netif_set_gw</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, netif.o(i.netif_set_gw))
<BR><BR>[Called By]<UL><LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
<LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
<LI><a href="#[72b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
</UL>

<P><STRONG><a name="[573]"></a>netif_set_ipaddr</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, netif.o(i.netif_set_ipaddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 536 + Unknown Stack Size
<LI>Call Chain = netif_set_ipaddr &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
</UL>
<BR>[Called By]<UL><LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
<LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
<LI><a href="#[72b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
</UL>

<P><STRONG><a name="[574]"></a>netif_set_netmask</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, netif.o(i.netif_set_netmask))
<BR><BR>[Called By]<UL><LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
<LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
<LI><a href="#[72b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
</UL>

<P><STRONG><a name="[576]"></a>netif_set_up</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, netif.o(i.netif_set_up))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = netif_set_up &rArr; etharp_request &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request
</UL>
<BR>[Called By]<UL><LI><a href="#[6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_comm_init
<LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
</UL>

<P><STRONG><a name="[72c]"></a>notepad_new_pathname</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, notepad.o(i.notepad_new_pathname))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = notepad_new_pathname &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Get
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[6bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;notepad_play
</UL>

<P><STRONG><a name="[6bc]"></a>notepad_play</STRONG> (Thumb, 1314 bytes, Stack size 144 bytes, notepad.o(i.notepad_play))
<BR><BR>[Stack]<UL><LI>Max Depth = 936 + Unknown Stack Size
<LI>Call Chain = notepad_play &rArr; t9_check &rArr; t9_process &rArr; t9_pinyin_process &rArr; t9_vbtn_process &rArr; t9_draw &rArr; t9_draw_vbtn &rArr; btn_draw &rArr; btn_draw_picbtn &rArr; minibmp_decode &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Erase_Sector &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spb_init
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_mem_perused
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_memin_malloc
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_memin_free
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[619]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[714]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t9_draw
<LI><a href="#[722]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t9_delete
<LI><a href="#[713]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t9_creat
<LI><a href="#[715]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t9_check
<LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memo_add_text
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_read_backcolor
<LI><a href="#[72c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;notepad_new_pathname
<LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memo_draw_memo
<LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memo_delete
<LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memo_creat
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memo_check
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_path_name
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_memset
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filelistbox_draw_listbox
<LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filelistbox_delete
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filelistbox_creat
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filelistbox_check
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filelistbox_back
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filelistbox_add_disk
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filelist_search
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_msg_box
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spb_delete
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_draw
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_delete
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_creat
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_check
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_items_sel
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_filebrower
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_task
</UL>

<P><STRONG><a name="[72d]"></a>paint_draw_point</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, paint.o(i.paint_draw_point))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = paint_draw_point &rArr; gui_fill_circle &rArr; gui_draw_hline
</UL>
<BR>[Calls]<UL><LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_fill_circle
</UL>
<BR>[Called By]<UL><LI><a href="#[6c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wireless_play
<LI><a href="#[6bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;paint_play
<LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;paint_pen_size_set
</UL>

<P><STRONG><a name="[72e]"></a>paint_new_pathname</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, paint.o(i.paint_new_pathname))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = paint_new_pathname &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Get
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[6bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;paint_play
</UL>

<P><STRONG><a name="[72f]"></a>paint_pen_color_set</STRONG> (Thumb, 872 bytes, Stack size 104 bytes, paint.o(i.paint_pen_color_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 800 + Unknown Stack Size
<LI>Call Chain = paint_pen_color_set &rArr; window_draw &rArr; btn_draw &rArr; btn_draw_picbtn &rArr; minibmp_decode &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Erase_Sector &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_fill_rectangle
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;minibmp_decode
<LI><a href="#[730]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;paint_show_colorval
<LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_rectangle
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progressbar_draw_progressbar
<LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progressbar_delete
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progressbar_creat
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progressbar_check
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_show_string
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_draw
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_delete
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_creat
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_draw
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_delete
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_creat
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_check
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_tp_is_in_area
</UL>
<BR>[Called By]<UL><LI><a href="#[6bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;paint_play
</UL>

<P><STRONG><a name="[731]"></a>paint_pen_size_set</STRONG> (Thumb, 592 bytes, Stack size 80 bytes, paint.o(i.paint_pen_size_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 776 + Unknown Stack Size
<LI>Call Chain = paint_pen_size_set &rArr; window_draw &rArr; btn_draw &rArr; btn_draw_picbtn &rArr; minibmp_decode &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Erase_Sector &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_fill_rectangle
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[72d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;paint_draw_point
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progressbar_draw_progressbar
<LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progressbar_delete
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progressbar_creat
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progressbar_check
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_show_string
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_draw
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_delete
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_creat
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_show_num
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_draw
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_delete
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_creat
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_check
</UL>
<BR>[Called By]<UL><LI><a href="#[6bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;paint_play
</UL>

<P><STRONG><a name="[6bd]"></a>paint_play</STRONG> (Thumb, 1438 bytes, Stack size 160 bytes, paint.o(i.paint_play))
<BR><BR>[Stack]<UL><LI>Max Depth = 960 + Unknown Stack Size
<LI>Call Chain = paint_play &rArr; paint_pen_color_set &rArr; window_draw &rArr; btn_draw &rArr; btn_draw_picbtn &rArr; minibmp_decode &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Erase_Sector &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_memin_malloc
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_memin_free
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Scan
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp_encode
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_load_picfile
<LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_bline
<LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;paint_pen_size_set
<LI><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;paint_pen_color_set
<LI><a href="#[72e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;paint_new_pathname
<LI><a href="#[72d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;paint_draw_point
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_path_name
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_memset
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filelistbox_draw_listbox
<LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filelistbox_delete
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filelistbox_creat
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filelistbox_check
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filelistbox_back
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filelistbox_add_disk
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filelist_search
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_msg_box
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_memex_malloc
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_memex_free
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_draw
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_delete
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_creat
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_check
<LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_recover_bkcolor
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_read_bkcolor
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_items_sel
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gui_tcbar
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_filebrower
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_task
</UL>

<P><STRONG><a name="[730]"></a>paint_show_colorval</STRONG> (Thumb, 174 bytes, Stack size 72 bytes, paint.o(i.paint_show_colorval))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = paint_show_colorval &rArr; gui_show_ptstr &rArr; gui_show_ptfont &rArr; Get_HzMat &rArr; W25QXX_Read &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_show_ptstr
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_show_num
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;paint_pen_color_set
</UL>

<P><STRONG><a name="[2e1]"></a>pbuf_alloc</STRONG> (Thumb, 468 bytes, Stack size 40 bytes, pbuf.o(i.pbuf_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[682]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc
<LI><a href="#[732]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_pool_is_empty
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM9000_Receive_Packet
<LI><a href="#[71c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_alloc
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<LI><a href="#[680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag
<LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[675]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
<LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
<LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[7ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pbuf_prealloc
<LI><a href="#[7c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header
<LI><a href="#[7b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[7c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
<LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_raw
</UL>

<P><STRONG><a name="[683]"></a>pbuf_alloced_custom</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, pbuf.o(i.pbuf_alloced_custom))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = pbuf_alloced_custom &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag
</UL>

<P><STRONG><a name="[665]"></a>pbuf_cat</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, pbuf.o(i.pbuf_cat))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = pbuf_cat &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[686]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass
<LI><a href="#[680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag
<LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[664]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_parse_request
<LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[733]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_chain
</UL>

<P><STRONG><a name="[733]"></a>pbuf_chain</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, pbuf.o(i.pbuf_chain))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = pbuf_chain &rArr; pbuf_cat &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
<LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
</UL>
<BR>[Called By]<UL><LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
</UL>

<P><STRONG><a name="[667]"></a>pbuf_clen</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, pbuf.o(i.pbuf_clen))
<BR><BR>[Called By]<UL><LI><a href="#[68e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_free_complete_datagram
<LI><a href="#[68c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_chain_frag_into_datagram_and_validate
<LI><a href="#[686]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass
<LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[664]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_parse_request
<LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[7c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
</UL>

<P><STRONG><a name="[5ff]"></a>pbuf_copy</STRONG> (Thumb, 240 bytes, Stack size 32 bytes, pbuf.o(i.pbuf_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = pbuf_copy &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_raw
</UL>

<P><STRONG><a name="[58e]"></a>pbuf_copy_partial</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, pbuf.o(i.pbuf_copy_partial))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = pbuf_copy_partial &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_parse_reply
<LI><a href="#[664]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_parse_request
<LI><a href="#[7d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
</UL>

<P><STRONG><a name="[2e2]"></a>pbuf_free</STRONG> (Thumb, 186 bytes, Stack size 24 bytes, pbuf.o(i.pbuf_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[685]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM9000_Receive_Packet
<LI><a href="#[712]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
<LI><a href="#[71e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_delete
<LI><a href="#[71c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_alloc
<LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_input
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
<LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_msg
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipfrag_free_pbuf_custom
<LI><a href="#[68e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_free_complete_datagram
<LI><a href="#[68c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_chain_frag_into_datagram_and_validate
<LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[689]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[686]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass
<LI><a href="#[680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag
<LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[675]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
<LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
<LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
<LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_update_arp_entry
<LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
<LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_free_entry
<LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_arp_input
<LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_recv
<LI><a href="#[7c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[7cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[7d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[7b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[7c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
<LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_shutdown
<LI><a href="#[7c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_null
<LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_udp
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_tcp
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_raw
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
</UL>

<P><STRONG><a name="[5fa]"></a>pbuf_header</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, pbuf.o(i.pbuf_header))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = pbuf_header &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[689]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[686]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass
<LI><a href="#[679]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if
<LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
<LI><a href="#[7c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
</UL>

<P><STRONG><a name="[584]"></a>pbuf_realloc</STRONG> (Thumb, 186 bytes, Stack size 32 bytes, pbuf.o(i.pbuf_realloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = pbuf_realloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_trim
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
<LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
<LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[7cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_oos_insert_segment
</UL>

<P><STRONG><a name="[600]"></a>pbuf_ref</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, pbuf.o(i.pbuf_ref))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = pbuf_ref
</UL>
<BR>[Calls]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag
<LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[7d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_copy
<LI><a href="#[733]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_chain
</UL>

<P><STRONG><a name="[1e7]"></a>phone_incall_task</STRONG> (Thumb, 1758 bytes, Stack size 136 bytes, phoneplay.o(i.phone_incall_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 904 + Unknown Stack Size
<LI>Call Chain = phone_incall_task &rArr; window_msg_box &rArr; window_draw &rArr; btn_draw &rArr; btn_draw_picbtn &rArr; minibmp_decode &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Erase_Sector &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_memin_malloc
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_memin_free
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Set_Window
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Scan_Dir
<LI><a href="#[73f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sim900a_send_cmd
<LI><a href="#[740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sim900a_cmd_over
<LI><a href="#[73a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sim900a_check_cmd
<LI><a href="#[73c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u3_printf
<LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskResume
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_msg_box
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_memex_malloc
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_memex_free
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spb_delete
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_draw
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_delete
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_creat
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_check
<LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_recover_bkcolor
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_read_bkcolor
<LI><a href="#[73b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phone_show_time
<LI><a href="#[738]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phone_show_phone
<LI><a href="#[73d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phone_show_input
<LI><a href="#[73e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phone_show_clear
<LI><a href="#[739]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phone_show_calling
<LI><a href="#[741]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phone_incall_task_delete
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> phoneplay.o(i.phone_incall_task_creat)
</UL>
<P><STRONG><a name="[742]"></a>phone_incall_task_creat</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, phoneplay.o(i.phone_incall_task_creat))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = phone_incall_task_creat &rArr; OSTaskCreate &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_memin_malloc
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[762]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sim900a_cmsgin_check
</UL>

<P><STRONG><a name="[741]"></a>phone_incall_task_delete</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, phoneplay.o(i.phone_incall_task_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = phone_incall_task_delete &rArr; OSTaskDel &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_memin_free
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phone_incall_task
</UL>

<P><STRONG><a name="[6c2]"></a>phone_play</STRONG> (Thumb, 1840 bytes, Stack size 128 bytes, phoneplay.o(i.phone_play))
<BR><BR>[Stack]<UL><LI>Max Depth = 896 + Unknown Stack Size
<LI>Call Chain = phone_play &rArr; window_msg_box &rArr; window_draw &rArr; btn_draw &rArr; btn_draw_picbtn &rArr; minibmp_decode &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Erase_Sector &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_memin_malloc
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_memin_free
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[73f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sim900a_send_cmd
<LI><a href="#[740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sim900a_cmd_over
<LI><a href="#[73a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sim900a_check_cmd
<LI><a href="#[73c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u3_printf
<LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_msg_box
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_memex_malloc
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_memex_free
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spb_delete
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_draw
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_delete
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_creat
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_check
<LI><a href="#[73b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phone_show_time
<LI><a href="#[738]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phone_show_phone
<LI><a href="#[73d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phone_show_input
<LI><a href="#[73e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phone_show_clear
<LI><a href="#[739]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phone_show_calling
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_task
</UL>

<P><STRONG><a name="[743]"></a>phone_ring</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, phoneplay.o(i.phone_ring))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = phone_ring &rArr; delay_ms &rArr; delay_us &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_task
</UL>

<P><STRONG><a name="[739]"></a>phone_show_calling</STRONG> (Thumb, 112 bytes, Stack size 40 bytes, phoneplay.o(i.phone_show_calling))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = phone_show_calling &rArr; gui_show_strmid &rArr; gui_show_ptstr &rArr; gui_show_ptfont &rArr; Get_HzMat &rArr; W25QXX_Read &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_fill_rectangle
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_show_strmid
</UL>
<BR>[Called By]<UL><LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phone_play
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phone_incall_task
</UL>

<P><STRONG><a name="[73e]"></a>phone_show_clear</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, phoneplay.o(i.phone_show_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = phone_show_clear &rArr; gui_fill_rectangle
</UL>
<BR>[Calls]<UL><LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_fill_rectangle
</UL>
<BR>[Called By]<UL><LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phone_play
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phone_incall_task
</UL>

<P><STRONG><a name="[73d]"></a>phone_show_input</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, phoneplay.o(i.phone_show_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = phone_show_input &rArr; gui_show_strmid &rArr; gui_show_ptstr &rArr; gui_show_ptfont &rArr; Get_HzMat &rArr; W25QXX_Read &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_fill_rectangle
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_show_strmid
</UL>
<BR>[Called By]<UL><LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phone_play
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phone_incall_task
</UL>

<P><STRONG><a name="[738]"></a>phone_show_phone</STRONG> (Thumb, 114 bytes, Stack size 40 bytes, phoneplay.o(i.phone_show_phone))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = phone_show_phone &rArr; gui_show_strmid &rArr; gui_show_ptstr &rArr; gui_show_ptfont &rArr; Get_HzMat &rArr; W25QXX_Read &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_fill_rectangle
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_show_strmid
</UL>
<BR>[Called By]<UL><LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phone_play
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phone_incall_task
</UL>

<P><STRONG><a name="[73b]"></a>phone_show_time</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, phoneplay.o(i.phone_show_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = phone_show_time &rArr; gui_show_strmid &rArr; gui_show_ptstr &rArr; gui_show_ptfont &rArr; Get_HzMat &rArr; W25QXX_Read &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_memin_malloc
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_memin_free
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_fill_rectangle
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_show_strmid
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phone_play
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phone_incall_task
</UL>

<P><STRONG><a name="[53a]"></a>pic_memalloc</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, piclib.o(i.pic_memalloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = pic_memalloc &rArr; mymalloc &rArr; my_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mymalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp_encode
<LI><a href="#[695]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_mallocall
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gif_decode
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stdbmp_decode
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;minibmp_decode
</UL>

<P><STRONG><a name="[53b]"></a>pic_memfree</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, piclib.o(i.pic_memfree))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pic_memfree &rArr; myfree &rArr; my_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myfree
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp_encode
<LI><a href="#[694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_freeall
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gif_decode
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stdbmp_decode
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;minibmp_decode
</UL>

<P><STRONG><a name="[744]"></a>pic_tp_scan</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, picviewer.o(i.pic_tp_scan))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = pic_tp_scan &rArr; delay_ms &rArr; delay_us &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;picviewer_play
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;watch_task
</UL>

<P><STRONG><a name="[6d8]"></a>piclib_alpha_blend</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, piclib.o(i.piclib_alpha_blend))
<BR><BR>[Called By]<UL><LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;minibmp_decode
</UL>

<P><STRONG><a name="[1e8]"></a>piclib_draw_hline</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, piclib.o(i.piclib_draw_hline))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = piclib_draw_hline &rArr; LCD_Fill &rArr;  LCD_Fill (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fill
</UL>
<BR>[Address Reference Count : 1]<UL><LI> piclib.o(i.piclib_init)
</UL>
<P><STRONG><a name="[1e9]"></a>piclib_fill_color</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, piclib.o(i.piclib_fill_color))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = piclib_fill_color &rArr; LCD_Color_Fill &rArr; LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Color_Fill
</UL>
<BR>[Address Reference Count : 2]<UL><LI> spb.o(i.spb_init)
<LI> piclib.o(i.piclib_init)
</UL>
<P><STRONG><a name="[79b]"></a>piclib_init</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, piclib.o(i.piclib_init))
<BR><BR>[Called By]<UL><LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_init
</UL>

<P><STRONG><a name="[6b8]"></a>picviewer_play</STRONG> (Thumb, 854 bytes, Stack size 120 bytes, picviewer.o(i.picviewer_play))
<BR><BR>[Stack]<UL><LI>Max Depth = 824 + Unknown Stack Size
<LI>Call Chain = picviewer_play &rArr; filelistbox_check &rArr; filelistbox_check_filelist &rArr; filelistbox_back &rArr; filelistbox_scan_filelist &rArr; filelistbox_add_disk &rArr; f_getlabel &rArr; dir_read &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Erase_Sector &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[744]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pic_tp_scan
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_memin_malloc
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_memin_free
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_leave
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_enter
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_load_picfile
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_typetell
<LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_path_name
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_memset
<LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filelistbox_rebuild_filelist
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filelistbox_draw_listbox
<LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filelistbox_delete
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filelistbox_creat
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filelistbox_check
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filelistbox_back
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filelistbox_add_disk
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filelist_search
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_show_string
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_draw
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_delete
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_creat
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_check
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_rand
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_filebrower
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_task
</UL>

<P><STRONG><a name="[549]"></a>pow</STRONG> (Thumb, 2512 bytes, Stack size 128 bytes, pow.o(i.pow))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
</UL>
<BR>[Called By]<UL><LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_exe
</UL>

<P><STRONG><a name="[85c]"></a>__mathlib_powf</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, powf.o(i.powf), UNUSED)

<P><STRONG><a name="[247]"></a>powf</STRONG> (Thumb, 1548 bytes, Stack size 48 bytes, powf.o(i.powf))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = powf &rArr; _ffix_r &rArr; __fpl_fnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[746]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ffix_r
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[745]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_overflow
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan2
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_divzero
<LI><a href="#[747]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
</UL>
<BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FeaExtractByGradient
</UL>

<P><STRONG><a name="[52f]"></a>progressbar_check</STRONG> (Thumb, 276 bytes, Stack size 32 bytes, progressbar.o(i.progressbar_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = progressbar_check &rArr; progressbar_setpos &rArr; progressbar_draw_sign &rArr; progressbar_show_percnt &rArr; progressbar_show_char
</UL>
<BR>[Calls]<UL><LI><a href="#[748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progressbar_setpos
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_play
<LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;paint_pen_size_set
<LI><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;paint_pen_color_set
<LI><a href="#[786]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysset_vs1053_vol3d_set
<LI><a href="#[787]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysset_vs1053_eq_set
<LI><a href="#[782]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysset_bklight_set
<LI><a href="#[7d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tomcat_agcspd_set
<LI><a href="#[74d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recorder_agc_set
</UL>

<P><STRONG><a name="[52d]"></a>progressbar_creat</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, progressbar.o(i.progressbar_creat))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = progressbar_creat &rArr; gui_memin_malloc &rArr; mymalloc &rArr; my_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_memin_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_play
<LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;paint_pen_size_set
<LI><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;paint_pen_color_set
<LI><a href="#[786]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysset_vs1053_vol3d_set
<LI><a href="#[787]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysset_vs1053_eq_set
<LI><a href="#[78a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysset_system_status
<LI><a href="#[782]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysset_bklight_set
<LI><a href="#[772]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sms_read_all_sms
<LI><a href="#[7d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tomcat_agcspd_set
<LI><a href="#[74d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recorder_agc_set
</UL>

<P><STRONG><a name="[530]"></a>progressbar_delete</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, progressbar.o(i.progressbar_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = progressbar_delete &rArr; gui_memin_free &rArr; myfree &rArr; my_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_memin_free
</UL>
<BR>[Called By]<UL><LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_play
<LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;paint_pen_size_set
<LI><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;paint_pen_color_set
<LI><a href="#[786]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysset_vs1053_vol3d_set
<LI><a href="#[787]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysset_vs1053_eq_set
<LI><a href="#[78a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysset_system_status
<LI><a href="#[782]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysset_bklight_set
<LI><a href="#[772]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sms_read_all_sms
<LI><a href="#[7d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tomcat_agcspd_set
<LI><a href="#[74d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recorder_agc_set
</UL>

<P><STRONG><a name="[522]"></a>progressbar_draw_progressbar</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, progressbar.o(i.progressbar_draw_progressbar))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = progressbar_draw_progressbar &rArr; progressbar_setpos &rArr; progressbar_draw_sign &rArr; progressbar_show_percnt &rArr; progressbar_show_char
</UL>
<BR>[Calls]<UL><LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_rectangle
<LI><a href="#[748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progressbar_setpos
</UL>
<BR>[Called By]<UL><LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_play
<LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;paint_pen_size_set
<LI><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;paint_pen_color_set
<LI><a href="#[786]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysset_vs1053_vol3d_set
<LI><a href="#[787]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysset_vs1053_eq_set
<LI><a href="#[78a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysset_system_status
<LI><a href="#[782]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysset_bklight_set
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_info_upd
<LI><a href="#[772]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sms_read_all_sms
<LI><a href="#[7d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tomcat_agcspd_set
<LI><a href="#[74d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recorder_agc_set
</UL>

<P><STRONG><a name="[749]"></a>progressbar_draw_sign</STRONG> (Thumb, 294 bytes, Stack size 32 bytes, progressbar.o(i.progressbar_draw_sign))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = progressbar_draw_sign &rArr; progressbar_show_percnt &rArr; progressbar_show_char
</UL>
<BR>[Calls]<UL><LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_fill_rectangle
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_vline
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_hline
<LI><a href="#[74a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progressbar_show_percnt
</UL>
<BR>[Called By]<UL><LI><a href="#[748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progressbar_setpos
</UL>

<P><STRONG><a name="[748]"></a>progressbar_setpos</STRONG> (Thumb, 390 bytes, Stack size 32 bytes, progressbar.o(i.progressbar_setpos))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = progressbar_setpos &rArr; progressbar_draw_sign &rArr; progressbar_show_percnt &rArr; progressbar_show_char
</UL>
<BR>[Calls]<UL><LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_fill_rectangle
<LI><a href="#[749]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progressbar_draw_sign
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progressbar_draw_progressbar
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progressbar_check
</UL>

<P><STRONG><a name="[74b]"></a>progressbar_show_char</STRONG> (Thumb, 148 bytes, Stack size 56 bytes, progressbar.o(i.progressbar_show_char))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = progressbar_show_char
</UL>
<BR>[Called By]<UL><LI><a href="#[74a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progressbar_show_percnt
</UL>

<P><STRONG><a name="[74a]"></a>progressbar_show_percnt</STRONG> (Thumb, 188 bytes, Stack size 40 bytes, progressbar.o(i.progressbar_show_percnt))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = progressbar_show_percnt &rArr; progressbar_show_char
</UL>
<BR>[Calls]<UL><LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_pow
<LI><a href="#[74b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progressbar_show_char
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[749]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progressbar_draw_sign
</UL>

<P><STRONG><a name="[568]"></a>put_fat</STRONG> (Thumb, 244 bytes, Stack size 32 bytes, ff.o(i.put_fat))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Erase_Sector &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[61f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
</UL>

<P><STRONG><a name="[5c3]"></a>raw_bind</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, raw.o(i.raw_bind))
<BR><BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_bind
</UL>

<P><STRONG><a name="[5cb]"></a>raw_connect</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, raw.o(i.raw_connect))
<BR><BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_connect
</UL>

<P><STRONG><a name="[687]"></a>raw_input</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, raw.o(i.raw_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = raw_input
</UL>
<BR>[Called By]<UL><LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
</UL>

<P><STRONG><a name="[736]"></a>raw_new</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, raw.o(i.raw_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = raw_new &rArr; memp_malloc &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[682]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcb_new
</UL>

<P><STRONG><a name="[737]"></a>raw_recv</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, raw.o(i.raw_recv))
<BR><BR>[Called By]<UL><LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcb_new
</UL>

<P><STRONG><a name="[5cd]"></a>raw_remove</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, raw.o(i.raw_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = raw_remove &rArr; memp_free &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[685]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_delconn
</UL>

<P><STRONG><a name="[5db]"></a>raw_send</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, raw.o(i.raw_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = raw_send &rArr; raw_sendto &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_send
</UL>

<P><STRONG><a name="[5da]"></a>raw_sendto</STRONG> (Thumb, 160 bytes, Stack size 40 bytes, raw.o(i.raw_sendto))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = raw_sendto &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[68a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_route
<LI><a href="#[679]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if
<LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[733]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_chain
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_send
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_send
</UL>

<P><STRONG><a name="[40b]"></a>read_2007</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, nes_ppu.o(i.read_2007))
<BR><BR>[Called By]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPU_ReadFromPort
</UL>

<P><STRONG><a name="[8]"></a>read_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usmart.o(i.read_addr))
<BR>[Address Reference Count : 1]<UL><LI> usmart_config.o(.data)
</UL>
<P><STRONG><a name="[74c]"></a>recoder_set_agc</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, recorder.o(i.recoder_set_agc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = recoder_set_agc &rArr; VS_WR_Cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VS_WR_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[6be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recorder_play
<LI><a href="#[7dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tomcat_rec_mode
<LI><a href="#[74d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recorder_agc_set
</UL>

<P><STRONG><a name="[74d]"></a>recorder_agc_set</STRONG> (Thumb, 494 bytes, Stack size 72 bytes, recorder.o(i.recorder_agc_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 768 + Unknown Stack Size
<LI>Call Chain = recorder_agc_set &rArr; window_draw &rArr; btn_draw &rArr; btn_draw_picbtn &rArr; minibmp_decode &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Erase_Sector &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progressbar_draw_progressbar
<LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progressbar_delete
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progressbar_creat
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progressbar_check
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_show_string
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_draw
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_delete
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_creat
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_draw
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_delete
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_creat
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_check
<LI><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recorder_show_agc
<LI><a href="#[74c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recoder_set_agc
</UL>
<BR>[Called By]<UL><LI><a href="#[6be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recorder_play
</UL>

<P><STRONG><a name="[74f]"></a>recorder_enter_rec_mode</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, recorder.o(i.recorder_enter_rec_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = recorder_enter_rec_mode &rArr; delay_ms &rArr; delay_us &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VS_WR_Cmd
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VS_Load_Patch
</UL>
<BR>[Called By]<UL><LI><a href="#[6be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recorder_play
<LI><a href="#[7dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tomcat_rec_mode
</UL>

<P><STRONG><a name="[750]"></a>recorder_load_ui</STRONG> (Thumb, 184 bytes, Stack size 32 bytes, recorder.o(i.recorder_load_ui))
<BR><BR>[Stack]<UL><LI>Max Depth = 656 + Unknown Stack Size
<LI>Call Chain = recorder_load_ui &rArr; minibmp_decode &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Erase_Sector &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_fill_rectangle
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;minibmp_decode
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_show_strmid
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gui_tcbar
<LI><a href="#[751]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recorder_vu_meter
</UL>
<BR>[Called By]<UL><LI><a href="#[6be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recorder_play
</UL>

<P><STRONG><a name="[752]"></a>recorder_new_pathname</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, recorder.o(i.recorder_new_pathname))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = recorder_new_pathname &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Get
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[6be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recorder_play
</UL>

<P><STRONG><a name="[6be]"></a>recorder_play</STRONG> (Thumb, 1884 bytes, Stack size 88 bytes, recorder.o(i.recorder_play))
<BR><BR>[Stack]<UL><LI>Max Depth = 856 + Unknown Stack Size
<LI>Call Chain = recorder_play &rArr; window_msg_box &rArr; window_draw &rArr; btn_draw &rArr; btn_draw_picbtn &rArr; minibmp_decode &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Erase_Sector &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_memin_malloc
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_memin_free
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VS_HD_Reset
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_SetSpeed
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VS_RD_Reg
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[619]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_task_delete
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_stop_req
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_msg_box
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_memex_malloc
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_memex_free
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_draw
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_delete
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_creat
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_check
<LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_recover_bkcolor
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_read_bkcolor
<LI><a href="#[756]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recorder_wav_init
<LI><a href="#[751]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recorder_vu_meter
<LI><a href="#[758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recorder_vu_get
<LI><a href="#[754]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recorder_show_time
<LI><a href="#[753]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recorder_show_samplerate
<LI><a href="#[755]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recorder_show_name
<LI><a href="#[757]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recorder_read_data
<LI><a href="#[752]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recorder_new_pathname
<LI><a href="#[750]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recorder_load_ui
<LI><a href="#[74f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recorder_enter_rec_mode
<LI><a href="#[74d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recorder_agc_set
<LI><a href="#[74c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recoder_set_agc
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_task
</UL>

<P><STRONG><a name="[757]"></a>recorder_read_data</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, recorder.o(i.recorder_read_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = recorder_read_data
</UL>
<BR>[Calls]<UL><LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VS_SPI_ReadWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[6be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recorder_play
</UL>

<P><STRONG><a name="[74e]"></a>recorder_show_agc</STRONG> (Thumb, 88 bytes, Stack size 40 bytes, recorder.o(i.recorder_show_agc))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = recorder_show_agc &rArr; gui_show_string &rArr; gui_show_ptfont &rArr; Get_HzMat &rArr; W25QXX_Read &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_fill_rectangle
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_show_string
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_show_num
</UL>
<BR>[Called By]<UL><LI><a href="#[7d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tomcat_agcspd_set
<LI><a href="#[74d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recorder_agc_set
</UL>

<P><STRONG><a name="[755]"></a>recorder_show_name</STRONG> (Thumb, 72 bytes, Stack size 40 bytes, recorder.o(i.recorder_show_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = recorder_show_name &rArr; gui_show_ptstrwhiterim &rArr; gui_show_ptstr &rArr; gui_show_ptfont &rArr; Get_HzMat &rArr; W25QXX_Read &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_fill_rectangle
<LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_show_ptstrwhiterim
</UL>
<BR>[Called By]<UL><LI><a href="#[6be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recorder_play
</UL>

<P><STRONG><a name="[753]"></a>recorder_show_samplerate</STRONG> (Thumb, 136 bytes, Stack size 40 bytes, recorder.o(i.recorder_show_samplerate))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = recorder_show_samplerate &rArr; gui_show_string &rArr; gui_show_ptfont &rArr; Get_HzMat &rArr; W25QXX_Read &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_memin_malloc
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_memin_free
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_fill_rectangle
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_show_string
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[6be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recorder_play
</UL>

<P><STRONG><a name="[754]"></a>recorder_show_time</STRONG> (Thumb, 140 bytes, Stack size 56 bytes, recorder.o(i.recorder_show_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = recorder_show_time &rArr; gui_show_num &rArr; gui_show_ptchar &rArr; gui_draw_bigpoint
</UL>
<BR>[Calls]<UL><LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_show_ptchar
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_show_num
</UL>
<BR>[Called By]<UL><LI><a href="#[6be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recorder_play
</UL>

<P><STRONG><a name="[758]"></a>recorder_vu_get</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, recorder.o(i.recorder_vu_get))
<BR><BR>[Called By]<UL><LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tomcat_play
<LI><a href="#[6be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recorder_play
</UL>

<P><STRONG><a name="[751]"></a>recorder_vu_meter</STRONG> (Thumb, 144 bytes, Stack size 40 bytes, recorder.o(i.recorder_vu_meter))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = recorder_vu_meter &rArr; gui_fill_rectangle
</UL>
<BR>[Calls]<UL><LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_fill_rectangle
</UL>
<BR>[Called By]<UL><LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tomcat_play
<LI><a href="#[6be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recorder_play
<LI><a href="#[7db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tomcat_load_ui
<LI><a href="#[750]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recorder_load_ui
</UL>

<P><STRONG><a name="[756]"></a>recorder_wav_init</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, recorder.o(i.recorder_wav_init))
<BR><BR>[Called By]<UL><LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tomcat_play
<LI><a href="#[6be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recorder_play
</UL>

<P><STRONG><a name="[5d8]"></a>render_bg</STRONG> (Thumb, 668 bytes, Stack size 40 bytes, nes_ppu.o(i.render_bg))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = render_bg
</UL>
<BR>[Called By]<UL><LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_scanline_and_draw
</UL>

<P><STRONG><a name="[5d9]"></a>render_spr</STRONG> (Thumb, 412 bytes, Stack size 52 bytes, nes_ppu.o(i.render_spr))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = render_spr
</UL>
<BR>[Calls]<UL><LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sprites_8x16
<LI><a href="#[759]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spr_clip_left8
</UL>
<BR>[Called By]<UL><LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_scanline_and_draw
</UL>

<P><STRONG><a name="[6e2]"></a>run_self_test</STRONG> (Thumb, 128 bytes, Stack size 40 bytes, inv_mpu.o(i.run_self_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = run_self_test &rArr; mpu_run_self_test &rArr; mpu_set_dmp_state &rArr; mpu_set_sample_rate &rArr; mpu_lp_accel_mode &rArr; mpu_configure_fifo &rArr; mpu_reset_fifo &rArr; MPU_Write_Len &rArr; MPU_IIC_Wait_Ack &rArr; MPU_IIC_Stop &rArr; delay_us &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_gyro_bias
<LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_accel_bias
<LI><a href="#[6eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_run_self_test
<LI><a href="#[75a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_get_gyro_sens
<LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_get_accel_sens
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_dmp_init
</UL>

<P><STRONG><a name="[6fb]"></a>scanline_draw</STRONG> (Thumb, 1416 bytes, Stack size 24 bytes, nes_ppu.o(i.scanline_draw))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = scanline_draw &rArr; do_scanline_and_draw &rArr; render_spr
</UL>
<BR>[Calls]<UL><LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_scanline_and_draw
</UL>
<BR>[Called By]<UL><LI><a href="#[6f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nes_emulate_frame
</UL>

<P><STRONG><a name="[62e]"></a>scrollbar_check</STRONG> (Thumb, 646 bytes, Stack size 88 bytes, scrollbar.o(i.scrollbar_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = scrollbar_check &rArr; scrollbar_setpos &rArr; scrollbar_draw_btn &rArr; scrollbar_draw_sign
</UL>
<BR>[Calls]<UL><LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_alpha_blend565
<LI><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scrollbar_setpos
<LI><a href="#[75b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scrollbar_draw_btn
</UL>
<BR>[Called By]<UL><LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memo_check
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filelistbox_check
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;listbox_check
</UL>

<P><STRONG><a name="[633]"></a>scrollbar_creat</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, scrollbar.o(i.scrollbar_creat))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = scrollbar_creat &rArr; gui_memin_malloc &rArr; mymalloc &rArr; my_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_memin_malloc
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memo_creat
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filelistbox_creat
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;listbox_creat
</UL>

<P><STRONG><a name="[6d3]"></a>scrollbar_delete</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, scrollbar.o(i.scrollbar_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = scrollbar_delete &rArr; gui_memin_free &rArr; myfree &rArr; my_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_memin_free
</UL>
<BR>[Called By]<UL><LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memo_delete
</UL>

<P><STRONG><a name="[75b]"></a>scrollbar_draw_btn</STRONG> (Thumb, 90 bytes, Stack size 40 bytes, scrollbar.o(i.scrollbar_draw_btn))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = scrollbar_draw_btn &rArr; scrollbar_draw_sign
</UL>
<BR>[Calls]<UL><LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_fill_rectangle
<LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_rectangle
<LI><a href="#[75d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scrollbar_draw_sign
</UL>
<BR>[Called By]<UL><LI><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scrollbar_setpos
<LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scrollbar_draw_scrollbar
<LI><a href="#[62e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scrollbar_check
</UL>

<P><STRONG><a name="[635]"></a>scrollbar_draw_scrollbar</STRONG> (Thumb, 248 bytes, Stack size 32 bytes, scrollbar.o(i.scrollbar_draw_scrollbar))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = scrollbar_draw_scrollbar &rArr; scrollbar_setpos &rArr; scrollbar_draw_btn &rArr; scrollbar_draw_sign
</UL>
<BR>[Calls]<UL><LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_fill_rectangle
<LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_rectangle
<LI><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scrollbar_setpos
<LI><a href="#[75b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scrollbar_draw_btn
</UL>
<BR>[Called By]<UL><LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memo_add_text
<LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memo_draw_memo
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memo_check
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filelistbox_draw_listbox
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;listbox_draw_listbox
</UL>

<P><STRONG><a name="[75d]"></a>scrollbar_draw_sign</STRONG> (Thumb, 74 bytes, Stack size 56 bytes, scrollbar.o(i.scrollbar_draw_sign))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = scrollbar_draw_sign
</UL>
<BR>[Called By]<UL><LI><a href="#[75b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scrollbar_draw_btn
</UL>

<P><STRONG><a name="[75c]"></a>scrollbar_setpos</STRONG> (Thumb, 216 bytes, Stack size 40 bytes, scrollbar.o(i.scrollbar_setpos))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = scrollbar_setpos &rArr; scrollbar_draw_btn &rArr; scrollbar_draw_sign
</UL>
<BR>[Calls]<UL><LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_fill_rectangle
<LI><a href="#[75b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scrollbar_draw_btn
</UL>
<BR>[Called By]<UL><LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scrollbar_draw_scrollbar
<LI><a href="#[62e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scrollbar_check
</UL>

<P><STRONG><a name="[350]"></a>set_CPU_banks</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, nes_mapper.o(i.set_CPU_banks))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = set_CPU_banks
</UL>
<BR>[Calls]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapEF_
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapCD_
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapAB_
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;map89_
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP7_MemoryWrite
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP72_MemoryWrite
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP34_MemoryWrite
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP2_MemoryWrite
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP1_MMC1_set_CPU_banks
</UL>

<P><STRONG><a name="[33e]"></a>set_PPU_bank0</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, nes_mapper.o(i.set_PPU_bank0))
<BR><BR>[Calls]<UL><LI><a href="#[75e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_tile_bank
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP8_MemoryWrite
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP88_MemoryWrite
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP87_MemoryWrite
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP85_MemoryWrite
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP79_MemoryWriteLow
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP78_MemoryWrite
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP76_MemoryWrite
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP75_MemoryWrite
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP70_MemoryWrite
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP69_MemoryWrite
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP67_Reset
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP67_MemoryWrite
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP66_MemoryWrite
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP65_MemoryWrite
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP64_MemoryWrite
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP33_MemoryWrite
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP32_MemoryWrite
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP25_MemoryWrite
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP24_MemoryWrite
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP240_MemoryWriteLow
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP23_MemoryWrite
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP22_MemoryWrite
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP225_MemoryWrite
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP21_MemoryWrite
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP1_MemoryWrite
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP19_Reset
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP19_MemoryWrite
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP18_MemoryWrite
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP189_MemoryWrite
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP17_MemoryWriteLow
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP16_MemoryWrite2
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP11_MemoryWrite
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP113_MemoryWriteLow
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP113_MemoryWrite
</UL>

<P><STRONG><a name="[33f]"></a>set_PPU_bank1</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, nes_mapper.o(i.set_PPU_bank1))
<BR><BR>[Calls]<UL><LI><a href="#[75e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_tile_bank
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP8_MemoryWrite
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP88_MemoryWrite
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP87_MemoryWrite
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP85_MemoryWrite
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP79_MemoryWriteLow
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP78_MemoryWrite
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP76_MemoryWrite
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP75_MemoryWrite
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP70_MemoryWrite
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP69_MemoryWrite
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP67_Reset
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP67_MemoryWrite
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP66_MemoryWrite
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP65_MemoryWrite
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP64_MemoryWrite
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP33_MemoryWrite
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP32_MemoryWrite
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP25_MemoryWrite
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP24_MemoryWrite
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP240_MemoryWriteLow
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP23_MemoryWrite
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP22_MemoryWrite
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP225_MemoryWrite
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP21_MemoryWrite
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP1_MemoryWrite
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP19_Reset
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP19_MemoryWrite
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP18_MemoryWrite
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP189_MemoryWrite
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP17_MemoryWriteLow
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP16_MemoryWrite2
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP11_MemoryWrite
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP113_MemoryWriteLow
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP113_MemoryWrite
</UL>

<P><STRONG><a name="[34d]"></a>set_PPU_bank10</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, nes_mapper.o(i.set_PPU_bank10))
<BR><BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP19_MemoryWrite
</UL>

<P><STRONG><a name="[34e]"></a>set_PPU_bank11</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, nes_mapper.o(i.set_PPU_bank11))
<BR><BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP19_MemoryWrite
</UL>

<P><STRONG><a name="[340]"></a>set_PPU_bank2</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, nes_mapper.o(i.set_PPU_bank2))
<BR><BR>[Calls]<UL><LI><a href="#[75e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_tile_bank
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP8_MemoryWrite
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP88_MemoryWrite
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP87_MemoryWrite
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP85_MemoryWrite
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP79_MemoryWriteLow
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP78_MemoryWrite
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP76_MemoryWrite
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP75_MemoryWrite
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP70_MemoryWrite
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP69_MemoryWrite
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP67_Reset
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP67_MemoryWrite
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP66_MemoryWrite
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP65_MemoryWrite
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP64_MemoryWrite
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP33_MemoryWrite
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP32_MemoryWrite
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP25_MemoryWrite
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP24_MemoryWrite
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP240_MemoryWriteLow
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP23_MemoryWrite
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP22_MemoryWrite
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP225_MemoryWrite
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP21_MemoryWrite
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP1_MemoryWrite
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP19_Reset
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP19_MemoryWrite
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP18_MemoryWrite
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP189_MemoryWrite
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP17_MemoryWriteLow
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP16_MemoryWrite2
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP11_MemoryWrite
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP113_MemoryWriteLow
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP113_MemoryWrite
</UL>

<P><STRONG><a name="[341]"></a>set_PPU_bank3</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, nes_mapper.o(i.set_PPU_bank3))
<BR><BR>[Calls]<UL><LI><a href="#[75e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_tile_bank
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP8_MemoryWrite
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP88_MemoryWrite
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP87_MemoryWrite
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP85_MemoryWrite
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP79_MemoryWriteLow
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP78_MemoryWrite
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP76_MemoryWrite
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP75_MemoryWrite
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP70_MemoryWrite
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP69_MemoryWrite
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP67_Reset
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP67_MemoryWrite
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP66_MemoryWrite
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP65_MemoryWrite
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP64_MemoryWrite
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP33_MemoryWrite
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP32_MemoryWrite
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP25_MemoryWrite
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP24_MemoryWrite
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP240_MemoryWriteLow
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP23_MemoryWrite
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP22_MemoryWrite
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP225_MemoryWrite
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP21_MemoryWrite
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP1_MemoryWrite
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP19_Reset
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP19_MemoryWrite
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP18_MemoryWrite
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP189_MemoryWrite
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP17_MemoryWriteLow
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP16_MemoryWrite2
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP11_MemoryWrite
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP113_MemoryWriteLow
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP113_MemoryWrite
</UL>

<P><STRONG><a name="[342]"></a>set_PPU_bank4</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, nes_mapper.o(i.set_PPU_bank4))
<BR><BR>[Calls]<UL><LI><a href="#[75e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_tile_bank
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP8_MemoryWrite
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP88_MemoryWrite
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP87_MemoryWrite
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP85_MemoryWrite
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP79_MemoryWriteLow
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP78_MemoryWrite
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP76_MemoryWrite
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP75_MemoryWrite
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP70_MemoryWrite
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP69_MemoryWrite
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP67_Reset
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP67_MemoryWrite
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP66_MemoryWrite
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP65_MemoryWrite
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP64_MemoryWrite
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP33_MemoryWrite
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP32_MemoryWrite
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP25_MemoryWrite
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP24_MemoryWrite
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP240_MemoryWriteLow
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP23_MemoryWrite
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP22_MemoryWrite
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP225_MemoryWrite
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP21_MemoryWrite
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP1_MemoryWrite
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP19_Reset
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP19_MemoryWrite
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP18_MemoryWrite
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP189_MemoryWrite
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP17_MemoryWriteLow
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP16_MemoryWrite2
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP11_MemoryWrite
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP113_MemoryWriteLow
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP113_MemoryWrite
</UL>

<P><STRONG><a name="[343]"></a>set_PPU_bank5</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, nes_mapper.o(i.set_PPU_bank5))
<BR><BR>[Calls]<UL><LI><a href="#[75e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_tile_bank
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP8_MemoryWrite
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP88_MemoryWrite
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP87_MemoryWrite
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP85_MemoryWrite
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP79_MemoryWriteLow
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP78_MemoryWrite
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP76_MemoryWrite
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP75_MemoryWrite
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP70_MemoryWrite
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP69_MemoryWrite
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP67_Reset
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP67_MemoryWrite
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP66_MemoryWrite
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP65_MemoryWrite
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP64_MemoryWrite
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP33_MemoryWrite
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP32_MemoryWrite
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP25_MemoryWrite
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP24_MemoryWrite
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP240_MemoryWriteLow
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP23_MemoryWrite
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP22_MemoryWrite
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP225_MemoryWrite
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP21_MemoryWrite
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP1_MemoryWrite
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP19_Reset
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP19_MemoryWrite
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP18_MemoryWrite
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP189_MemoryWrite
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP17_MemoryWriteLow
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP16_MemoryWrite2
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP11_MemoryWrite
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP113_MemoryWriteLow
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP113_MemoryWrite
</UL>

<P><STRONG><a name="[344]"></a>set_PPU_bank6</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, nes_mapper.o(i.set_PPU_bank6))
<BR><BR>[Calls]<UL><LI><a href="#[75e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_tile_bank
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP8_MemoryWrite
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP88_MemoryWrite
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP87_MemoryWrite
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP85_MemoryWrite
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP79_MemoryWriteLow
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP78_MemoryWrite
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP76_MemoryWrite
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP75_MemoryWrite
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP70_MemoryWrite
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP69_MemoryWrite
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP67_Reset
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP67_MemoryWrite
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP66_MemoryWrite
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP65_MemoryWrite
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP64_MemoryWrite
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP33_MemoryWrite
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP32_MemoryWrite
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP25_MemoryWrite
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP24_MemoryWrite
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP240_MemoryWriteLow
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP23_MemoryWrite
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP22_MemoryWrite
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP225_MemoryWrite
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP21_MemoryWrite
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP1_MemoryWrite
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP19_Reset
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP19_MemoryWrite
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP18_MemoryWrite
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP189_MemoryWrite
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP17_MemoryWriteLow
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP16_MemoryWrite2
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP11_MemoryWrite
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP113_MemoryWriteLow
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP113_MemoryWrite
</UL>

<P><STRONG><a name="[345]"></a>set_PPU_bank7</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, nes_mapper.o(i.set_PPU_bank7))
<BR><BR>[Calls]<UL><LI><a href="#[75e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_tile_bank
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP8_MemoryWrite
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP88_MemoryWrite
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP87_MemoryWrite
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP85_MemoryWrite
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP79_MemoryWriteLow
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP78_MemoryWrite
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP76_MemoryWrite
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP75_MemoryWrite
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP70_MemoryWrite
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP69_MemoryWrite
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP67_Reset
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP67_MemoryWrite
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP66_MemoryWrite
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP65_MemoryWrite
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP64_MemoryWrite
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP33_MemoryWrite
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP32_MemoryWrite
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP25_MemoryWrite
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP24_MemoryWrite
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP240_MemoryWriteLow
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP23_MemoryWrite
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP22_MemoryWrite
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP225_MemoryWrite
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP21_MemoryWrite
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP1_MemoryWrite
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP19_Reset
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP19_MemoryWrite
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP18_MemoryWrite
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP189_MemoryWrite
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP17_MemoryWriteLow
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP16_MemoryWrite2
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP11_MemoryWrite
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP113_MemoryWriteLow
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP113_MemoryWrite
</UL>

<P><STRONG><a name="[34b]"></a>set_PPU_bank8</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, nes_mapper.o(i.set_PPU_bank8))
<BR><BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP19_MemoryWrite
</UL>

<P><STRONG><a name="[34c]"></a>set_PPU_bank9</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, nes_mapper.o(i.set_PPU_bank9))
<BR><BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP19_MemoryWrite
</UL>

<P><STRONG><a name="[339]"></a>set_PPU_banks</STRONG> (Thumb, 200 bytes, Stack size 48 bytes, nes_mapper.o(i.set_PPU_banks))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = set_PPU_banks &rArr; set_tile_banks
</UL>
<BR>[Calls]<UL><LI><a href="#[75f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_tile_banks
</UL>
<BR>[Called By]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map4_Set_PPU_Banks
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP99_WriteHighRegs
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP99_Reset
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP8_Reset
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP88_Reset
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP87_Reset
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP85_Reset
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP79_Reset
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP78_Reset
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP76_Reset
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP75_Reset
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP72_Reset
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP72_MemoryWrite
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP6_Reset
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP69_Reset
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP66_Reset
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP65_Reset
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP64_Reset
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP3_Reset
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP3_MemoryWrite
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP34_Reset
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP33_Reset
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP32_Reset
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP25_Reset
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP24_Reset
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP240_Reset
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP23_Reset
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP22_Reset
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP225_Reset
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP1_MemoryWrite
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP189_Reset
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP11_Reset
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP113_Reset
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP0_Reset
</UL>

<P><STRONG><a name="[347]"></a>set_VRAM_bank</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, nes_mapper.o(i.set_VRAM_bank))
<BR><BR>[Calls]<UL><LI><a href="#[760]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_name_table
</UL>
<BR>[Called By]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map4_Set_PPU_Banks
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP85_Reset
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP85_MemoryWrite
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP6_Reset
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP6_MemoryWrite
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP1_MemoryWrite
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP19_MemoryWrite
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP13_Reset
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP13_MemoryWrite
</UL>

<P><STRONG><a name="[346]"></a>set_mirroring</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, nes_ppu.o(i.set_mirroring))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = set_mirroring
</UL>
<BR>[Called By]<UL><LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPU_reset
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP88_MemoryWrite
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP85_MemoryWrite
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP7_MemoryWrite
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP78_MemoryWrite
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP75_MemoryWrite
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP71_MemoryWrite
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP70_MemoryWrite
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP6_MemoryWriteLow
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP69_MemoryWrite
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP67_MemoryWrite
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP65_MemoryWrite
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP64_MemoryWrite
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP4_Write
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP33_MemoryWrite
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP32_MemoryWrite
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP25_MemoryWrite
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP24_MemoryWrite
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP23_MemoryWrite
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP22_MemoryWrite
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP227_MemoryWrite
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP225_MemoryWrite
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP21_MemoryWrite
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP1_MemoryWrite
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP18_MemoryWrite
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP189_MemoryWrite
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP17_MemoryWriteLow
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP16_MemoryWrite2
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP15_MemoryWrite
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP11_Reset
</UL>

<P><STRONG><a name="[760]"></a>set_name_table</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nes_ppu.o(i.set_name_table))
<BR><BR>[Called By]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_VRAM_bank
</UL>

<P><STRONG><a name="[761]"></a>set_search_caption</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, settings.o(i.set_search_caption))
<BR><BR>[Calls]<UL><LI><a href="#[761]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_search_caption
</UL>
<BR>[Called By]<UL><LI><a href="#[6ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysset_play
<LI><a href="#[761]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_search_caption
</UL>

<P><STRONG><a name="[75e]"></a>set_tile_bank</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, nes_ppu.o(i.set_tile_bank))
<BR><BR>[Called By]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank7
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank6
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank5
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank4
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank3
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank2
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank1
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank0
</UL>

<P><STRONG><a name="[75f]"></a>set_tile_banks</STRONG> (Thumb, 26 bytes, Stack size 20 bytes, nes_ppu.o(i.set_tile_banks))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = set_tile_banks
</UL>
<BR>[Called By]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_banks
</UL>

<P><STRONG><a name="[501]"></a>shift_register15</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, nes_apu.o(i.shift_register15))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = shift_register15
</UL>
<BR>[Called By]<UL><LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apu_noise
</UL>

<P><STRONG><a name="[73a]"></a>sim900a_check_cmd</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, sim900a.o(i.sim900a_check_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = sim900a_check_cmd &rArr; strstr
</UL>
<BR>[Calls]<UL><LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[762]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sim900a_cmsgin_check
<LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phone_play
<LI><a href="#[73f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sim900a_send_cmd
<LI><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sms_read_sms
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phone_incall_task
</UL>

<P><STRONG><a name="[767]"></a>sim900a_chr2hex</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, sim900a.o(i.sim900a_chr2hex))
<BR><BR>[Called By]<UL><LI><a href="#[765]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sim900a_unigbk_exchange
</UL>

<P><STRONG><a name="[740]"></a>sim900a_cmd_over</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, sim900a.o(i.sim900a_cmd_over))
<BR><BR>[Called By]<UL><LI><a href="#[764]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sim900a_status_check
<LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phone_play
<LI><a href="#[774]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sms_send_sms
<LI><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sms_read_sms
<LI><a href="#[76d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sms_get_smsnum
<LI><a href="#[769]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sms_delete_sms
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phone_incall_task
</UL>

<P><STRONG><a name="[762]"></a>sim900a_cmsgin_check</STRONG> (Thumb, 236 bytes, Stack size 24 bytes, sim900a.o(i.sim900a_cmsgin_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = sim900a_cmsgin_check &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[763]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sms_remind_msg
<LI><a href="#[742]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phone_incall_task_creat
<LI><a href="#[73a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sim900a_check_cmd
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;watch_task
</UL>

<P><STRONG><a name="[766]"></a>sim900a_hex2chr</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, sim900a.o(i.sim900a_hex2chr))
<BR><BR>[Called By]<UL><LI><a href="#[765]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sim900a_unigbk_exchange
</UL>

<P><STRONG><a name="[73f]"></a>sim900a_send_cmd</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, sim900a.o(i.sim900a_send_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = sim900a_send_cmd &rArr; u3_printf &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[73a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sim900a_check_cmd
<LI><a href="#[73c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u3_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[764]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sim900a_status_check
<LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phone_play
<LI><a href="#[774]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sms_send_sms
<LI><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sms_read_sms
<LI><a href="#[76d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sms_get_smsnum
<LI><a href="#[769]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sms_delete_sms
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phone_incall_task
</UL>

<P><STRONG><a name="[764]"></a>sim900a_status_check</STRONG> (Thumb, 276 bytes, Stack size 8 bytes, sim900a.o(i.sim900a_status_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = sim900a_status_check &rArr; sim900a_send_cmd &rArr; u3_printf &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[73f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sim900a_send_cmd
<LI><a href="#[740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sim900a_cmd_over
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;watch_task
</UL>

<P><STRONG><a name="[765]"></a>sim900a_unigbk_exchange</STRONG> (Thumb, 190 bytes, Stack size 24 bytes, sim900a.o(i.sim900a_unigbk_exchange))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = sim900a_unigbk_exchange &rArr; ff_convert &rArr; W25QXX_Read &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_convert
<LI><a href="#[766]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sim900a_hex2chr
<LI><a href="#[767]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sim900a_chr2hex
</UL>
<BR>[Called By]<UL><LI><a href="#[774]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sms_send_sms
<LI><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sms_read_sms
</UL>

<P><STRONG><a name="[54a]"></a>sin</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, sin.o(i.sin))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>
<BR>[Called By]<UL><LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calendar_circle_clock_showtime
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calendar_circle_clock_drawpanel
<LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro_circle_show
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro_circle_panel
<LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_exe
</UL>

<P><STRONG><a name="[768]"></a>slcd_dma_enable</STRONG> (Thumb, 116 bytes, Stack size 20 bytes, spblcd.o(i.slcd_dma_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = slcd_dma_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[6b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slcd_frame_show
</UL>

<P><STRONG><a name="[79c]"></a>slcd_dma_init</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, spblcd.o(i.slcd_dma_init))
<BR><BR>[Called By]<UL><LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_init
</UL>

<P><STRONG><a name="[1ec]"></a>slcd_draw_point</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, spblcd.o(i.slcd_draw_point))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = slcd_draw_point
</UL>
<BR>[Called By]<UL><LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spb_init
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slcd_fill_color
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spb.o(i.spb_init)
</UL>
<P><STRONG><a name="[1ed]"></a>slcd_fill_color</STRONG> (Thumb, 62 bytes, Stack size 36 bytes, spblcd.o(i.slcd_fill_color))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = slcd_fill_color &rArr; slcd_draw_point
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slcd_draw_point
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spb.o(i.spb_init)
</UL>
<P><STRONG><a name="[6b6]"></a>slcd_frame_show</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, spblcd.o(i.slcd_frame_show))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = slcd_frame_show &rArr; LCD_Set_Window &rArr; LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteRAM_Prepare
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Set_Window
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetCursor
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Scan_Dir
<LI><a href="#[768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slcd_dma_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spb_move_chk
<LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spb_load_mui
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_task
<LI><a href="#[77b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spb_set_sel
<LI><a href="#[776]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spb_frame_move
</UL>

<P><STRONG><a name="[1eb]"></a>slcd_read_point</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, spblcd.o(i.slcd_read_point))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = slcd_read_point
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spb.o(i.spb_init)
</UL>
<P><STRONG><a name="[769]"></a>sms_delete_sms</STRONG> (Thumb, 488 bytes, Stack size 72 bytes, smsplay.o(i.sms_delete_sms))
<BR><BR>[Stack]<UL><LI>Max Depth = 840 + Unknown Stack Size
<LI>Call Chain = sms_delete_sms &rArr; window_msg_box &rArr; window_draw &rArr; btn_draw &rArr; btn_draw_picbtn &rArr; minibmp_decode &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Erase_Sector &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_memin_malloc
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_memin_free
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Get
<LI><a href="#[73f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sim900a_send_cmd
<LI><a href="#[740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sim900a_cmd_over
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_msg_box
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_memex_malloc
<LI><a href="#[76a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sms_node_getnode
<LI><a href="#[76c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sms_node_free
<LI><a href="#[76b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sms_node_delete
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[6c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sms_play
</UL>

<P><STRONG><a name="[76d]"></a>sms_get_smsnum</STRONG> (Thumb, 232 bytes, Stack size 24 bytes, smsplay.o(i.sms_get_smsnum))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = sms_get_smsnum &rArr; sim900a_send_cmd &rArr; u3_printf &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
<LI><a href="#[73f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sim900a_send_cmd
<LI><a href="#[740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sim900a_cmd_over
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskResume
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[772]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sms_read_all_sms
</UL>

<P><STRONG><a name="[76e]"></a>sms_msg_select</STRONG> (Thumb, 536 bytes, Stack size 64 bytes, smsplay.o(i.sms_msg_select))
<BR><BR>[Stack]<UL><LI>Max Depth = 736 + Unknown Stack Size
<LI>Call Chain = sms_msg_select &rArr; btn_check &rArr; btn_draw &rArr; btn_draw_picbtn &rArr; minibmp_decode &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Erase_Sector &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;listbox_draw_listbox
<LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;listbox_delete
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;listbox_creat
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;listbox_check
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;listbox_addlist
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_draw
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_delete
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_creat
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_check
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_filebrower
<LI><a href="#[76f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sms_node_getsize
<LI><a href="#[76a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sms_node_getnode
</UL>
<BR>[Called By]<UL><LI><a href="#[6c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sms_play
</UL>

<P><STRONG><a name="[770]"></a>sms_node_creat</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, smsplay.o(i.sms_node_creat))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = sms_node_creat &rArr; gui_memex_malloc &rArr; mymalloc &rArr; my_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_memex_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[6c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sms_play
<LI><a href="#[774]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sms_send_sms
<LI><a href="#[772]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sms_read_all_sms
</UL>

<P><STRONG><a name="[76b]"></a>sms_node_delete</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, smsplay.o(i.sms_node_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = sms_node_delete &rArr; sms_node_free &rArr; gui_memex_free &rArr; myfree &rArr; my_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[76c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sms_node_free
</UL>
<BR>[Called By]<UL><LI><a href="#[769]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sms_delete_sms
</UL>

<P><STRONG><a name="[771]"></a>sms_node_destroy</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, smsplay.o(i.sms_node_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = sms_node_destroy &rArr; sms_node_free &rArr; gui_memex_free &rArr; myfree &rArr; my_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[76c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sms_node_free
</UL>
<BR>[Called By]<UL><LI><a href="#[6c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sms_play
</UL>

<P><STRONG><a name="[76c]"></a>sms_node_free</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, smsplay.o(i.sms_node_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = sms_node_free &rArr; gui_memex_free &rArr; myfree &rArr; my_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_memex_free
</UL>
<BR>[Called By]<UL><LI><a href="#[6c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sms_play
<LI><a href="#[774]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sms_send_sms
<LI><a href="#[772]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sms_read_all_sms
<LI><a href="#[771]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sms_node_destroy
<LI><a href="#[76b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sms_node_delete
<LI><a href="#[769]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sms_delete_sms
</UL>

<P><STRONG><a name="[76a]"></a>sms_node_getnode</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, smsplay.o(i.sms_node_getnode))
<BR><BR>[Called By]<UL><LI><a href="#[6c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sms_play
<LI><a href="#[76e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sms_msg_select
<LI><a href="#[769]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sms_delete_sms
</UL>

<P><STRONG><a name="[76f]"></a>sms_node_getsize</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, smsplay.o(i.sms_node_getsize))
<BR><BR>[Called By]<UL><LI><a href="#[76e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sms_msg_select
</UL>

<P><STRONG><a name="[775]"></a>sms_node_insert</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, smsplay.o(i.sms_node_insert))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sms_node_insert
</UL>
<BR>[Called By]<UL><LI><a href="#[6c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sms_play
<LI><a href="#[772]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sms_read_all_sms
</UL>

<P><STRONG><a name="[6c3]"></a>sms_play</STRONG> (Thumb, 720 bytes, Stack size 80 bytes, smsplay.o(i.sms_play))
<BR><BR>[Stack]<UL><LI>Max Depth = 992 + Unknown Stack Size
<LI>Call Chain = sms_play &rArr; sms_send_sms &rArr; t9_check &rArr; t9_process &rArr; t9_pinyin_process &rArr; t9_vbtn_process &rArr; t9_draw &rArr; t9_draw_vbtn &rArr; btn_draw &rArr; btn_draw_picbtn &rArr; minibmp_decode &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Erase_Sector &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Get
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_memex_malloc
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_items_sel
<LI><a href="#[774]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sms_send_sms
<LI><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sms_read_sms
<LI><a href="#[772]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sms_read_all_sms
<LI><a href="#[775]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sms_node_insert
<LI><a href="#[76a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sms_node_getnode
<LI><a href="#[76c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sms_node_free
<LI><a href="#[771]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sms_node_destroy
<LI><a href="#[770]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sms_node_creat
<LI><a href="#[76e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sms_msg_select
<LI><a href="#[769]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sms_delete_sms
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_task
</UL>

<P><STRONG><a name="[772]"></a>sms_read_all_sms</STRONG> (Thumb, 318 bytes, Stack size 56 bytes, smsplay.o(i.sms_read_all_sms))
<BR><BR>[Stack]<UL><LI>Max Depth = 752 + Unknown Stack Size
<LI>Call Chain = sms_read_all_sms &rArr; window_draw &rArr; btn_draw &rArr; btn_draw_picbtn &rArr; minibmp_decode &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Erase_Sector &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progressbar_draw_progressbar
<LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progressbar_delete
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progressbar_creat
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_draw
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_delete
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_creat
<LI><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sms_read_sms
<LI><a href="#[775]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sms_node_insert
<LI><a href="#[76c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sms_node_free
<LI><a href="#[770]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sms_node_creat
<LI><a href="#[76d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sms_get_smsnum
</UL>
<BR>[Called By]<UL><LI><a href="#[6c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sms_play
</UL>

<P><STRONG><a name="[773]"></a>sms_read_sms</STRONG> (Thumb, 386 bytes, Stack size 56 bytes, smsplay.o(i.sms_read_sms))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = sms_read_sms &rArr; sim900a_send_cmd &rArr; u3_printf &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_memin_malloc
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_memin_free
<LI><a href="#[765]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sim900a_unigbk_exchange
<LI><a href="#[73f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sim900a_send_cmd
<LI><a href="#[740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sim900a_cmd_over
<LI><a href="#[73a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sim900a_check_cmd
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_memex_malloc
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_memex_free
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[6c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sms_play
<LI><a href="#[774]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sms_send_sms
<LI><a href="#[772]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sms_read_all_sms
</UL>

<P><STRONG><a name="[763]"></a>sms_remind_msg</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, smsplay.o(i.sms_remind_msg))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = sms_remind_msg &rArr; delay_ms &rArr; delay_us &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[762]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sim900a_cmsgin_check
</UL>

<P><STRONG><a name="[774]"></a>sms_send_sms</STRONG> (Thumb, 2066 bytes, Stack size 120 bytes, smsplay.o(i.sms_send_sms))
<BR><BR>[Stack]<UL><LI>Max Depth = 912 + Unknown Stack Size
<LI>Call Chain = sms_send_sms &rArr; t9_check &rArr; t9_process &rArr; t9_pinyin_process &rArr; t9_vbtn_process &rArr; t9_draw &rArr; t9_draw_vbtn &rArr; btn_draw &rArr; btn_draw_picbtn &rArr; minibmp_decode &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Erase_Sector &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_memin_malloc
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_memin_free
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_fill_rectangle
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Get
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[765]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sim900a_unigbk_exchange
<LI><a href="#[73f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sim900a_send_cmd
<LI><a href="#[740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sim900a_cmd_over
<LI><a href="#[73c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u3_printf
<LI><a href="#[714]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t9_draw
<LI><a href="#[722]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t9_delete
<LI><a href="#[713]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t9_creat
<LI><a href="#[715]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t9_check
<LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memo_add_text
<LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memo_draw_memo
<LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memo_delete
<LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memo_creat
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memo_check
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_msg_box
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_show_string
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_show_strmid
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_hline
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_draw
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_delete
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_creat
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_check
<LI><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sms_read_sms
<LI><a href="#[76c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sms_node_free
<LI><a href="#[770]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sms_node_creat
<LI><a href="#[6d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memo_show_cursor
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_show_cursor
<LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_draw
<LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_delete
<LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_creat
<LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_check
<LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_add_text
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[6c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sms_play
</UL>

<P><STRONG><a name="[4bb]"></a>spb_delete</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, spb.o(i.spb_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = spb_delete &rArr; gui_memex_free &rArr; myfree &rArr; my_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_memex_free
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tomcat_play
<LI><a href="#[6ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysset_play
<LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phone_play
<LI><a href="#[6bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;notepad_play
<LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebook_play
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_items_sel
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phone_incall_task
<LI><a href="#[6fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nes_sram_malloc
<LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_open
</UL>

<P><STRONG><a name="[776]"></a>spb_frame_move</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, spb.o(i.spb_frame_move))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = spb_frame_move &rArr; slcd_frame_show &rArr; LCD_Set_Window &rArr; LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[6b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slcd_frame_show
</UL>
<BR>[Called By]<UL><LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spb_move_chk
</UL>

<P><STRONG><a name="[777]"></a>spb_gsm_signal_show</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, spb.o(i.spb_gsm_signal_show))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = spb_gsm_signal_show &rArr; gui_fill_rectangle
</UL>
<BR>[Calls]<UL><LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_fill_rectangle
</UL>
<BR>[Called By]<UL><LI><a href="#[6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spb_stabar_msg_show
</UL>

<P><STRONG><a name="[5e7]"></a>spb_init</STRONG> (Thumb, 1090 bytes, Stack size 48 bytes, spb.o(i.spb_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 720 + Unknown Stack Size
<LI>Call Chain = spb_init &rArr; spb_load_micos &rArr; minibmp_decode &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Erase_Sector &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slcd_draw_point
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_load_picfile
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_memex_malloc
<LI><a href="#[779]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spb_load_micos
<LI><a href="#[778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spb_load_icos
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[6ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysset_play
<LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spb_load_mui
<LI><a href="#[6bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;notepad_play
<LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebook_play
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_task
</UL>

<P><STRONG><a name="[778]"></a>spb_load_icos</STRONG> (Thumb, 128 bytes, Stack size 40 bytes, spb.o(i.spb_load_icos))
<BR><BR>[Stack]<UL><LI>Max Depth = 664 + Unknown Stack Size
<LI>Call Chain = spb_load_icos &rArr; minibmp_decode &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Erase_Sector &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;minibmp_decode
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_show_strmid
</UL>
<BR>[Called By]<UL><LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spb_init
</UL>

<P><STRONG><a name="[779]"></a>spb_load_micos</STRONG> (Thumb, 174 bytes, Stack size 48 bytes, spb.o(i.spb_load_micos))
<BR><BR>[Stack]<UL><LI>Max Depth = 672 + Unknown Stack Size
<LI>Call Chain = spb_load_micos &rArr; minibmp_decode &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Erase_Sector &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_fill_rectangle
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;minibmp_decode
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_show_strmid
</UL>
<BR>[Called By]<UL><LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spb_load_mui
<LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spb_init
</UL>

<P><STRONG><a name="[6b5]"></a>spb_load_mui</STRONG> (Thumb, 128 bytes, Stack size 40 bytes, spb.o(i.spb_load_mui))
<BR><BR>[Stack]<UL><LI>Max Depth = 808 + Unknown Stack Size
<LI>Call Chain = spb_load_mui &rArr; window_msg_box &rArr; window_draw &rArr; btn_draw &rArr; btn_draw_picbtn &rArr; minibmp_decode &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Erase_Sector &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spb_stabar_msg_show
<LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spb_init
<LI><a href="#[6b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slcd_frame_show
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_msg_box
<LI><a href="#[779]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spb_load_micos
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_task
</UL>

<P><STRONG><a name="[6b7]"></a>spb_move_chk</STRONG> (Thumb, 630 bytes, Stack size 40 bytes, spb.o(i.spb_move_chk))
<BR><BR>[Stack]<UL><LI>Max Depth = 736 + Unknown Stack Size
<LI>Call Chain = spb_move_chk &rArr; spb_set_sel &rArr; spb_unsel_micos &rArr; minibmp_decode &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Erase_Sector &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[6b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slcd_frame_show
<LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_disabs
<LI><a href="#[77a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spb_unsel_micos
<LI><a href="#[77b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spb_set_sel
<LI><a href="#[776]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spb_frame_move
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_task
</UL>

<P><STRONG><a name="[77b]"></a>spb_set_sel</STRONG> (Thumb, 316 bytes, Stack size 48 bytes, spb.o(i.spb_set_sel))
<BR><BR>[Stack]<UL><LI>Max Depth = 696 + Unknown Stack Size
<LI>Call Chain = spb_set_sel &rArr; spb_unsel_micos &rArr; minibmp_decode &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Erase_Sector &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[6b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slcd_frame_show
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;minibmp_decode
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_alphablend_area
<LI><a href="#[77a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spb_unsel_micos
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_show_strmid
</UL>
<BR>[Called By]<UL><LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spb_move_chk
</UL>

<P><STRONG><a name="[6c4]"></a>spb_stabar_msg_show</STRONG> (Thumb, 458 bytes, Stack size 56 bytes, spb.o(i.spb_stabar_msg_show))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = spb_stabar_msg_show &rArr; gui_show_string &rArr; gui_show_ptfont &rArr; Get_HzMat &rArr; W25QXX_Read &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_fill_rectangle
<LI><a href="#[77c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_show_mono_icos
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Get
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_show_string
<LI><a href="#[777]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spb_gsm_signal_show
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_show_num
</UL>
<BR>[Called By]<UL><LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spb_load_mui
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_task
</UL>

<P><STRONG><a name="[77a]"></a>spb_unsel_micos</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, spb.o(i.spb_unsel_micos))
<BR><BR>[Stack]<UL><LI>Max Depth = 648 + Unknown Stack Size
<LI>Call Chain = spb_unsel_micos &rArr; minibmp_decode &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Erase_Sector &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_fill_rectangle
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;minibmp_decode
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_show_strmid
</UL>
<BR>[Called By]<UL><LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spb_move_chk
<LI><a href="#[77b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spb_set_sel
</UL>

<P><STRONG><a name="[759]"></a>spr_clip_left8</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nes_ppu.o(i.spr_clip_left8))
<BR><BR>[Called By]<UL><LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;render_spr
</UL>

<P><STRONG><a name="[349]"></a>spr_enabled</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nes_ppu.o(i.spr_enabled))
<BR><BR>[Called By]<UL><LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_scanline_and_dont_draw
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPU_start_frame
<LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_scanline_and_draw
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP67_HSync
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP64_HSync
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP4_HSync
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP33_HSync
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP189_HSync
</UL>

<P><STRONG><a name="[5d5]"></a>sprite0_hit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nes_ppu.o(i.sprite0_hit))
<BR><BR>[Called By]<UL><LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_scanline_and_dont_draw
</UL>

<P><STRONG><a name="[5d6]"></a>sprites_8x16</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nes_ppu.o(i.sprites_8x16))
<BR><BR>[Called By]<UL><LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_scanline_and_dont_draw
<LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;render_spr
</UL>

<P><STRONG><a name="[457]"></a>sqrt</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, sqrt.o(i.sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[77d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Adjust
<LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_exe
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
</UL>

<P><STRONG><a name="[1d7]"></a>start_task</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, test.o(i.start_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = start_task &rArr; OSTaskCreate &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[77e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_srand
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStatInit
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxCreate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> test.o(i.main)
</UL>
<P><STRONG><a name="[6f7]"></a>start_vblank</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, nes_ppu.o(i.start_vblank))
<BR><BR>[Called By]<UL><LI><a href="#[6f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nes_emulate_frame
</UL>

<P><STRONG><a name="[4aa]"></a>stdbmp_decode</STRONG> (Thumb, 506 bytes, Stack size 72 bytes, bmp.o(i.stdbmp_decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 608 + Unknown Stack Size
<LI>Call Chain = stdbmp_decode &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Erase_Sector &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pic_memfree
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pic_memalloc
<LI><a href="#[696]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_element_ok
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_draw_init
<LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_load_picfile
</UL>

<P><STRONG><a name="[641]"></a>str_match</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, pyinput.o(i.str_match))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = str_match
</UL>
<BR>[Called By]<UL><LI><a href="#[640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_matched_pymb
</UL>

<P><STRONG><a name="[723]"></a>sys_arch_mbox_fetch</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, sys_arch.o(i.sys_arch_mbox_fetch))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = sys_arch_mbox_fetch &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeGet
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[720]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_accept
<LI><a href="#[72a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_data
<LI><a href="#[727]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_tryfetch
<LI><a href="#[781]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeouts_mbox_fetch
</UL>

<P><STRONG><a name="[727]"></a>sys_arch_mbox_tryfetch</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sys_arch.o(i.sys_arch_mbox_tryfetch))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = sys_arch_mbox_tryfetch &rArr; sys_arch_mbox_fetch &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[723]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_fetch
</UL>
<BR>[Called By]<UL><LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
</UL>

<P><STRONG><a name="[6c8]"></a>sys_arch_sem_wait</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, sys_arch.o(i.sys_arch_sem_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = sys_arch_sem_wait &rArr; OSSemPend &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeGet
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
</UL>
<BR>[Called By]<UL><LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc
<LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_trim
<LI><a href="#[725]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_apimsg
</UL>

<P><STRONG><a name="[6ac]"></a>sys_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sys_arch.o(i.sys_init))
<BR><BR>[Called By]<UL><LI><a href="#[6ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[4a5]"></a>sys_mbox_free</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, sys_arch.o(i.sys_mbox_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = sys_mbox_free &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myfree
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQDel
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[716]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new_with_proto_and_callback
<LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_comm_destroy
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept_function
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_listen
</UL>

<P><STRONG><a name="[5d1]"></a>sys_mbox_new</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, sys_arch.o(i.sys_mbox_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = sys_mbox_new &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mymalloc
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myfree
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mymemset
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQCreate
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_alloc
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_listen
</UL>

<P><STRONG><a name="[77f]"></a>sys_mbox_post</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, sys_arch.o(i.sys_mbox_post))
<BR><BR>[Stack]<UL><LI>Max Depth = 60 + Unknown Stack Size
<LI>Call Chain = sys_mbox_post &rArr; OSQPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPost
</UL>
<BR>[Called By]<UL><LI><a href="#[735]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_callback_with_block
<LI><a href="#[725]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_apimsg
</UL>

<P><STRONG><a name="[4a6]"></a>sys_mbox_set_invalid</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sys_arch.o(i.sys_mbox_set_invalid))
<BR><BR>[Called By]<UL><LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept_function
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_alloc
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_listen
</UL>

<P><STRONG><a name="[49f]"></a>sys_mbox_trypost</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, sys_arch.o(i.sys_mbox_trypost))
<BR><BR>[Stack]<UL><LI>Max Depth = 52 + Unknown Stack Size
<LI>Call Chain = sys_mbox_trypost &rArr; OSQPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPost
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_input
<LI><a href="#[735]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_callback_with_block
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_udp
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_tcp
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_raw
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_tcp
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept_function
</UL>

<P><STRONG><a name="[49c]"></a>sys_mbox_valid</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, sys_arch.o(i.sys_mbox_valid))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = sys_mbox_valid &rArr; OSQQuery
</UL>
<BR>[Calls]<UL><LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQQuery
<LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[71f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv
<LI><a href="#[716]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new_with_proto_and_callback
<LI><a href="#[720]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_accept
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_input
<LI><a href="#[735]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_callback_with_block
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_udp
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_tcp
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_raw
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_tcp
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept_function
<LI><a href="#[725]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_apimsg
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_free
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_listen
<LI><a href="#[72a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_data
</UL>

<P><STRONG><a name="[724]"></a>sys_sem_free</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, sys_arch.o(i.sys_sem_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = sys_sem_free &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemDel
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[716]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new_with_proto_and_callback
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_free
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_alloc
</UL>

<P><STRONG><a name="[6ca]"></a>sys_sem_new</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, sys_arch.o(i.sys_sem_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = sys_sem_new &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSEventNameSet
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_init
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_alloc
</UL>

<P><STRONG><a name="[729]"></a>sys_sem_set_invalid</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sys_arch.o(i.sys_sem_set_invalid))
<BR><BR>[Called By]<UL><LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_free
</UL>

<P><STRONG><a name="[5c5]"></a>sys_sem_signal</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sys_arch.o(i.sys_sem_signal))
<BR><BR>[Stack]<UL><LI>Max Depth = 44 + Unknown Stack Size
<LI>Call Chain = sys_sem_signal &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
</UL>
<BR>[Called By]<UL><LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc
<LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_trim
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_tcp
<LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_writemore
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_connected
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_close_internal
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_write
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_send
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_recv
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_newconn
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_listen
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_getaddr
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_disconnect
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_delconn
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_connect
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_close
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_bind
</UL>

<P><STRONG><a name="[5ce]"></a>sys_sem_valid</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, sys_arch.o(i.sys_sem_valid))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = sys_sem_valid &rArr; OSSemQuery
</UL>
<BR>[Calls]<UL><LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemQuery
</UL>
<BR>[Called By]<UL><LI><a href="#[716]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new_with_proto_and_callback
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_delconn
</UL>

<P><STRONG><a name="[780]"></a>sys_thread_new</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, sys_arch.o(i.sys_thread_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = sys_thread_new &rArr; OSTaskCreate &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init
</UL>

<P><STRONG><a name="[50a]"></a>sys_timeout</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, timers.o(i.sys_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = sys_timeout &rArr; memp_malloc &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[682]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_timer
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timer_fine
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timer_coarse
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_timer
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_tcp_timer
<LI><a href="#[7bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timer_needed
<LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeouts_init
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_thread
</UL>

<P><STRONG><a name="[6b3]"></a>sys_timeouts_init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, timers.o(i.sys_timeouts_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = sys_timeouts_init &rArr; sys_timeout &rArr; memp_malloc &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[6ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[781]"></a>sys_timeouts_mbox_fetch</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, timers.o(i.sys_timeouts_mbox_fetch))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = sys_timeouts_mbox_fetch &rArr; sys_arch_mbox_fetch &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[685]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[723]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_fetch
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_thread
</UL>

<P><STRONG><a name="[69e]"></a>sys_untimeout</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, timers.o(i.sys_untimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = sys_untimeout &rArr; memp_free &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[685]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_comm_delete_next_timeout
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_thread
</UL>

<P><STRONG><a name="[782]"></a>sysset_bklight_set</STRONG> (Thumb, 608 bytes, Stack size 72 bytes, settings.o(i.sysset_bklight_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 768 + Unknown Stack Size
<LI>Call Chain = sysset_bklight_set &rArr; window_draw &rArr; btn_draw &rArr; btn_draw_picbtn &rArr; minibmp_decode &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Erase_Sector &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_memin_malloc
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_memin_free
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_fill_rectangle
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_lcd_auto_bklight
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SSD_BackLightSet
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progressbar_draw_progressbar
<LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progressbar_delete
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progressbar_creat
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progressbar_check
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_show_string
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_draw
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_delete
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_creat
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_draw
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_delete
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_creat
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_check
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[6ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysset_play
</UL>

<P><STRONG><a name="[783]"></a>sysset_date_set</STRONG> (Thumb, 1058 bytes, Stack size 104 bytes, settings.o(i.sysset_date_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 800 + Unknown Stack Size
<LI>Call Chain = sysset_date_set &rArr; window_draw &rArr; btn_draw &rArr; btn_draw_picbtn &rArr; minibmp_decode &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Erase_Sector &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_fill_rectangle
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[784]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysset_is_leap_year
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_draw
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_delete
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_creat
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_draw
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_delete
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_creat
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_check
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_show_nummid
</UL>
<BR>[Called By]<UL><LI><a href="#[6ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysset_play
</UL>

<P><STRONG><a name="[784]"></a>sysset_is_leap_year</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, settings.o(i.sysset_is_leap_year))
<BR><BR>[Called By]<UL><LI><a href="#[783]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysset_date_set
</UL>

<P><STRONG><a name="[6ba]"></a>sysset_play</STRONG> (Thumb, 1794 bytes, Stack size 96 bytes, settings.o(i.sysset_play))
<BR><BR>[Stack]<UL><LI>Max Depth = 928 + Unknown Stack Size
<LI>Call Chain = sysset_play &rArr; sysset_system_update &rArr; window_msg_box &rArr; window_draw &rArr; btn_draw &rArr; btn_draw_picbtn &rArr; minibmp_decode &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Erase_Sector &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spb_init
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_lcd_auto_bklight
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Adjust
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Get
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SSD_BackLightSet
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vs10xx_save_para
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VS_Set_All
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VS_SPK_Set
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Set
<LI><a href="#[786]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysset_vs1053_vol3d_set
<LI><a href="#[787]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysset_vs1053_eq_set
<LI><a href="#[785]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysset_time_set
<LI><a href="#[788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysset_system_update
<LI><a href="#[78a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysset_system_status
<LI><a href="#[789]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysset_system_info
<LI><a href="#[78b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysset_system_about
<LI><a href="#[783]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysset_date_set
<LI><a href="#[782]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysset_bklight_set
<LI><a href="#[761]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_search_caption
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_msg_box
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysset_save_para
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spb_delete
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calendar_save_para
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calendar_alarm_init
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_set_default
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_listbox_select
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_items_sel
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_task
</UL>

<P><STRONG><a name="[4e6]"></a>sysset_read_para</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, settings.o(i.sysset_read_para))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = sysset_read_para &rArr; AT24CXX_Read &rArr; AT24CXX_ReadOneByte &rArr; IIC_Read_Byte &rArr; IIC_NAck &rArr; delay_us &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_system_parameter_init
</UL>

<P><STRONG><a name="[4d8]"></a>sysset_save_para</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, settings.o(i.sysset_save_para))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = sysset_save_para &rArr; AT24CXX_Write &rArr; AT24CXX_WriteOneByte &rArr; IIC_Wait_Ack &rArr; IIC_Stop &rArr; delay_us &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[6ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysset_play
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_system_parameter_init
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_set_default
</UL>

<P><STRONG><a name="[78b]"></a>sysset_system_about</STRONG> (Thumb, 596 bytes, Stack size 80 bytes, settings.o(i.sysset_system_about))
<BR><BR>[Stack]<UL><LI>Max Depth = 776 + Unknown Stack Size
<LI>Call Chain = sysset_system_about &rArr; window_draw &rArr; btn_draw &rArr; btn_draw_picbtn &rArr; minibmp_decode &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Erase_Sector &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mymalloc
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myfree
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[78c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_version
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_show_ptstr
<LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_rectangle
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_show_string
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_draw
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_delete
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_creat
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_draw
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_delete
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_creat
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_check
<LI><a href="#[78d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_getstm32_sn
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[6ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysset_play
</UL>

<P><STRONG><a name="[789]"></a>sysset_system_info</STRONG> (Thumb, 526 bytes, Stack size 72 bytes, settings.o(i.sysset_system_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 768 + Unknown Stack Size
<LI>Call Chain = sysset_system_info &rArr; window_draw &rArr; btn_draw &rArr; btn_draw_picbtn &rArr; minibmp_decode &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Erase_Sector &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mymalloc
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myfree
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exf_getfree
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[78c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_version
<LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_num2str
<LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_rectangle
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_show_string
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_draw
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_delete
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_creat
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_draw
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_delete
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_creat
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_check
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[6ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysset_play
</UL>

<P><STRONG><a name="[78a]"></a>sysset_system_status</STRONG> (Thumb, 634 bytes, Stack size 80 bytes, settings.o(i.sysset_system_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 776 + Unknown Stack Size
<LI>Call Chain = sysset_system_status &rArr; window_draw &rArr; btn_draw &rArr; btn_draw_picbtn &rArr; minibmp_decode &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Erase_Sector &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_mem_perused
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Temprate
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progressbar_draw_progressbar
<LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progressbar_delete
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progressbar_creat
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_show_string
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_draw
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_delete
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_creat
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_draw
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_delete
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_creat
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_check
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_show_float
</UL>
<BR>[Called By]<UL><LI><a href="#[6ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysset_play
</UL>

<P><STRONG><a name="[788]"></a>sysset_system_update</STRONG> (Thumb, 434 bytes, Stack size 64 bytes, settings.o(i.sysset_system_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 832 + Unknown Stack Size
<LI>Call Chain = sysset_system_update &rArr; window_msg_box &rArr; window_draw &rArr; btn_draw &rArr; btn_draw_picbtn &rArr; minibmp_decode &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Erase_Sector &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_fill_rectangle
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_system_update
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_system_file_check
<LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_rectangle
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_msg_box
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_show_string
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_draw
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_delete
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_creat
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_show_num
</UL>
<BR>[Called By]<UL><LI><a href="#[6ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysset_play
</UL>

<P><STRONG><a name="[1f1]"></a>sysset_system_update_cpymsg</STRONG> (Thumb, 344 bytes, Stack size 56 bytes, settings.o(i.sysset_system_update_cpymsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = sysset_system_update_cpymsg &rArr; gui_show_string &rArr; gui_show_ptfont &rArr; Get_HzMat &rArr; W25QXX_Read &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_fill_rectangle
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_show_string
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_show_num
</UL>
<BR>[Address Reference Count : 1]<UL><LI> settings.o(i.sysset_system_update)
</UL>
<P><STRONG><a name="[785]"></a>sysset_time_set</STRONG> (Thumb, 848 bytes, Stack size 88 bytes, settings.o(i.sysset_time_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 784 + Unknown Stack Size
<LI>Call Chain = sysset_time_set &rArr; window_draw &rArr; btn_draw &rArr; btn_draw_picbtn &rArr; minibmp_decode &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Erase_Sector &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_fill_rectangle
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_draw
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_delete
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_creat
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_draw
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_delete
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_creat
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_check
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_show_nummid
</UL>
<BR>[Called By]<UL><LI><a href="#[6ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysset_play
</UL>

<P><STRONG><a name="[787]"></a>sysset_vs1053_eq_set</STRONG> (Thumb, 768 bytes, Stack size 80 bytes, settings.o(i.sysset_vs1053_eq_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 776 + Unknown Stack Size
<LI>Call Chain = sysset_vs1053_eq_set &rArr; window_draw &rArr; btn_draw &rArr; btn_draw_picbtn &rArr; minibmp_decode &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Erase_Sector &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VS_Set_Bass
<LI><a href="#[78e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysset_vs1053_eq_show
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progressbar_draw_progressbar
<LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progressbar_delete
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progressbar_creat
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progressbar_check
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_show_string
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_draw
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_delete
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_creat
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_draw
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_delete
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_creat
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_check
</UL>
<BR>[Called By]<UL><LI><a href="#[6ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysset_play
</UL>

<P><STRONG><a name="[78e]"></a>sysset_vs1053_eq_show</STRONG> (Thumb, 280 bytes, Stack size 72 bytes, settings.o(i.sysset_vs1053_eq_show))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = sysset_vs1053_eq_show &rArr; app_show_float &rArr; gui_show_num &rArr; gui_show_ptchar &rArr; gui_draw_bigpoint
</UL>
<BR>[Calls]<UL><LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_fill_rectangle
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_show_string
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_show_float
</UL>
<BR>[Called By]<UL><LI><a href="#[787]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysset_vs1053_eq_set
</UL>

<P><STRONG><a name="[786]"></a>sysset_vs1053_vol3d_set</STRONG> (Thumb, 738 bytes, Stack size 80 bytes, settings.o(i.sysset_vs1053_vol3d_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 776 + Unknown Stack Size
<LI>Call Chain = sysset_vs1053_vol3d_set &rArr; window_draw &rArr; btn_draw &rArr; btn_draw_picbtn &rArr; minibmp_decode &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Erase_Sector &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VS_Set_Vol
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VS_Set_Effect
<LI><a href="#[78f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysset_vs1053_vol3d_show
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progressbar_draw_progressbar
<LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progressbar_delete
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progressbar_creat
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progressbar_check
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_show_string
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_draw
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_delete
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_creat
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_draw
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_delete
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_creat
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_check
</UL>
<BR>[Called By]<UL><LI><a href="#[6ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysset_play
</UL>

<P><STRONG><a name="[78f]"></a>sysset_vs1053_vol3d_show</STRONG> (Thumb, 214 bytes, Stack size 56 bytes, settings.o(i.sysset_vs1053_vol3d_show))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = sysset_vs1053_vol3d_show &rArr; gui_show_string &rArr; gui_show_ptfont &rArr; Get_HzMat &rArr; W25QXX_Read &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_fill_rectangle
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_show_string
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_show_num
</UL>
<BR>[Called By]<UL><LI><a href="#[786]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysset_vs1053_vol3d_set
</UL>

<P><STRONG><a name="[790]"></a>system_error_show</STRONG> (Thumb, 102 bytes, Stack size 64 bytes, test.o(i.system_error_show))
<BR><BR>[Stack]<UL><LI>Max Depth = 180 + Unknown Stack Size
<LI>Call Chain = system_error_show &rArr; LCD_ShowString &rArr; LCD_ShowChar &rArr; LCD_Fast_DrawPoint
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowString
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fill
</UL>
<BR>[Called By]<UL><LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_init
</UL>

<P><STRONG><a name="[791]"></a>system_exsram_test</STRONG> (Thumb, 180 bytes, Stack size 48 bytes, test.o(i.system_exsram_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = system_exsram_test &rArr; LCD_ShowxNum &rArr; LCD_ShowChar &rArr; LCD_Fast_DrawPoint
</UL>
<BR>[Calls]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowxNum
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowString
<LI><a href="#[792]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_SRAM_WriteBuffer
<LI><a href="#[793]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_SRAM_ReadBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_init
</UL>

<P><STRONG><a name="[794]"></a>system_files_erase</STRONG> (Thumb, 240 bytes, Stack size 56 bytes, test.o(i.system_files_erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 172 + Unknown Stack Size
<LI>Call Chain = system_files_erase &rArr; LCD_ShowString &rArr; LCD_ShowChar &rArr; LCD_Fast_DrawPoint
</UL>
<BR>[Calls]<UL><LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_fill_rectangle
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Erase_Chip
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowString
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Scan
</UL>
<BR>[Called By]<UL><LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_init
</UL>

<P><STRONG><a name="[795]"></a>system_font_update_confirm</STRONG> (Thumb, 188 bytes, Stack size 56 bytes, test.o(i.system_font_update_confirm))
<BR><BR>[Stack]<UL><LI>Max Depth = 172 + Unknown Stack Size
<LI>Call Chain = system_font_update_confirm &rArr; LCD_ShowString &rArr; LCD_ShowChar &rArr; LCD_Fast_DrawPoint
</UL>
<BR>[Calls]<UL><LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_fill_rectangle
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowString
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Scan
</UL>
<BR>[Called By]<UL><LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_init
</UL>

<P><STRONG><a name="[6b4]"></a>system_init</STRONG> (Thumb, 2986 bytes, Stack size 72 bytes, test.o(i.system_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 800 + Unknown Stack Size
<LI>Call Chain = system_init &rArr; app_system_update &rArr; exf_fdcopy &rArr;  exf_fdcopy (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart3_init
<LI><a href="#[79d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_font
<LI><a href="#[6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[79c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slcd_dma_init
<LI><a href="#[79b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;piclib_init
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mymalloc
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myfree
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_mem_init
<LI><a href="#[79a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_init
<LI><a href="#[63a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;font_init
<LI><a href="#[628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_setlabel
<LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[622]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exfuns_init
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exf_getfree
<LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exeplay_app_check
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[6f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_init
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_system_update
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_system_parameter_init
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_system_file_check
<LI><a href="#[77c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_show_mono_icos
<LI><a href="#[78c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_version
<LI><a href="#[79f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_boot_cpdmsg_set
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_ReadID
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Init
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VS_Sine_Test
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VS_Ram_Test
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VS_Init
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VS_HD_Reset
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Init
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Adjust
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPAD_Init
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stm32_Clock_Init
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Get
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lsens_Init
<LI><a href="#[796]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowxNum
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowString
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fill
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Scan
<LI><a href="#[798]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Init
<LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_SRAM_Init
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM9000_Init
<LI><a href="#[797]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BEEP_Init
<LI><a href="#[799]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_Init
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Init
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Check
<LI><a href="#[79e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_usb_update_confirm
<LI><a href="#[795]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_font_update_confirm
<LI><a href="#[794]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_files_erase
<LI><a href="#[791]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_exsram_test
<LI><a href="#[790]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_error_show
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[79e]"></a>system_usb_update_confirm</STRONG> (Thumb, 752 bytes, Stack size 72 bytes, test.o(i.system_usb_update_confirm))
<BR><BR>[Stack]<UL><LI>Max Depth = 544 + Unknown Stack Size
<LI>Call Chain = system_usb_update_confirm &rArr; f_setlabel &rArr; dir_read &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Erase_Sector &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_memin_malloc
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_memin_free
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_fill_rectangle
<LI><a href="#[628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_setlabel
<LI><a href="#[622]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Erase_Chip
<LI><a href="#[7a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Port_Set
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Interrupts_Config
<LI><a href="#[7a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Init
<LI><a href="#[7a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_USBClock
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowString
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Scan
</UL>
<BR>[Called By]<UL><LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_init
</UL>

<P><STRONG><a name="[7a3]"></a>t9_back_process</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, t9input.o(i.t9_back_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 688 + Unknown Stack Size
<LI>Call Chain = t9_back_process &rArr; t9_draw_hbtn &rArr; btn_draw &rArr; btn_draw_picbtn &rArr; minibmp_decode &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Erase_Sector &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t9_draw_hbtn
<LI><a href="#[7a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t9_clrhbtn_caption
</UL>
<BR>[Called By]<UL><LI><a href="#[7a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t9_process
<LI><a href="#[7af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t9_pinyin_process
</UL>

<P><STRONG><a name="[715]"></a>t9_check</STRONG> (Thumb, 416 bytes, Stack size 32 bytes, t9input.o(i.t9_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 792 + Unknown Stack Size
<LI>Call Chain = t9_check &rArr; t9_process &rArr; t9_pinyin_process &rArr; t9_vbtn_process &rArr; t9_draw &rArr; t9_draw_vbtn &rArr; btn_draw &rArr; btn_draw_picbtn &rArr; minibmp_decode &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Erase_Sector &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_bline
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_check
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alientek_ncr
<LI><a href="#[7a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t9_process
<LI><a href="#[7a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t9_ncr_clr
<LI><a href="#[7a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t9_hbtn_updc
<LI><a href="#[7a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t9_draw_hbtn
</UL>
<BR>[Called By]<UL><LI><a href="#[6bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;notepad_play
<LI><a href="#[774]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sms_send_sms
<LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_test
</UL>

<P><STRONG><a name="[7a4]"></a>t9_clrhbtn_caption</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, t9input.o(i.t9_clrhbtn_caption))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = t9_clrhbtn_caption
</UL>
<BR>[Called By]<UL><LI><a href="#[7b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t9_vbtn_process
<LI><a href="#[7b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t9_space_process
<LI><a href="#[7a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t9_process
<LI><a href="#[7af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t9_pinyin_process
<LI><a href="#[7ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t9_enter_process
<LI><a href="#[7a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t9_back_process
</UL>

<P><STRONG><a name="[713]"></a>t9_creat</STRONG> (Thumb, 708 bytes, Stack size 88 bytes, t9input.o(i.t9_creat))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = t9_creat &rArr; btn_creat &rArr; gui_memin_malloc &rArr; mymalloc &rArr; my_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_memin_malloc
<LI><a href="#[722]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t9_delete
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_memset
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_creat
<LI><a href="#[7a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t9_set_inputtype
</UL>
<BR>[Called By]<UL><LI><a href="#[6bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;notepad_play
<LI><a href="#[774]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sms_send_sms
<LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_test
</UL>

<P><STRONG><a name="[722]"></a>t9_delete</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, t9input.o(i.t9_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = t9_delete &rArr; btn_delete &rArr; btn_recover_backcolor
</UL>
<BR>[Calls]<UL><LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_memin_free
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_delete
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alientek_ncr_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[6bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;notepad_play
<LI><a href="#[713]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t9_creat
<LI><a href="#[774]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sms_send_sms
<LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_test
</UL>

<P><STRONG><a name="[714]"></a>t9_draw</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, t9input.o(i.t9_draw))
<BR><BR>[Stack]<UL><LI>Max Depth = 688 + Unknown Stack Size
<LI>Call Chain = t9_draw &rArr; t9_draw_vbtn &rArr; btn_draw &rArr; btn_draw_picbtn &rArr; minibmp_decode &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Erase_Sector &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_fill_rectangle
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_draw
<LI><a href="#[7a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t9_ncr_clr
<LI><a href="#[7ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t9_draw_vbtn
<LI><a href="#[7aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t9_draw_mbtn
<LI><a href="#[7a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t9_draw_hbtn
</UL>
<BR>[Called By]<UL><LI><a href="#[6bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;notepad_play
<LI><a href="#[774]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sms_send_sms
<LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_test
<LI><a href="#[7b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t9_vbtn_process
<LI><a href="#[7b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t9_sign_process
</UL>

<P><STRONG><a name="[7a5]"></a>t9_draw_hbtn</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, t9input.o(i.t9_draw_hbtn))
<BR><BR>[Stack]<UL><LI>Max Depth = 672 + Unknown Stack Size
<LI>Call Chain = t9_draw_hbtn &rArr; btn_draw &rArr; btn_draw_picbtn &rArr; minibmp_decode &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Erase_Sector &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_draw
</UL>
<BR>[Called By]<UL><LI><a href="#[714]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t9_draw
<LI><a href="#[715]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t9_check
<LI><a href="#[7b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t9_vbtn_process
<LI><a href="#[7b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t9_space_process
<LI><a href="#[7a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t9_process
<LI><a href="#[7af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t9_pinyin_process
<LI><a href="#[7ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t9_hbtn_process
<LI><a href="#[7ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t9_enter_process
<LI><a href="#[7a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t9_back_process
</UL>

<P><STRONG><a name="[7aa]"></a>t9_draw_mbtn</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, t9input.o(i.t9_draw_mbtn))
<BR><BR>[Stack]<UL><LI>Max Depth = 672 + Unknown Stack Size
<LI>Call Chain = t9_draw_mbtn &rArr; btn_draw &rArr; btn_draw_picbtn &rArr; minibmp_decode &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Erase_Sector &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_draw
</UL>
<BR>[Called By]<UL><LI><a href="#[714]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t9_draw
<LI><a href="#[7b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t9_sign_process
<LI><a href="#[7a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t9_process
<LI><a href="#[7af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t9_pinyin_process
</UL>

<P><STRONG><a name="[7ab]"></a>t9_draw_vbtn</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, t9input.o(i.t9_draw_vbtn))
<BR><BR>[Stack]<UL><LI>Max Depth = 672 + Unknown Stack Size
<LI>Call Chain = t9_draw_vbtn &rArr; btn_draw &rArr; btn_draw_picbtn &rArr; minibmp_decode &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Erase_Sector &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_draw
</UL>
<BR>[Called By]<UL><LI><a href="#[714]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t9_draw
<LI><a href="#[7b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t9_vbtn_process
<LI><a href="#[7af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t9_pinyin_process
<LI><a href="#[7ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t9_hbtn_process
</UL>

<P><STRONG><a name="[7ac]"></a>t9_drawvbtn_rim</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, t9input.o(i.t9_drawvbtn_rim))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = t9_drawvbtn_rim &rArr; gui_draw_vline
</UL>
<BR>[Calls]<UL><LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_vline
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_hline
</UL>
<BR>[Called By]<UL><LI><a href="#[7af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t9_pinyin_process
<LI><a href="#[7ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t9_hbtn_process
</UL>

<P><STRONG><a name="[7ad]"></a>t9_enter_process</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, t9input.o(i.t9_enter_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 680 + Unknown Stack Size
<LI>Call Chain = t9_enter_process &rArr; t9_draw_hbtn &rArr; btn_draw &rArr; btn_draw_picbtn &rArr; minibmp_decode &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Erase_Sector &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t9_draw_hbtn
<LI><a href="#[7a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t9_clrhbtn_caption
</UL>
<BR>[Called By]<UL><LI><a href="#[7a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t9_process
<LI><a href="#[7af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t9_pinyin_process
</UL>

<P><STRONG><a name="[7ae]"></a>t9_hbtn_process</STRONG> (Thumb, 188 bytes, Stack size 16 bytes, t9input.o(i.t9_hbtn_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 688 + Unknown Stack Size
<LI>Call Chain = t9_hbtn_process &rArr; t9_draw_vbtn &rArr; btn_draw &rArr; btn_draw_picbtn &rArr; minibmp_decode &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Erase_Sector &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t9_set_inputtype
<LI><a href="#[7a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t9_hbtn_updc
<LI><a href="#[7ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t9_drawvbtn_rim
<LI><a href="#[7ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t9_draw_vbtn
<LI><a href="#[7a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t9_draw_hbtn
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[7a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t9_process
</UL>

<P><STRONG><a name="[7a6]"></a>t9_hbtn_updc</STRONG> (Thumb, 182 bytes, Stack size 12 bytes, t9input.o(i.t9_hbtn_updc))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = t9_hbtn_updc
</UL>
<BR>[Called By]<UL><LI><a href="#[715]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t9_check
<LI><a href="#[7b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t9_vbtn_process
<LI><a href="#[7a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t9_process
<LI><a href="#[7ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t9_hbtn_process
</UL>

<P><STRONG><a name="[7b1]"></a>t9_id2num</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, t9input.o(i.t9_id2num))
<BR><BR>[Called By]<UL><LI><a href="#[7a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t9_process
<LI><a href="#[7af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t9_pinyin_process
</UL>

<P><STRONG><a name="[7b4]"></a>t9_keyup_scan</STRONG> (Thumb, 120 bytes, Stack size 12 bytes, t9input.o(i.t9_keyup_scan))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = t9_keyup_scan
</UL>
<BR>[Called By]<UL><LI><a href="#[7a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t9_process
</UL>

<P><STRONG><a name="[7b0]"></a>t9_load_sign</STRONG> (Thumb, 148 bytes, Stack size 12 bytes, t9input.o(i.t9_load_sign))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = t9_load_sign
</UL>
<BR>[Called By]<UL><LI><a href="#[7b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t9_sign_process
<LI><a href="#[7a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t9_process
<LI><a href="#[7af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t9_pinyin_process
</UL>

<P><STRONG><a name="[7a7]"></a>t9_ncr_clr</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, t9input.o(i.t9_ncr_clr))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = t9_ncr_clr &rArr; gui_fill_rectangle
</UL>
<BR>[Calls]<UL><LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_fill_rectangle
</UL>
<BR>[Called By]<UL><LI><a href="#[714]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t9_draw
<LI><a href="#[715]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t9_check
</UL>

<P><STRONG><a name="[7af]"></a>t9_pinyin_process</STRONG> (Thumb, 270 bytes, Stack size 32 bytes, t9input.o(i.t9_pinyin_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 744 + Unknown Stack Size
<LI>Call Chain = t9_pinyin_process &rArr; t9_vbtn_process &rArr; t9_draw &rArr; t9_draw_vbtn &rArr; btn_draw &rArr; btn_draw_picbtn &rArr; minibmp_decode &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Erase_Sector &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t9_vbtn_process
<LI><a href="#[7b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t9_space_process
<LI><a href="#[7a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t9_set_inputtype
<LI><a href="#[7b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t9_load_sign
<LI><a href="#[7b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t9_id2num
<LI><a href="#[7ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t9_enter_process
<LI><a href="#[7ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t9_drawvbtn_rim
<LI><a href="#[7ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t9_draw_vbtn
<LI><a href="#[7aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t9_draw_mbtn
<LI><a href="#[7a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t9_draw_hbtn
<LI><a href="#[7a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t9_clrhbtn_caption
<LI><a href="#[7a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t9_back_process
<LI><a href="#[640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_matched_pymb
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[7a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t9_process
</UL>

<P><STRONG><a name="[7a8]"></a>t9_process</STRONG> (Thumb, 290 bytes, Stack size 16 bytes, t9input.o(i.t9_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 760 + Unknown Stack Size
<LI>Call Chain = t9_process &rArr; t9_pinyin_process &rArr; t9_vbtn_process &rArr; t9_draw &rArr; t9_draw_vbtn &rArr; btn_draw &rArr; btn_draw_picbtn &rArr; minibmp_decode &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Erase_Sector &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t9_vbtn_process
<LI><a href="#[7b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t9_space_process
<LI><a href="#[7b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t9_sign_process
<LI><a href="#[7af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t9_pinyin_process
<LI><a href="#[7b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t9_load_sign
<LI><a href="#[7b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t9_keyup_scan
<LI><a href="#[7b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t9_id2num
<LI><a href="#[7a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t9_hbtn_updc
<LI><a href="#[7ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t9_hbtn_process
<LI><a href="#[7ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t9_enter_process
<LI><a href="#[7aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t9_draw_mbtn
<LI><a href="#[7a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t9_draw_hbtn
<LI><a href="#[7a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t9_clrhbtn_caption
<LI><a href="#[7a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t9_back_process
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[715]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t9_check
</UL>

<P><STRONG><a name="[7a9]"></a>t9_set_inputtype</STRONG> (Thumb, 204 bytes, Stack size 24 bytes, t9input.o(i.t9_set_inputtype))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = t9_set_inputtype &rArr; alientek_ncr_init &rArr; alientek_ncr_malloc &rArr; mymalloc &rArr; my_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alientek_ncr_stop
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alientek_ncr_init
</UL>
<BR>[Called By]<UL><LI><a href="#[713]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t9_creat
<LI><a href="#[7b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t9_vbtn_process
<LI><a href="#[7b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t9_sign_process
<LI><a href="#[7af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t9_pinyin_process
<LI><a href="#[7ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t9_hbtn_process
</UL>

<P><STRONG><a name="[7b5]"></a>t9_sign_process</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, t9input.o(i.t9_sign_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 696 + Unknown Stack Size
<LI>Call Chain = t9_sign_process &rArr; t9_draw &rArr; t9_draw_vbtn &rArr; btn_draw &rArr; btn_draw_picbtn &rArr; minibmp_decode &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Erase_Sector &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[714]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t9_draw
<LI><a href="#[7a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t9_set_inputtype
<LI><a href="#[7b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t9_load_sign
<LI><a href="#[7aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t9_draw_mbtn
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
</UL>
<BR>[Called By]<UL><LI><a href="#[7a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t9_process
</UL>

<P><STRONG><a name="[7b2]"></a>t9_space_process</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, t9input.o(i.t9_space_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 680 + Unknown Stack Size
<LI>Call Chain = t9_space_process &rArr; t9_draw_hbtn &rArr; btn_draw &rArr; btn_draw_picbtn &rArr; minibmp_decode &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Erase_Sector &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t9_draw_hbtn
<LI><a href="#[7a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t9_clrhbtn_caption
</UL>
<BR>[Called By]<UL><LI><a href="#[7a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t9_process
<LI><a href="#[7af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t9_pinyin_process
</UL>

<P><STRONG><a name="[7b3]"></a>t9_vbtn_process</STRONG> (Thumb, 366 bytes, Stack size 24 bytes, t9input.o(i.t9_vbtn_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 712 + Unknown Stack Size
<LI>Call Chain = t9_vbtn_process &rArr; t9_draw &rArr; t9_draw_vbtn &rArr; btn_draw &rArr; btn_draw_picbtn &rArr; minibmp_decode &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Erase_Sector &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[714]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t9_draw
<LI><a href="#[7a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t9_set_inputtype
<LI><a href="#[7a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t9_hbtn_updc
<LI><a href="#[7ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t9_draw_vbtn
<LI><a href="#[7a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t9_draw_hbtn
<LI><a href="#[7a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t9_clrhbtn_caption
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[7a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t9_process
<LI><a href="#[7af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t9_pinyin_process
</UL>

<P><STRONG><a name="[54c]"></a>tan</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, tan.o(i.tan))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = tan &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_tan
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_exe
</UL>

<P><STRONG><a name="[7b6]"></a>tcp_abandon</STRONG> (Thumb, 166 bytes, Stack size 40 bytes, tcp.o(i.tcp_abandon))
<BR><BR>[Stack]<UL><LI>Max Depth = 520 + Unknown Stack Size
<LI>Call Chain = tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[685]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[7b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[7b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[734]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[7c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
<LI><a href="#[728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
</UL>

<P><STRONG><a name="[728]"></a>tcp_abort</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tcp.o(i.tcp_abort))
<BR><BR>[Stack]<UL><LI>Max Depth = 520 + Unknown Stack Size
<LI>Call Chain = tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
</UL>
<BR>[Called By]<UL><LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_ipaddr
<LI><a href="#[689]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[7c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[7b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
</UL>

<P><STRONG><a name="[5c8]"></a>tcp_accept</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tcp.o(i.tcp_accept))
<BR><BR>[Called By]<UL><LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpd_init_addr
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_close_internal
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_listen
</UL>

<P><STRONG><a name="[7b9]"></a>tcp_alloc</STRONG> (Thumb, 234 bytes, Stack size 24 bytes, tcp.o(i.tcp_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 544 + Unknown Stack Size
<LI>Call Chain = tcp_alloc &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[682]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[7ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_next_iss
<LI><a href="#[728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
<LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_new
<LI><a href="#[7c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
</UL>

<P><STRONG><a name="[4a0]"></a>tcp_arg</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tcp.o(i.tcp_arg))
<BR><BR>[Called By]<UL><LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpd_init_addr
<LI><a href="#[65e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_close_conn
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_accept
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_tcp
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_close_internal
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept_function
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_listen
</UL>

<P><STRONG><a name="[5c4]"></a>tcp_bind</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, tcp.o(i.tcp_bind))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = tcp_bind &rArr; tcp_timer_needed &rArr; sys_timeout &rArr; memp_malloc &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timer_needed
<LI><a href="#[7bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_new_port
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpd_init_addr
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_bind
</UL>

<P><STRONG><a name="[5c9]"></a>tcp_close</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, tcp.o(i.tcp_close))
<BR><BR>[Called By]<UL><LI><a href="#[65e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_close_conn
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_null
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_close_internal
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_listen
</UL>

<P><STRONG><a name="[5cc]"></a>tcp_connect</STRONG> (Thumb, 262 bytes, Stack size 32 bytes, tcp.o(i.tcp_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 496 + Unknown Stack Size
<LI>Call Chain = tcp_connect &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[68a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_route
<LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[7bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timer_needed
<LI><a href="#[7c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
<LI><a href="#[7ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_next_iss
<LI><a href="#[7bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_eff_send_mss
<LI><a href="#[7bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_new_port
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_connect
</UL>

<P><STRONG><a name="[7bf]"></a>tcp_eff_send_mss</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, tcp.o(i.tcp_eff_send_mss))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tcp_eff_send_mss &rArr; ip_route
</UL>
<BR>[Calls]<UL><LI><a href="#[68a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_route
</UL>
<BR>[Called By]<UL><LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[7c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[7c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
<LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
</UL>

<P><STRONG><a name="[7c0]"></a>tcp_enqueue_flags</STRONG> (Thumb, 286 bytes, Stack size 32 bytes, tcp_out.o(i.tcp_enqueue_flags))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = tcp_enqueue_flags &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[667]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clen
<LI><a href="#[7c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[7c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
<LI><a href="#[7be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_fin
<LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
</UL>

<P><STRONG><a name="[4a4]"></a>tcp_err</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, tcp.o(i.tcp_err))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = tcp_err &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[65e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_close_conn
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_accept
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_tcp
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_close_internal
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept_function
</UL>

<P><STRONG><a name="[7c3]"></a>tcp_fasttmr</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, tcp.o(i.tcp_fasttmr))
<BR><BR>[Stack]<UL><LI>Max Depth = 536 + Unknown Stack Size
<LI>Call Chain = tcp_fasttmr &rArr; tcp_process_refused_data &rArr; tcp_recv_null &rArr; tcp_recved &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process_refused_data
</UL>
<BR>[Called By]<UL><LI><a href="#[7d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_tmr
</UL>

<P><STRONG><a name="[6b2]"></a>tcp_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, tcp.o(i.tcp_init))
<BR><BR>[Called By]<UL><LI><a href="#[6ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[689]"></a>tcp_input</STRONG> (Thumb, 920 bytes, Stack size 40 bytes, tcp_in.o(i.tcp_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 608 + Unknown Stack Size
<LI>Call Chain = tcp_input &rArr; tcp_process &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[685]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohl
<LI><a href="#[681]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
<LI><a href="#[67d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo
<LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast
<LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[7c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timewait_input
<LI><a href="#[7c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[7c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
<LI><a href="#[7b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_null
<LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process_refused_data
<LI><a href="#[7b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
</UL>

<P><STRONG><a name="[7c8]"></a>tcp_keepalive</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, tcp_out.o(i.tcp_keepalive))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = tcp_keepalive &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[67d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo
<LI><a href="#[67a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
<LI><a href="#[7c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header
</UL>
<BR>[Called By]<UL><LI><a href="#[7d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
</UL>

<P><STRONG><a name="[5d0]"></a>tcp_listen_with_backlog</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, tcp.o(i.tcp_listen_with_backlog))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = tcp_listen_with_backlog &rArr; tcp_timer_needed &rArr; sys_timeout &rArr; memp_malloc &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[685]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[682]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[7bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timer_needed
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpd_init_addr
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_listen
</UL>

<P><STRONG><a name="[673]"></a>tcp_new</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tcp.o(i.tcp_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 544 + Unknown Stack Size
<LI>Call Chain = tcp_new &rArr; tcp_alloc &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpd_init_addr
<LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcb_new
</UL>

<P><STRONG><a name="[7ba]"></a>tcp_next_iss</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tcp.o(i.tcp_next_iss))
<BR><BR>[Called By]<UL><LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[7b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
</UL>

<P><STRONG><a name="[5e0]"></a>tcp_output</STRONG> (Thumb, 434 bytes, Stack size 32 bytes, tcp_out.o(i.tcp_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohl
<LI><a href="#[681]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
<LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[7cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[7c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[689]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_poll
<LI><a href="#[7c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timewait_input
<LI><a href="#[7c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
<LI><a href="#[7d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_rto
<LI><a href="#[7d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[7b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[7c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_fasttmr
<LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[7bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
<LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_writemore
</UL>

<P><STRONG><a name="[712]"></a>tcp_pcb_purge</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, tcp.o(i.tcp_pcb_purge))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = tcp_pcb_purge &rArr; tcp_segs_free &rArr; tcp_seg_free &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[734]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
</UL>
<BR>[Called By]<UL><LI><a href="#[711]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcpserver_remove_timewait
<LI><a href="#[7c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[7d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[7b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[7bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
</UL>

<P><STRONG><a name="[7b7]"></a>tcp_pcb_remove</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, tcp.o(i.tcp_pcb_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + Unknown Stack Size
<LI>Call Chain = tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[712]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
<LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[689]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[7b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
<LI><a href="#[7bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
</UL>

<P><STRONG><a name="[4a3]"></a>tcp_poll</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, tcp.o(i.tcp_poll))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = tcp_poll &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[65e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_close_conn
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_accept
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_tcp
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_close_internal
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept_function
</UL>

<P><STRONG><a name="[7c4]"></a>tcp_process_refused_data</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, tcp.o(i.tcp_process_refused_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 512 + Unknown Stack Size
<LI>Call Chain = tcp_process_refused_data &rArr; tcp_recv_null &rArr; tcp_recved &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_null
</UL>
<BR>[Called By]<UL><LI><a href="#[689]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[7c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_fasttmr
</UL>

<P><STRONG><a name="[4a1]"></a>tcp_recv</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, tcp.o(i.tcp_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = tcp_recv &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[65e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_close_conn
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_accept
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_tcp
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_close_internal
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept_function
</UL>

<P><STRONG><a name="[1f3]"></a>tcp_recv_null</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, tcp.o(i.tcp_recv_null))
<BR><BR>[Stack]<UL><LI>Max Depth = 488 + Unknown Stack Size
<LI>Call Chain = tcp_recv_null &rArr; tcp_recved &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
</UL>
<BR>[Called By]<UL><LI><a href="#[689]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process_refused_data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tcp.o(i.tcp_alloc)
</UL>
<P><STRONG><a name="[5d3]"></a>tcp_recved</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, tcp.o(i.tcp_recved))
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + Unknown Stack Size
<LI>Call Chain = tcp_recved &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[7d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_update_rcv_ann_wnd
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_recv
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_null
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_tcp
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_recv
</UL>

<P><STRONG><a name="[7d0]"></a>tcp_rexmit</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, tcp_out.o(i.tcp_rexmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tcp_rexmit
</UL>
<BR>[Calls]<UL><LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohl
</UL>
<BR>[Called By]<UL><LI><a href="#[7d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_fast
<LI><a href="#[7c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
</UL>

<P><STRONG><a name="[7d1]"></a>tcp_rexmit_fast</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, tcp_out.o(i.tcp_rexmit_fast))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = tcp_rexmit_fast &rArr; tcp_rexmit
</UL>
<BR>[Calls]<UL><LI><a href="#[7d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit
</UL>
<BR>[Called By]<UL><LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
</UL>

<P><STRONG><a name="[7d4]"></a>tcp_rexmit_rto</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, tcp_out.o(i.tcp_rexmit_rto))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = tcp_rexmit_rto &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
</UL>
<BR>[Called By]<UL><LI><a href="#[7d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
</UL>

<P><STRONG><a name="[7b8]"></a>tcp_rst</STRONG> (Thumb, 156 bytes, Stack size 48 bytes, tcp_out.o(i.tcp_rst))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = tcp_rst &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[67d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo
<LI><a href="#[67a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
<LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[689]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[7c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timewait_input
<LI><a href="#[7c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[7c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
<LI><a href="#[7d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[7b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
<LI><a href="#[7bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
</UL>

<P><STRONG><a name="[7d3]"></a>tcp_seg_copy</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, tcp.o(i.tcp_seg_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = tcp_seg_copy &rArr; memp_malloc &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[682]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
</UL>

<P><STRONG><a name="[7c2]"></a>tcp_seg_free</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, tcp.o(i.tcp_seg_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = tcp_seg_free &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[685]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[7c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[7c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[7cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_oos_insert_segment
<LI><a href="#[734]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
</UL>

<P><STRONG><a name="[734]"></a>tcp_segs_free</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, tcp.o(i.tcp_segs_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = tcp_segs_free &rArr; tcp_seg_free &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
</UL>
<BR>[Called By]<UL><LI><a href="#[712]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
<LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[7cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_oos_insert_segment
<LI><a href="#[7d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[7b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free_ooseq_callback
</UL>

<P><STRONG><a name="[7cc]"></a>tcp_send_empty_ack</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, tcp_out.o(i.tcp_send_empty_ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = tcp_send_empty_ack &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[67d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo
<LI><a href="#[67a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
<LI><a href="#[7c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header
</UL>
<BR>[Called By]<UL><LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
</UL>

<P><STRONG><a name="[7be]"></a>tcp_send_fin</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, tcp_out.o(i.tcp_send_fin))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = tcp_send_fin &rArr; tcp_enqueue_flags &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[681]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
<LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[7c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
</UL>
<BR>[Called By]<UL><LI><a href="#[7bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
</UL>

<P><STRONG><a name="[4a2]"></a>tcp_sent</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, tcp.o(i.tcp_sent))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = tcp_sent &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[65e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_close_conn
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_accept
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_tcp
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_close_internal
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept_function
</UL>

<P><STRONG><a name="[65d]"></a>tcp_setprio</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tcp.o(i.tcp_setprio))
<BR><BR>[Called By]<UL><LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpd_init_addr
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_accept
</UL>

<P><STRONG><a name="[5ca]"></a>tcp_shutdown</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, tcp.o(i.tcp_shutdown))
<BR><BR>[Stack]<UL><LI>Max Depth = 528 + Unknown Stack Size
<LI>Call Chain = tcp_shutdown &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[7bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
</UL>
<BR>[Called By]<UL><LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_close_internal
</UL>

<P><STRONG><a name="[7d5]"></a>tcp_slowtmr</STRONG> (Thumb, 786 bytes, Stack size 40 bytes, tcp.o(i.tcp_slowtmr))
<BR><BR>[Stack]<UL><LI>Max Depth = 504 + Unknown Stack Size
<LI>Call Chain = tcp_slowtmr &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[712]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
<LI><a href="#[685]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[7d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[7b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[7d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_rto
<LI><a href="#[7c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
<LI><a href="#[734]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[7d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_tmr
</UL>

<P><STRONG><a name="[7bc]"></a>tcp_timer_needed</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, timers.o(i.tcp_timer_needed))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = tcp_timer_needed &rArr; sys_timeout &rArr; memp_malloc &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_with_backlog
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_bind
<LI><a href="#[7c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[7c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
<LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[7bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
</UL>

<P><STRONG><a name="[7d7]"></a>tcp_tmr</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, tcp.o(i.tcp_tmr))
<BR><BR>[Stack]<UL><LI>Max Depth = 544 + Unknown Stack Size
<LI>Call Chain = tcp_tmr &rArr; tcp_fasttmr &rArr; tcp_process_refused_data &rArr; tcp_recv_null &rArr; tcp_recved &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[7c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_fasttmr
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_tcp_timer
</UL>

<P><STRONG><a name="[7d2]"></a>tcp_update_rcv_ann_wnd</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, tcp.o(i.tcp_update_rcv_ann_wnd))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = tcp_update_rcv_ann_wnd &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
</UL>

<P><STRONG><a name="[5df]"></a>tcp_write</STRONG> (Thumb, 1528 bytes, Stack size 96 bytes, tcp_out.o(i.tcp_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = tcp_write &rArr; tcp_pbuf_prealloc &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[667]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clen
<LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
<LI><a href="#[7d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write_checks
<LI><a href="#[7ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pbuf_prealloc
<LI><a href="#[7c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[734]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[66a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_write
<LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_writemore
</UL>

<P><STRONG><a name="[7d6]"></a>tcp_zero_window_probe</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, tcp_out.o(i.tcp_zero_window_probe))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = tcp_zero_window_probe &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[681]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
<LI><a href="#[67d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo
<LI><a href="#[67a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
<LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy_partial
<LI><a href="#[7c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header
</UL>
<BR>[Called By]<UL><LI><a href="#[7d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
</UL>

<P><STRONG><a name="[725]"></a>tcpip_apimsg</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, tcpip.o(i.tcpip_apimsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = tcpip_apimsg &rArr; sys_arch_sem_wait &rArr; OSSemPend &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<LI><a href="#[77f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_post
</UL>
<BR>[Called By]<UL><LI><a href="#[71a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_write_partly
<LI><a href="#[71d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_send
<LI><a href="#[716]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new_with_proto_and_callback
<LI><a href="#[718]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_listen_with_backlog
<LI><a href="#[721]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_getaddr
<LI><a href="#[709]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_disconnect
<LI><a href="#[70a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_delete
<LI><a href="#[719]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_connect
<LI><a href="#[717]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_bind
<LI><a href="#[72a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_data
<LI><a href="#[726]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_close_shutdown
</UL>

<P><STRONG><a name="[735]"></a>tcpip_callback_with_block</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, tcpip.o(i.tcpip_callback_with_block))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = tcpip_callback_with_block &rArr; memp_free &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[685]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[682]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_trypost
<LI><a href="#[77f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_post
</UL>
<BR>[Called By]<UL><LI><a href="#[732]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_pool_is_empty
</UL>

<P><STRONG><a name="[6a6]"></a>tcpip_init</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, tcpip.o(i.tcpip_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = tcpip_init &rArr; lwip_init &rArr; sys_timeouts_init &rArr; sys_timeout &rArr; memp_malloc &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[6ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
<LI><a href="#[780]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_thread_new
<LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_new
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_comm_init
</UL>

<P><STRONG><a name="[1d4]"></a>tcpip_input</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, tcpip.o(i.tcpip_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = tcpip_input &rArr; memp_free &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[685]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[682]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_trypost
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip_comm.o(i.lwip_comm_init)
</UL>
<P><STRONG><a name="[7d9]"></a>tomcat_agcspd_set</STRONG> (Thumb, 720 bytes, Stack size 88 bytes, tomcatplay.o(i.tomcat_agcspd_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 784 + Unknown Stack Size
<LI>Call Chain = tomcat_agcspd_set &rArr; window_draw &rArr; btn_draw &rArr; btn_draw_picbtn &rArr; minibmp_decode &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Erase_Sector &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VS_WR_Cmd
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progressbar_draw_progressbar
<LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progressbar_delete
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progressbar_creat
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progressbar_check
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_show_string
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_draw
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_delete
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_creat
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_draw
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_delete
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_creat
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_check
<LI><a href="#[7da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tomcat_show_spd
<LI><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recorder_show_agc
</UL>
<BR>[Called By]<UL><LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tomcat_play
</UL>

<P><STRONG><a name="[7dd]"></a>tomcat_data_move</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, tomcatplay.o(i.tomcat_data_move))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tomcat_data_move
</UL>
<BR>[Called By]<UL><LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tomcat_play
</UL>

<P><STRONG><a name="[7db]"></a>tomcat_load_ui</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, tomcatplay.o(i.tomcat_load_ui))
<BR><BR>[Stack]<UL><LI>Max Depth = 656 + Unknown Stack Size
<LI>Call Chain = tomcat_load_ui &rArr; minibmp_decode &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Erase_Sector &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_fill_rectangle
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;minibmp_decode
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_show_strmid
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gui_tcbar
<LI><a href="#[751]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recorder_vu_meter
</UL>
<BR>[Called By]<UL><LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tomcat_play
</UL>

<P><STRONG><a name="[6b9]"></a>tomcat_play</STRONG> (Thumb, 892 bytes, Stack size 72 bytes, tomcatplay.o(i.tomcat_play))
<BR><BR>[Stack]<UL><LI>Max Depth = 856 + Unknown Stack Size
<LI>Call Chain = tomcat_play &rArr; tomcat_agcspd_set &rArr; window_draw &rArr; btn_draw &rArr; btn_draw_picbtn &rArr; minibmp_decode &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Erase_Sector &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VS_HD_Reset
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VS_WR_Cmd
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VS_RD_Reg
<LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_task_delete
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_stop_req
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_memex_malloc
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_memex_free
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spb_delete
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_draw
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_delete
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_creat
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_check
<LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_recover_bkcolor
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_read_bkcolor
<LI><a href="#[7dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tomcat_rec_mode
<LI><a href="#[7de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tomcat_play_wav
<LI><a href="#[7db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tomcat_load_ui
<LI><a href="#[7dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tomcat_data_move
<LI><a href="#[7d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tomcat_agcspd_set
<LI><a href="#[756]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recorder_wav_init
<LI><a href="#[751]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recorder_vu_meter
<LI><a href="#[758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recorder_vu_get
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_task
</UL>

<P><STRONG><a name="[7de]"></a>tomcat_play_wav</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, tomcatplay.o(i.tomcat_play_wav))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = tomcat_play_wav &rArr; VS_Soft_Reset &rArr; delay_ms &rArr; delay_us &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VS_HD_Reset
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VS_Soft_Reset
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VS_Set_Vol
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VS_Send_MusicData
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VS_SPK_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tomcat_play
</UL>

<P><STRONG><a name="[7dc]"></a>tomcat_rec_mode</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, tomcatplay.o(i.tomcat_rec_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = tomcat_rec_mode &rArr; recorder_enter_rec_mode &rArr; delay_ms &rArr; delay_us &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VS_RD_Reg
<LI><a href="#[74f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recorder_enter_rec_mode
<LI><a href="#[74c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recoder_set_agc
</UL>
<BR>[Called By]<UL><LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tomcat_play
</UL>

<P><STRONG><a name="[7da]"></a>tomcat_show_spd</STRONG> (Thumb, 66 bytes, Stack size 40 bytes, tomcatplay.o(i.tomcat_show_spd))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = tomcat_show_spd &rArr; gui_show_num &rArr; gui_show_ptchar &rArr; gui_draw_bigpoint
</UL>
<BR>[Calls]<UL><LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_fill_rectangle
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_show_num
</UL>
<BR>[Called By]<UL><LI><a href="#[7d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tomcat_agcspd_set
</UL>

<P><STRONG><a name="[73c]"></a>u3_printf</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, usart3.o(i.u3_printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = u3_printf &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mymalloc
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myfree
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89vsprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phone_play
<LI><a href="#[73f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sim900a_send_cmd
<LI><a href="#[774]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sms_send_sms
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phone_incall_task
</UL>

<P><STRONG><a name="[6f4]"></a>uart_init</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, usart.o(i.uart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = uart_init &rArr; MY_NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MY_NVIC_Init
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[745]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
</UL>
<BR>[Called By]<UL><LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_init
<LI><a href="#[6f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nes_clock_set
</UL>

<P><STRONG><a name="[596]"></a>udp_bind</STRONG> (Thumb, 192 bytes, Stack size 40 bytes, udp.o(i.udp_bind))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = udp_bind &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_connect
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_bind
</UL>

<P><STRONG><a name="[597]"></a>udp_connect</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, udp.o(i.udp_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = udp_connect &rArr; udp_bind &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
</UL>
<BR>[Called By]<UL><LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_connect
</UL>

<P><STRONG><a name="[5cf]"></a>udp_disconnect</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, udp.o(i.udp_disconnect))
<BR><BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_disconnect
</UL>

<P><STRONG><a name="[6b1]"></a>udp_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, udp.o(i.udp_init))
<BR><BR>[Called By]<UL><LI><a href="#[6ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[688]"></a>udp_input</STRONG> (Thumb, 420 bytes, Stack size 40 bytes, udp.o(i.udp_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 488 + Unknown Stack Size
<LI>Call Chain = udp_input &rArr; icmp_dest_unreach &rArr; icmp_send_response &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[681]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
<LI><a href="#[67d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo
<LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_dest_unreach
<LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
</UL>

<P><STRONG><a name="[595]"></a>udp_new</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, udp.o(i.udp_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = udp_new &rArr; memp_malloc &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[682]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
<LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcb_new
</UL>

<P><STRONG><a name="[598]"></a>udp_recv</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, udp.o(i.udp_recv))
<BR><BR>[Called By]<UL><LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
<LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcb_new
</UL>

<P><STRONG><a name="[594]"></a>udp_remove</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, udp.o(i.udp_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = udp_remove &rArr; memp_free &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[685]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_stop
<LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_delconn
</UL>

<P><STRONG><a name="[5dd]"></a>udp_send</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, udp.o(i.udp_send))
<BR><BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_send
</UL>

<P><STRONG><a name="[5dc]"></a>udp_sendto</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, udp.o(i.udp_sendto))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[68a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_route
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_send
</UL>

<P><STRONG><a name="[585]"></a>udp_sendto_if</STRONG> (Thumb, 232 bytes, Stack size 48 bytes, udp.o(i.udp_sendto_if))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = udp_sendto_if &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
<LI><a href="#[67d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo
<LI><a href="#[679]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if
<LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[733]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_chain
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
<LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto
</UL>

<P><STRONG><a name="[7df]"></a>updata_fontx</STRONG> (Thumb, 232 bytes, Stack size 64 bytes, fontupd.o(i.updata_fontx))
<BR><BR>[Stack]<UL><LI>Max Depth = 600 + Unknown Stack Size
<LI>Call Chain = updata_fontx &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Erase_Sector &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mymalloc
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myfree
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write
<LI><a href="#[63e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fupd_prog
<LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
</UL>
<BR>[Called By]<UL><LI><a href="#[79d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_font
</UL>

<P><STRONG><a name="[79d]"></a>update_font</STRONG> (Thumb, 664 bytes, Stack size 64 bytes, fontupd.o(i.update_font))
<BR><BR>[Stack]<UL><LI>Max Depth = 664 + Unknown Stack Size
<LI>Call Chain = update_font &rArr; updata_fontx &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Erase_Sector &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mymalloc
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myfree
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowString
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Read
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Erase_Sector
<LI><a href="#[7df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updata_fontx
<LI><a href="#[63e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fupd_prog
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_init
</UL>

<P><STRONG><a name="[7f0]"></a>update_tile</STRONG> (Thumb, 188 bytes, Stack size 12 bytes, nes_ppu.o(i.update_tile))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = update_tile
</UL>
<BR>[Called By]<UL><LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_2007
</UL>

<P><STRONG><a name="[4f4]"></a>usart3_init</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, usart3.o(i.usart3_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = usart3_init &rArr; MY_NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MY_NVIC_Init
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM7_Int_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[6bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nes_play
<LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_init
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appplay_gyro
</UL>

<P><STRONG><a name="[1ef]"></a>usart_task</STRONG> (Thumb, 110 bytes, Stack size 0 bytes, test.o(i.usart_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = usart_task &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[743]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phone_ring
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_mem_perused
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calendar_alarm_ring
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_lcd_auto_bklight
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> test.o(i.start_task)
</UL>
<P><STRONG><a name="[6bf]"></a>usb_play</STRONG> (Thumb, 1282 bytes, Stack size 64 bytes, usbplay.o(i.usb_play))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = usb_play &rArr; app_filebrower &rArr; gui_show_strmid &rArr; gui_show_ptstr &rArr; gui_show_ptfont &rArr; Get_HzMat &rArr; W25QXX_Read &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_memin_malloc
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_memin_free
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[7a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Port_Set
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Interrupts_Config
<LI><a href="#[7a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Init
<LI><a href="#[7a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_USBClock
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowString
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowNum
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_filebrower
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_task
</UL>

<P><STRONG><a name="[28]"></a>usmart_cmd_rec</STRONG> (Thumb, 144 bytes, Stack size 96 bytes, usmart.o(i.usmart_cmd_rec))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = usmart_cmd_rec &rArr; usmart_get_fparam &rArr; usmart_str2num
</UL>
<BR>[Calls]<UL><LI><a href="#[7e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_strcmp
<LI><a href="#[7e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_get_fparam
<LI><a href="#[7e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_get_fname
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usmart_config.o(.data)
</UL>
<P><STRONG><a name="[29]"></a>usmart_exe</STRONG> (Thumb, 510 bytes, Stack size 128 bytes, usmart.o(i.usmart_exe))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = usmart_exe &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_get_parmpos
<LI><a href="#[7e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_get_fname
<LI><a href="#[7e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_reset_runtime
<LI><a href="#[7e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_get_runtime
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usmart_config.o(.data)
</UL>
<P><STRONG><a name="[7e7]"></a>usmart_get_aparm</STRONG> (Thumb, 164 bytes, Stack size 20 bytes, usmart_str.o(i.usmart_get_aparm))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = usmart_get_aparm
</UL>
<BR>[Called By]<UL><LI><a href="#[7e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_get_fparam
<LI><a href="#[7eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_sys_cmd_exe
</UL>

<P><STRONG><a name="[7ed]"></a>usmart_get_cmdname</STRONG> (Thumb, 46 bytes, Stack size 12 bytes, usmart_str.o(i.usmart_get_cmdname))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = usmart_get_cmdname
</UL>
<BR>[Called By]<UL><LI><a href="#[7eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_sys_cmd_exe
</UL>

<P><STRONG><a name="[7e0]"></a>usmart_get_fname</STRONG> (Thumb, 352 bytes, Stack size 60 bytes, usmart_str.o(i.usmart_get_fname))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = usmart_get_fname
</UL>
<BR>[Calls]<UL><LI><a href="#[7e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_search_nextc
<LI><a href="#[7e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[7eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_sys_cmd_exe
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_exe
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_cmd_rec
</UL>

<P><STRONG><a name="[7e2]"></a>usmart_get_fparam</STRONG> (Thumb, 202 bytes, Stack size 240 bytes, usmart_str.o(i.usmart_get_fparam))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = usmart_get_fparam &rArr; usmart_str2num
</UL>
<BR>[Calls]<UL><LI><a href="#[7e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_strlen
<LI><a href="#[7ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_strcopy
<LI><a href="#[7e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_str2num
<LI><a href="#[7e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_get_parmpos
<LI><a href="#[7e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_get_aparm
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_cmd_rec
</UL>

<P><STRONG><a name="[7e3]"></a>usmart_get_parmpos</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, usmart_str.o(i.usmart_get_parmpos))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usmart_get_parmpos
</UL>
<BR>[Called By]<UL><LI><a href="#[7e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_get_fparam
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_exe
</UL>

<P><STRONG><a name="[7e5]"></a>usmart_get_runtime</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, usmart.o(i.usmart_get_runtime))
<BR><BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_exe
</UL>

<P><STRONG><a name="[27]"></a>usmart_init</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, usmart.o(i.usmart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = usmart_init &rArr; Timer2_Init &rArr; MY_NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer2_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usmart_config.o(.data)
</UL>
<P><STRONG><a name="[7ec]"></a>usmart_pow</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, usmart_str.o(i.usmart_pow))
<BR><BR>[Called By]<UL><LI><a href="#[7e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_str2num
</UL>

<P><STRONG><a name="[7e4]"></a>usmart_reset_runtime</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, usmart.o(i.usmart_reset_runtime))
<BR><BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_exe
</UL>

<P><STRONG><a name="[2a]"></a>usmart_scan</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, usmart.o(i.usmart_scan))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = usmart_scan &rArr; usmart_sys_cmd_exe &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_sys_cmd_exe
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usmart_config.o(.data)
</UL>
<P><STRONG><a name="[7e6]"></a>usmart_search_nextc</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, usmart_str.o(i.usmart_search_nextc))
<BR><BR>[Calls]<UL><LI><a href="#[7e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_search_nextc
</UL>
<BR>[Called By]<UL><LI><a href="#[7e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_search_nextc
<LI><a href="#[7e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_get_fname
</UL>

<P><STRONG><a name="[7e8]"></a>usmart_str2num</STRONG> (Thumb, 214 bytes, Stack size 28 bytes, usmart_str.o(i.usmart_str2num))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = usmart_str2num
</UL>
<BR>[Calls]<UL><LI><a href="#[7ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_pow
</UL>
<BR>[Called By]<UL><LI><a href="#[7e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_get_fparam
<LI><a href="#[7eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_sys_cmd_exe
</UL>

<P><STRONG><a name="[7e1]"></a>usmart_strcmp</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, usmart_str.o(i.usmart_strcmp))
<BR><BR>[Calls]<UL><LI><a href="#[7e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[7e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_strcmp
<LI><a href="#[7e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_get_fname
<LI><a href="#[7eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_sys_cmd_exe
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_cmd_rec
</UL>

<P><STRONG><a name="[7ea]"></a>usmart_strcopy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, usmart_str.o(i.usmart_strcopy))
<BR><BR>[Calls]<UL><LI><a href="#[7ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_strcopy
</UL>
<BR>[Called By]<UL><LI><a href="#[7ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_strcopy
<LI><a href="#[7e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_get_fparam
</UL>

<P><STRONG><a name="[7e9]"></a>usmart_strlen</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, usmart_str.o(i.usmart_strlen))
<BR><BR>[Called By]<UL><LI><a href="#[7e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_get_fparam
</UL>

<P><STRONG><a name="[7eb]"></a>usmart_sys_cmd_exe</STRONG> (Thumb, 1458 bytes, Stack size 72 bytes, usmart.o(i.usmart_sys_cmd_exe))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = usmart_sys_cmd_exe &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_strcmp
<LI><a href="#[7e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_str2num
<LI><a href="#[7e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_get_fname
<LI><a href="#[7ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_get_cmdname
<LI><a href="#[7e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_get_aparm
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_scan
</UL>

<P><STRONG><a name="[4e7]"></a>vs10xx_read_para</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, vs10xx.o(i.vs10xx_read_para))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = vs10xx_read_para &rArr; AT24CXX_Read &rArr; AT24CXX_ReadOneByte &rArr; IIC_Read_Byte &rArr; IIC_NAck &rArr; delay_us &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_system_parameter_init
</UL>

<P><STRONG><a name="[4d9]"></a>vs10xx_save_para</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, vs10xx.o(i.vs10xx_save_para))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = vs10xx_save_para &rArr; AT24CXX_Write &rArr; AT24CXX_WriteOneByte &rArr; IIC_Wait_Ack &rArr; IIC_Stop &rArr; delay_us &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[6ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysset_play
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_system_parameter_init
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_set_default
</UL>

<P><STRONG><a name="[1f0]"></a>watch_task</STRONG> (Thumb, 252 bytes, Stack size 0 bytes, test.o(i.watch_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 768 + Unknown Stack Size
<LI>Call Chain = watch_task &rArr; calendar_alarm_msg &rArr; window_draw &rArr; btn_draw &rArr; btn_draw_picbtn &rArr; minibmp_decode &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Erase_Sector &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[764]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sim900a_status_check
<LI><a href="#[762]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sim900a_cmsgin_check
<LI><a href="#[744]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pic_tp_scan
<LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calendar_alarm_msg
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPAD_Scan
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_GetState
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Address Reference Count : 1]<UL><LI> test.o(i.start_task)
</UL>
<P><STRONG><a name="[4ba]"></a>window_creat</STRONG> (Thumb, 280 bytes, Stack size 48 bytes, window.o(i.window_creat))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = window_creat &rArr; btn_creat &rArr; gui_memin_malloc &rArr; mymalloc &rArr; my_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_memin_malloc
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_memex_malloc
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_delete
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_creat
<LI><a href="#[7ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_read_backcolor
</UL>
<BR>[Called By]<UL><LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calendar_alarm_msg
<LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;paint_pen_size_set
<LI><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;paint_pen_color_set
<LI><a href="#[786]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysset_vs1053_vol3d_set
<LI><a href="#[787]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysset_vs1053_eq_set
<LI><a href="#[785]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysset_time_set
<LI><a href="#[788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysset_system_update
<LI><a href="#[78a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysset_system_status
<LI><a href="#[789]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysset_system_info
<LI><a href="#[78b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysset_system_about
<LI><a href="#[783]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysset_date_set
<LI><a href="#[782]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysset_bklight_set
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_msg_box
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_muti_remind_msg
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_items_sel
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appplay_remote
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appplay_load_ui
<LI><a href="#[772]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sms_read_all_sms
<LI><a href="#[7d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tomcat_agcspd_set
<LI><a href="#[74d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recorder_agc_set
</UL>

<P><STRONG><a name="[4c3]"></a>window_delete</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, window.o(i.window_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = window_delete &rArr; btn_delete &rArr; btn_recover_backcolor
</UL>
<BR>[Calls]<UL><LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_memin_free
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_memex_free
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_delete
<LI><a href="#[7ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_recover_backcolor
</UL>
<BR>[Called By]<UL><LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calendar_alarm_msg
<LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;paint_pen_size_set
<LI><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;paint_pen_color_set
<LI><a href="#[786]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysset_vs1053_vol3d_set
<LI><a href="#[787]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysset_vs1053_eq_set
<LI><a href="#[785]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysset_time_set
<LI><a href="#[788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysset_system_update
<LI><a href="#[78a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysset_system_status
<LI><a href="#[789]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysset_system_info
<LI><a href="#[78b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysset_system_about
<LI><a href="#[783]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysset_date_set
<LI><a href="#[782]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysset_bklight_set
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_msg_box
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_creat
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_muti_remind_msg
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_items_sel
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appplay_remote
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appplay_load_ui
<LI><a href="#[772]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sms_read_all_sms
<LI><a href="#[7d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tomcat_agcspd_set
<LI><a href="#[74d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recorder_agc_set
</UL>

<P><STRONG><a name="[4bd]"></a>window_draw</STRONG> (Thumb, 500 bytes, Stack size 40 bytes, window.o(i.window_draw))
<BR><BR>[Stack]<UL><LI>Max Depth = 696 + Unknown Stack Size
<LI>Call Chain = window_draw &rArr; btn_draw &rArr; btn_draw_picbtn &rArr; minibmp_decode &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Erase_Sector &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_fill_rectangle
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_show_ptstr
<LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_rectangle
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_show_strmid
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_draw
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_arcrectangle
</UL>
<BR>[Called By]<UL><LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calendar_alarm_msg
<LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;paint_pen_size_set
<LI><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;paint_pen_color_set
<LI><a href="#[786]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysset_vs1053_vol3d_set
<LI><a href="#[787]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysset_vs1053_eq_set
<LI><a href="#[785]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysset_time_set
<LI><a href="#[788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysset_system_update
<LI><a href="#[78a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysset_system_status
<LI><a href="#[789]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysset_system_info
<LI><a href="#[78b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysset_system_about
<LI><a href="#[783]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysset_date_set
<LI><a href="#[782]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysset_bklight_set
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_msg_box
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_muti_remind_msg
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_items_sel
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appplay_remote
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appplay_load_ui
<LI><a href="#[772]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sms_read_all_sms
<LI><a href="#[7d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tomcat_agcspd_set
<LI><a href="#[74d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recorder_agc_set
</UL>

<P><STRONG><a name="[4ee]"></a>window_msg_box</STRONG> (Thumb, 626 bytes, Stack size 72 bytes, window.o(i.window_msg_box))
<BR><BR>[Stack]<UL><LI>Max Depth = 768 + Unknown Stack Size
<LI>Call Chain = window_msg_box &rArr; window_draw &rArr; btn_draw &rArr; btn_draw_picbtn &rArr; minibmp_decode &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Erase_Sector &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_show_string
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_draw
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_delete
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_creat
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_draw
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_delete
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_creat
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_check
<LI><a href="#[6d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_get_stringline
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[6c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wireless_play
<LI><a href="#[6ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysset_play
<LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spb_load_mui
<LI><a href="#[6be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recorder_play
<LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phone_play
<LI><a href="#[6bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;paint_play
<LI><a href="#[6bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;notepad_play
<LI><a href="#[6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_play
<LI><a href="#[6bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nes_play
<LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exe_play
<LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebook_play
<LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_play
<LI><a href="#[788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysset_system_update
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appplay_gyro
<LI><a href="#[774]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sms_send_sms
<LI><a href="#[769]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sms_delete_sms
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phone_incall_task
<LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_test
</UL>

<P><STRONG><a name="[7ee]"></a>window_read_backcolor</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, window.o(i.window_read_backcolor))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = window_read_backcolor
</UL>
<BR>[Called By]<UL><LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_creat
</UL>

<P><STRONG><a name="[7ef]"></a>window_recover_backcolor</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, window.o(i.window_recover_backcolor))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = window_recover_backcolor
</UL>
<BR>[Called By]<UL><LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_delete
</UL>

<P><STRONG><a name="[6c1]"></a>wireless_play</STRONG> (Thumb, 826 bytes, Stack size 72 bytes, wirelessplay.o(i.wireless_play))
<BR><BR>[Stack]<UL><LI>Max Depth = 864 + Unknown Stack Size
<LI>Call Chain = wireless_play &rArr; app_items_sel &rArr; window_draw &rArr; btn_draw &rArr; btn_draw_picbtn &rArr; minibmp_decode &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Erase_Sector &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_fill_rectangle
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_SetSpeed
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Init
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_TxPacket
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_TX_Mode
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_RxPacket
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_RX_Mode
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_Init
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_Check
<LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_bline
<LI><a href="#[72d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;paint_draw_point
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_msg_box
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_draw
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_delete
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_creat
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_check
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_items_sel
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_filebrower
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_task
</UL>

<P><STRONG><a name="[40c]"></a>write_2007</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, nes_ppu.o(i.write_2007))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = write_2007 &rArr; update_tile
</UL>
<BR>[Calls]<UL><LI><a href="#[7f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_tile
</UL>
<BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPU_WriteToPort
</UL>

<P><STRONG><a name="[9]"></a>write_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usmart.o(i.write_addr))
<BR>[Address Reference Count : 1]<UL><LI> usmart_config.o(.data)
</UL>
<P><STRONG><a name="[4fa]"></a>K6502_Read</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, 6502.o(io_code))
<BR><BR>[Called By]<UL><LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apu_dmc
</UL>

<P><STRONG><a name="[94]"></a>_get_lc_ctype</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_ctype_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_ctype_2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_ctype_table.o(.text)
</UL>
<P><STRONG><a name="[22a]"></a>_get_lc_numeric</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_numeric_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_numeric
</UL>
<BR>[Calls]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_numeric_2
</UL>

<P><STRONG><a name="[702]"></a>cpu6502_init</STRONG> (Thumb, 144 bytes, Stack size 0 bytes, 6502.o(rom_code))
<BR><BR>[Calls]<UL><LI><a href="#[7f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[6fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nes_load
</UL>

<P><STRONG><a name="[351]"></a>map67_0</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(rom_code))
<BR><BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP3_Reset
</UL>

<P><STRONG><a name="[354]"></a>map67_</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(rom_code))
<BR><BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP69_MemoryWrite
</UL>

<P><STRONG><a name="[33a]"></a>map89_</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(rom_code))
<BR><BR>[Called By]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_CPU_banks
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map4_Set_CPU_Banks
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP8_MemoryWrite
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP88_MemoryWrite
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP85_MemoryWrite
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP79_MemoryWriteLow
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP78_MemoryWrite
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP76_MemoryWrite
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP75_MemoryWrite
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP73_MemoryWrite
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP71_MemoryWrite
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP70_MemoryWrite
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP6_MemoryWrite
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP69_MemoryWrite
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP67_MemoryWrite
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP66_MemoryWrite
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP65_MemoryWrite
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP64_MemoryWrite
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP33_MemoryWrite
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP32_MemoryWrite
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP25_MemoryWrite
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP24_MemoryWrite
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP245_MemoryWrite
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP240_MemoryWriteLow
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP23_MemoryWrite
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP22_MemoryWrite
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP227_MemoryWrite
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP225_MemoryWrite
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP21_MemoryWrite
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP19_MemoryWrite
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP18_MemoryWrite
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP17_MemoryWriteLow
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP16_MemoryWrite2
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP15_MemoryWrite
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP13_MemoryWrite
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP11_MemoryWrite
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP113_MemoryWriteLow
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP113_MemoryWrite
</UL>

<P><STRONG><a name="[33b]"></a>mapAB_</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(rom_code))
<BR><BR>[Called By]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_CPU_banks
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map4_Set_CPU_Banks
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP8_MemoryWrite
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP88_MemoryWrite
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP85_MemoryWrite
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP79_MemoryWriteLow
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP78_MemoryWrite
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP76_MemoryWrite
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP75_MemoryWrite
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP73_MemoryWrite
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP71_MemoryWrite
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP70_MemoryWrite
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP6_MemoryWrite
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP69_MemoryWrite
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP67_MemoryWrite
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP66_MemoryWrite
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP65_MemoryWrite
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP64_MemoryWrite
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP33_MemoryWrite
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP32_MemoryWrite
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP25_MemoryWrite
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP24_MemoryWrite
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP245_MemoryWrite
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP240_MemoryWriteLow
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP23_MemoryWrite
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP22_MemoryWrite
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP227_MemoryWrite
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP225_MemoryWrite
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP21_MemoryWrite
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP19_MemoryWrite
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP18_MemoryWrite
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP189_MemoryWrite
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP17_MemoryWriteLow
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP16_MemoryWrite2
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP15_MemoryWrite
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP13_MemoryWrite
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP11_MemoryWrite
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP113_MemoryWriteLow
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP113_MemoryWrite
</UL>

<P><STRONG><a name="[33c]"></a>mapCD_</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(rom_code))
<BR><BR>[Called By]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_CPU_banks
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map4_Set_CPU_Banks
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP85_MemoryWrite
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP79_MemoryWriteLow
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP75_MemoryWrite
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP69_MemoryWrite
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP66_MemoryWrite
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP65_MemoryWrite
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP64_MemoryWrite
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP32_MemoryWrite
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP25_MemoryWrite
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP24_MemoryWrite
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP240_MemoryWriteLow
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP23_MemoryWrite
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP227_MemoryWrite
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP225_MemoryWrite
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP21_MemoryWrite
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP19_MemoryWrite
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP18_MemoryWrite
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP189_MemoryWrite
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP17_MemoryWriteLow
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP15_MemoryWrite
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP13_MemoryWrite
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP11_MemoryWrite
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP113_MemoryWriteLow
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP113_MemoryWrite
</UL>

<P><STRONG><a name="[33d]"></a>mapEF_</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(rom_code))
<BR><BR>[Called By]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_CPU_banks
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map4_Set_CPU_Banks
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP79_MemoryWriteLow
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP66_MemoryWrite
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP240_MemoryWriteLow
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP227_MemoryWrite
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP225_MemoryWrite
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP17_MemoryWriteLow
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP15_MemoryWrite
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP13_MemoryWrite
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP11_MemoryWrite
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP113_MemoryWriteLow
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP113_MemoryWrite
</UL>

<P><STRONG><a name="[85d]"></a>map89ABCDEF_</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(rom_code), UNUSED)

<P><STRONG><a name="[498]"></a>__aeabi_d2f</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_dmp_get_data
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_tofloat
</UL>

<P><STRONG><a name="[7fa]"></a>_d2f</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[7fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[314]"></a>__aeabi_dadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_play
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Temprate
<LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calendar_circle_clock_showtime
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calendar_circle_clock_drawpanel
<LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro_circle_show
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro_circle_panel
<LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_exe
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log10
<LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_tan
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
</UL>

<P><STRONG><a name="[7fd]"></a>_dadd</STRONG> (Thumb, 332 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[7ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[7fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[800]"></a>__fpl_dcheck_NaN1</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dcheck1.o(x$fpl$dcheck1))
<BR><BR>[Calls]<UL><LI><a href="#[801]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<BR>[Called By]<UL><LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>

<P><STRONG><a name="[804]"></a>__fpl_dcmp_Inf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, dcmpi.o(x$fpl$dcmpinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[807]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
<LI><a href="#[803]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpeq
</UL>

<P><STRONG><a name="[313]"></a>__aeabi_ddiv</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_play
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Temprate
<LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_exe
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apu_setparams
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_tan
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
</UL>

<P><STRONG><a name="[802]"></a>_ddiv</STRONG> (Thumb, 552 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[7fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[497]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, deqf.o(x$fpl$deqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_cdcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ldexp
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_tofloat
</UL>

<P><STRONG><a name="[803]"></a>_dcmpeq</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, deqf.o(x$fpl$deqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[804]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_Inf
<LI><a href="#[7fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[2ee]"></a>__aeabi_d2iz</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Temprate
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Get_Temp
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_show_res
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apu_setparams
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apu_build_luts
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_tan
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[805]"></a>_dfix</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[2a2]"></a>__aeabi_d2uiz</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dfixu.o(x$fpl$dfixu))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_play
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_lcd_auto_bklight
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Adjust
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SSD_BackLightSet
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTT2001A_Scan
<LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calendar_circle_clock_showtime
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calendar_circle_clock_drawpanel
<LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro_circle_show
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro_circle_panel
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Handler
</UL>

<P><STRONG><a name="[806]"></a>_dfixu</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, dfixu.o(x$fpl$dfixu), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[2ed]"></a>__aeabi_i2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt))
<BR><BR>[Called By]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Get_Temp
<LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calendar_circle_clock_showtime
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calendar_circle_clock_drawpanel
<LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro_circle_show
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro_circle_panel
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apu_build_luts
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log10
<LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_tan
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>

<P><STRONG><a name="[85e]"></a>_dflt</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt), UNUSED)

<P><STRONG><a name="[2a0]"></a>__aeabi_ui2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu))
<BR><BR>[Called By]<UL><LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_lcd_auto_bklight
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Adjust
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SSD_BackLightSet
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTT2001A_Scan
<LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calendar_circle_clock_showtime
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calendar_circle_clock_drawpanel
<LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro_circle_show
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro_circle_panel
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Handler
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>

<P><STRONG><a name="[85f]"></a>_dfltu</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu), UNUSED)

<P><STRONG><a name="[24a]"></a>__aeabi_cdcmple</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Adjust
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_show_res
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDA_atk_ncr_point
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDA_IMAGE
</UL>

<P><STRONG><a name="[807]"></a>_dcmple</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[804]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_Inf
<LI><a href="#[7fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[80a]"></a>__fpl_dcmple_InfNaN</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[809]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drcmple
</UL>

<P><STRONG><a name="[2a1]"></a>__aeabi_dmul</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_play
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_lcd_auto_bklight
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Adjust
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SSD_BackLightSet
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTT2001A_Scan
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Temprate
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Get_Temp
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_dmp_get_data
<LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calendar_circle_clock_showtime
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calendar_circle_clock_drawpanel
<LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro_circle_show
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro_circle_panel
<LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_exe
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Handler
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log10
<LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_tan
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
</UL>

<P><STRONG><a name="[808]"></a>_dmul</STRONG> (Thumb, 332 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[7fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[7fc]"></a>__fpl_dnaninf</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, dnaninf.o(x$fpl$dnaninf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __fpl_dnaninf
</UL>
<BR>[Called By]<UL><LI><a href="#[808]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[807]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
<LI><a href="#[806]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfixu
<LI><a href="#[805]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfix
<LI><a href="#[802]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[80d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[7fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
<LI><a href="#[7fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
<LI><a href="#[77d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[803]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpeq
</UL>

<P><STRONG><a name="[7ff]"></a>__fpl_dretinf</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dretinf.o(x$fpl$dretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[80e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
<LI><a href="#[808]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[802]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[7fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[458]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, drleqf.o(x$fpl$drleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Adjust
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_tofloat
</UL>

<P><STRONG><a name="[809]"></a>_drcmple</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, drleqf.o(x$fpl$drleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[80a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmple_InfNaN
</UL>

<P><STRONG><a name="[3fb]"></a>__aeabi_drsub</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, daddsub_clz.o(x$fpl$drsb))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_drsub
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTT2001A_Scan
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_tan
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
</UL>

<P><STRONG><a name="[80b]"></a>_drsb</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, daddsub_clz.o(x$fpl$drsb), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[80c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[77d]"></a>_dsqrt</STRONG> (Thumb, 456 bytes, Stack size 24 bytes, dsqrt_noumaal.o(x$fpl$dsqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[7fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>
<BR>[Called By]<UL><LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>

<P><STRONG><a name="[312]"></a>__aeabi_dsub</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dsub
</UL>
<BR>[Called By]<UL><LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_play
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Temprate
<LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calendar_circle_clock_showtime
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calendar_circle_clock_drawpanel
<LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro_circle_show
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro_circle_panel
<LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_exe
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_tan
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
</UL>

<P><STRONG><a name="[80d]"></a>_dsub</STRONG> (Thumb, 464 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[80c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
<LI><a href="#[7fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[249]"></a>__aeabi_f2d</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Adjust
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Temprate
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_dmp_get_data
<LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calendar_circle_clock_showtime
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_info_upd
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro_circle_yaw
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro_circle_roll
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro_circle_pitch
<LI><a href="#[753]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recorder_show_samplerate
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apu_setparams
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDA_atk_ncr_point
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDA_IMAGE
</UL>

<P><STRONG><a name="[80e]"></a>_f2d</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[80f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[7ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
</UL>

<P><STRONG><a name="[240]"></a>__aeabi_fadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Scan
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_dmp_get_data
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_draw_init
<LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calendar_circle_clock_showtime
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powf
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recog
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FeaExtractByGradient
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OverallElasticMesh
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrix_multiplication
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan2
</UL>

<P><STRONG><a name="[810]"></a>_fadd</STRONG> (Thumb, 196 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[811]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub1
<LI><a href="#[7fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[80f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[812]"></a>__fpl_fcheck_NaN1</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fcheck1.o(x$fpl$fcheck1))
<BR><BR>[Calls]<UL><LI><a href="#[801]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<BR>[Called By]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
</UL>

<P><STRONG><a name="[815]"></a>__fpl_fcmp_Inf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fcmpi.o(x$fpl$fcmpinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[818]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmple
<LI><a href="#[814]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmpeq
</UL>

<P><STRONG><a name="[243]"></a>__aeabi_fdiv</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fdiv.o(x$fpl$fdiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Adjust
<LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_tap_thresh
<LI><a href="#[65c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro_self_test
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accel_self_test
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_draw_init
<LI><a href="#[63e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fupd_prog
<LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calendar_circle_clock_showtime
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progressbar_check
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_info_upd
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro_circle_yaw
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro_circle_roll
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro_circle_pitch
<LI><a href="#[753]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recorder_show_samplerate
<LI><a href="#[748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progressbar_setpos
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powf
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDA_atk_ncr_point
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDA_IMAGE
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OverallElasticMesh
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_divzero
</UL>

<P><STRONG><a name="[813]"></a>_fdiv</STRONG> (Thumb, 384 bytes, Stack size 16 bytes, fdiv.o(x$fpl$fdiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[80f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[63f]"></a>__aeabi_cfcmpeq</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, feqf.o(x$fpl$feqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_cfcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[63e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fupd_prog
</UL>

<P><STRONG><a name="[814]"></a>_fcmpeq</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, feqf.o(x$fpl$feqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[80f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[815]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmp_Inf
</UL>

<P><STRONG><a name="[23b]"></a>__aeabi_f2iz</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, ffix.o(x$fpl$ffix))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Adjust
<LI><a href="#[6e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_self_test
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appplay_gyro
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recog
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDA_atk_ncr_point
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDA_IMAGE
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuickSort
</UL>

<P><STRONG><a name="[816]"></a>_ffix</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, ffix.o(x$fpl$ffix), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[80f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[746]"></a>_ffix_r</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, ffix.o(x$fpl$ffixr))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _ffix_r &rArr; __fpl_fnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[80f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>
<BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powf
</UL>

<P><STRONG><a name="[460]"></a>__aeabi_f2uiz</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, ffixu.o(x$fpl$ffixu))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Scan
<LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_tap_thresh
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_draw_init
<LI><a href="#[63e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fupd_prog
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progressbar_check
<LI><a href="#[748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progressbar_setpos
</UL>

<P><STRONG><a name="[817]"></a>_ffixu</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, ffixu.o(x$fpl$ffixu), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[80f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[23d]"></a>__aeabi_i2f</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$fflt))
<BR><BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Adjust
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Scan
<LI><a href="#[6e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_self_test
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_dmp_get_data
<LI><a href="#[65c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro_self_test
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accel_self_test
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro_circle_yaw
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro_circle_roll
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro_circle_pitch
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apu_setparams
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powf
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recog
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDA_atk_ncr_point
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDA_IMAGE
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FeaExtractByGradient
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OverallElasticMesh
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuickSort
</UL>

<P><STRONG><a name="[860]"></a>_fflt</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$fflt), UNUSED)

<P><STRONG><a name="[311]"></a>__aeabi_ui2f</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$ffltu))
<BR><BR>[Called By]<UL><LI><a href="#[6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Adjust
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Scan
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Temprate
<LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_tap_thresh
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_draw_init
<LI><a href="#[63e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fupd_prog
<LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calendar_circle_clock_showtime
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progressbar_check
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_info_upd
<LI><a href="#[753]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recorder_show_samplerate
<LI><a href="#[748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progressbar_setpos
</UL>

<P><STRONG><a name="[861]"></a>_ffltu</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$ffltu), UNUSED)

<P><STRONG><a name="[23c]"></a>__aeabi_cfcmple</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fleqf.o(x$fpl$fleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_cfcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_draw_init
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OverallElasticMesh
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuickSort
</UL>

<P><STRONG><a name="[818]"></a>_fcmple</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, fleqf.o(x$fpl$fleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[80f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[815]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmp_Inf
</UL>

<P><STRONG><a name="[862]"></a>__fpl_fcmple_InfNaN</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fleqf.o(x$fpl$fleqf), UNUSED)

<P><STRONG><a name="[23f]"></a>__aeabi_fmul</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Adjust
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Scan
<LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_tap_thresh
<LI><a href="#[6e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_self_test
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_dmp_get_data
<LI><a href="#[65c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro_self_test
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_accel_prod_shift
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_draw_init
<LI><a href="#[63e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fupd_prog
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progressbar_check
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appplay_gyro
<LI><a href="#[748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progressbar_setpos
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powf
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recog
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDA_atk_ncr_point
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDA_IMAGE
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FeaExtractByGradient
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OverallElasticMesh
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrix_multiplication
</UL>

<P><STRONG><a name="[819]"></a>_fmul</STRONG> (Thumb, 258 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[80f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[80f]"></a>__fpl_fnaninf</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, fnaninf.o(x$fpl$fnaninf))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __fpl_fnaninf
</UL>
<BR>[Called By]<UL><LI><a href="#[819]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fmul
<LI><a href="#[818]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmple
<LI><a href="#[817]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ffixu
<LI><a href="#[746]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ffix_r
<LI><a href="#[816]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ffix
<LI><a href="#[814]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmpeq
<LI><a href="#[813]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdiv
<LI><a href="#[81c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub
<LI><a href="#[810]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
<LI><a href="#[80e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
</UL>

<P><STRONG><a name="[7fb]"></a>__fpl_fretinf</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fretinf.o(x$fpl$fretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[819]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fmul
<LI><a href="#[813]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdiv
<LI><a href="#[810]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
<LI><a href="#[7fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>

<P><STRONG><a name="[745]"></a>__aeabi_frsub</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, faddsub_clz.o(x$fpl$frsb))
<BR><BR>[Called By]<UL><LI><a href="#[6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powf
</UL>

<P><STRONG><a name="[81a]"></a>_frsb</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, faddsub_clz.o(x$fpl$frsb), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[811]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub1
<LI><a href="#[81b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd1
</UL>

<P><STRONG><a name="[250]"></a>__aeabi_fsub</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fsub))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fsub
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Adjust
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_dmp_get_data
<LI><a href="#[65c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro_self_test
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accel_self_test
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_draw_init
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powf
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recog
</UL>

<P><STRONG><a name="[81c]"></a>_fsub</STRONG> (Thumb, 234 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[81b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd1
<LI><a href="#[80f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[1]"></a>__ieee_status</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, istatus.o(x$fpl$ieeestatus))
<BR><BR>[Called By]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[20b]"></a>_printf_fp_dec</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, printf1.o(x$fpl$printf1))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>
<BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_g
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_e
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_f
</UL>

<P><STRONG><a name="[801]"></a>__fpl_return_NaN</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, retnan.o(x$fpl$retnan))
<BR><BR>[Calls]<UL><LI><a href="#[81d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_cmpreturn
</UL>
<BR>[Called By]<UL><LI><a href="#[800]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN1
<LI><a href="#[812]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcheck_NaN1
</UL>

<P><STRONG><a name="[485]"></a>__ARM_scalbn</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, scalbn.o(x$fpl$scalbn))
<BR><BR>[Calls]<UL><LI><a href="#[800]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN1
</UL>
<BR>[Called By]<UL><LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apu_build_luts
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log10
<LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ldexp
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frexp
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_tan
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
</UL>

<P><STRONG><a name="[459]"></a>__ARM_scalbnf</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, scalbnf.o(x$fpl$scalbnf))
<BR><BR>[Calls]<UL><LI><a href="#[812]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcheck_NaN1
</UL>
<BR>[Called By]<UL><LI><a href="#[6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Adjust
<LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_tap_thresh
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_dmp_get_data
<LI><a href="#[65c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro_self_test
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accel_self_test
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_draw_init
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powf
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_overflow
</UL>

<P><STRONG><a name="[280]"></a>_scanf_real</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, scanf1.o(x$fpl$scanf1))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>
<BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_local_sscanf
</UL>

<P><STRONG><a name="[28c]"></a>_scanf_hex_real</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, scanf2.o(x$fpl$scanf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = _scanf_hex_real &rArr; _scanf_really_hex_real &rArr; __support_ldexp &rArr; ldexp &rArr; __aeabi_cdcmpeq
</UL>
<BR>[Calls]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_hex_real
</UL>
<BR>[Called By]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[28b]"></a>_scanf_infnan</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, scanf2.o(x$fpl$scanf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _scanf_infnan &rArr; _scanf_really_infnan
</UL>
<BR>[Calls]<UL><LI><a href="#[81e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[81d]"></a>__fpl_cmpreturn</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, trapv.o(x$fpl$trapveneer))
<BR><BR>[Called By]<UL><LI><a href="#[801]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[49a]"></a>accel_self_test</STRONG> (Thumb, 112 bytes, Stack size 48 bytes, inv_mpu.o(i.accel_self_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = accel_self_test &rArr; get_accel_prod_shift &rArr; MPU_Read_Len &rArr; MPU_IIC_Read_Byte &rArr; MPU_IIC_NAck &rArr; delay_us &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_accel_prod_shift
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
</UL>
<BR>[Called By]<UL><LI><a href="#[6eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_run_self_test
</UL>

<P><STRONG><a name="[49b]"></a>get_accel_prod_shift</STRONG> (Thumb, 156 bytes, Stack size 40 bytes, inv_mpu.o(i.get_accel_prod_shift))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = get_accel_prod_shift &rArr; MPU_Read_Len &rArr; MPU_IIC_Read_Byte &rArr; MPU_IIC_NAck &rArr; delay_us &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Read_Len
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accel_self_test
</UL>

<P><STRONG><a name="[642]"></a>get_st_biases</STRONG> (Thumb, 784 bytes, Stack size 48 bytes, inv_mpu.o(i.get_st_biases))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = get_st_biases &rArr; MPU_Read_Len &rArr; MPU_IIC_Read_Byte &rArr; MPU_IIC_NAck &rArr; delay_us &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Write_Len
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Read_Len
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[6eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_run_self_test
</UL>

<P><STRONG><a name="[65c]"></a>gyro_self_test</STRONG> (Thumb, 194 bytes, Stack size 40 bytes, inv_mpu.o(i.gyro_self_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = gyro_self_test &rArr; MPU_Read_Len &rArr; MPU_IIC_Read_Byte &rArr; MPU_IIC_NAck &rArr; delay_us &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Read_Len
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
</UL>
<BR>[Called By]<UL><LI><a href="#[6eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_run_self_test
</UL>

<P><STRONG><a name="[6de]"></a>set_int_enable</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, inv_mpu.o(i.set_int_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = set_int_enable &rArr; MPU_Write_Len &rArr; MPU_IIC_Wait_Ack &rArr; MPU_IIC_Stop &rArr; delay_us &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Write_Len
</UL>
<BR>[Called By]<UL><LI><a href="#[6e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_dmp_state
<LI><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_configure_fifo
</UL>

<P><STRONG><a name="[564]"></a>check_fs</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, ff.o(i.check_fs))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Erase_Sector &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[56d]"></a>chk_chr</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ff.o(i.chk_chr))
<BR><BR>[Called By]<UL><LI><a href="#[628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_setlabel
<LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>

<P><STRONG><a name="[61a]"></a>clmt_clust</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, ff.o(i.clmt_clust))
<BR><BR>[Called By]<UL><LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[619]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
</UL>

<P><STRONG><a name="[566]"></a>create_chain</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, ff.o(i.create_chain))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Erase_Sector &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[619]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>

<P><STRONG><a name="[56b]"></a>create_name</STRONG> (Thumb, 514 bytes, Stack size 48 bytes, ff.o(i.create_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = create_name &rArr; ff_convert &rArr; W25QXX_Read &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_convert
<LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_wtoupper
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_chr
</UL>
<BR>[Called By]<UL><LI><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
</UL>

<P><STRONG><a name="[59b]"></a>dir_alloc</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, ff.o(i.dir_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = dir_alloc &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Erase_Sector &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>
<BR>[Called By]<UL><LI><a href="#[628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_setlabel
<LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[59d]"></a>dir_find</STRONG> (Thumb, 294 bytes, Stack size 40 bytes, ff.o(i.dir_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Erase_Sector &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_wtoupper
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sum_sfn
<LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>
<BR>[Called By]<UL><LI><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[59c]"></a>dir_next</STRONG> (Thumb, 230 bytes, Stack size 24 bytes, ff.o(i.dir_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Erase_Sector &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
</UL>
<BR>[Called By]<UL><LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove
<LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
</UL>

<P><STRONG><a name="[5a1]"></a>dir_read</STRONG> (Thumb, 252 bytes, Stack size 48 bytes, ff.o(i.dir_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = dir_read &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Erase_Sector &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sum_sfn
<LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>
<BR>[Called By]<UL><LI><a href="#[628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_setlabel
<LI><a href="#[62a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getlabel
</UL>

<P><STRONG><a name="[5a2]"></a>dir_register</STRONG> (Thumb, 352 bytes, Stack size 56 bytes, ff.o(i.dir_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Erase_Sector &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sum_sfn
<LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_numname
<LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
</UL>

<P><STRONG><a name="[5a5]"></a>dir_remove</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, ff.o(i.dir_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = dir_remove &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Erase_Sector &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>
<BR>[Called By]<UL><LI><a href="#[62a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
</UL>

<P><STRONG><a name="[616]"></a>find_volume</STRONG> (Thumb, 562 bytes, Stack size 48 bytes, ff.o(i.find_volume))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = find_volume &rArr; check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Erase_Sector &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_enter
<LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
<LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
<LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
<LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
</UL>
<BR>[Called By]<UL><LI><a href="#[628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_setlabel
<LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[62a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getlabel
<LI><a href="#[60f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getfree
</UL>

<P><STRONG><a name="[61d]"></a>follow_path</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, ff.o(i.follow_path))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Erase_Sector &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>
<BR>[Called By]<UL><LI><a href="#[62a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
</UL>

<P><STRONG><a name="[5a4]"></a>gen_numname</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, ff.o(i.gen_numname))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = gen_numname
</UL>
<BR>[Calls]<UL><LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
</UL>
<BR>[Called By]<UL><LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[626]"></a>get_fileinfo</STRONG> (Thumb, 194 bytes, Stack size 24 bytes, ff.o(i.get_fileinfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = get_fileinfo &rArr; ff_convert &rArr; W25QXX_Read &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_convert
</UL>
<BR>[Called By]<UL><LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
</UL>

<P><STRONG><a name="[623]"></a>get_ldnumber</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, ff.o(i.get_ldnumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get_ldnumber
</UL>
<BR>[Called By]<UL><LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[622]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[625]"></a>ld_clust</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ff.o(i.ld_clust))
<BR><BR>[Called By]<UL><LI><a href="#[62a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
</UL>

<P><STRONG><a name="[5a3]"></a>mem_cpy</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ff.o(i.mem_cpy))
<BR><BR>[Called By]<UL><LI><a href="#[628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_setlabel
<LI><a href="#[622]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[62a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getlabel
<LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_numname
<LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[56e]"></a>mem_set</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ff.o(i.mem_set))
<BR><BR>[Called By]<UL><LI><a href="#[628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_setlabel
<LI><a href="#[622]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove
<LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>

<P><STRONG><a name="[565]"></a>move_window</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, ff.o(i.move_window))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Erase_Sector &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
</UL>
<BR>[Called By]<UL><LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getlabel
<LI><a href="#[60f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getfree
<LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove
<LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
<LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
</UL>

<P><STRONG><a name="[61f]"></a>remove_chain</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, ff.o(i.remove_chain))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = remove_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Erase_Sector &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[62a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
</UL>

<P><STRONG><a name="[61e]"></a>st_clust</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ff.o(i.st_clust))
<BR><BR>[Called By]<UL><LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
</UL>

<P><STRONG><a name="[59e]"></a>sum_sfn</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ff.o(i.sum_sfn))
<BR><BR>[Called By]<UL><LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>

<P><STRONG><a name="[620]"></a>sync_fs</STRONG> (Thumb, 176 bytes, Stack size 16 bytes, ff.o(i.sync_fs))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = sync_fs &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Erase_Sector &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
<LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
</UL>
<BR>[Called By]<UL><LI><a href="#[628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_setlabel
<LI><a href="#[62a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
</UL>

<P><STRONG><a name="[59f]"></a>sync_window</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, ff.o(i.sync_window))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Erase_Sector &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>
<BR>[Called By]<UL><LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>

<P><STRONG><a name="[614]"></a>validate</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, ff.o(i.validate))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = validate &rArr; ff_enter &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_enter
<LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
</UL>
<BR>[Called By]<UL><LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[619]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[615]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_closedir
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
</UL>

<P><STRONG><a name="[56a]"></a>alloc_pool</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, tjpgd.o(i.alloc_pool))
<BR><BR>[Called By]<UL><LI><a href="#[693]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jd_prepare
<LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_huffman_tbl
</UL>

<P><STRONG><a name="[6c6]"></a>bitext</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, tjpgd.o(i.bitext))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = bitext
</UL>
<BR>[Called By]<UL><LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_load
</UL>

<P><STRONG><a name="[6c7]"></a>block_idct</STRONG> (Thumb, 478 bytes, Stack size 36 bytes, tjpgd.o(i.block_idct))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = block_idct
</UL>
<BR>[Called By]<UL><LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_load
</UL>

<P><STRONG><a name="[569]"></a>create_huffman_tbl</STRONG> (Thumb, 202 bytes, Stack size 48 bytes, tjpgd.o(i.create_huffman_tbl))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = create_huffman_tbl
</UL>
<BR>[Calls]<UL><LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_pool
</UL>
<BR>[Called By]<UL><LI><a href="#[693]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jd_prepare
</UL>

<P><STRONG><a name="[6c5]"></a>huffext</STRONG> (Thumb, 162 bytes, Stack size 56 bytes, tjpgd.o(i.huffext))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = huffext
</UL>
<BR>[Called By]<UL><LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_load
</UL>

<P><STRONG><a name="[691]"></a>mcu_load</STRONG> (Thumb, 340 bytes, Stack size 56 bytes, tjpgd.o(i.mcu_load))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = mcu_load &rArr; huffext
</UL>
<BR>[Calls]<UL><LI><a href="#[6c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;huffext
<LI><a href="#[6c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_idct
<LI><a href="#[6c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitext
</UL>
<BR>[Called By]<UL><LI><a href="#[690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jd_decomp
</UL>

<P><STRONG><a name="[692]"></a>mcu_output</STRONG> (Thumb, 770 bytes, Stack size 80 bytes, tjpgd.o(i.mcu_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = mcu_output
</UL>
<BR>[Called By]<UL><LI><a href="#[690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jd_decomp
</UL>

<P><STRONG><a name="[3c1]"></a>OS_InitEventList</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, os_core.o(i.OS_InitEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OS_InitEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemClr
</UL>
<BR>[Called By]<UL><LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[3c0]"></a>OS_InitTCBList</STRONG> (Thumb, 96 bytes, Stack size 4 bytes, os_core.o(i.OS_InitTCBList))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = OS_InitTCBList
</UL>
<BR>[Calls]<UL><LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemClr
</UL>
<BR>[Called By]<UL><LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[3c7]"></a>OS_SchedNew</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, os_core.o(i.OS_SchedNew))
<BR><BR>[Called By]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStart
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[3d3]"></a>OSMutex_RdyAtPrio</STRONG> (Thumb, 112 bytes, Stack size 20 bytes, os_mutex.o(i.OSMutex_RdyAtPrio))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = OSMutex_RdyAtPrio
</UL>
<BR>[Called By]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPost
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexDel
</UL>

<P><STRONG><a name="[47]"></a>PPU_W</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(CPU_GPU))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = PPU_W &rArr; PPU_WriteToPort &rArr; write_2007 &rArr; update_tile
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPU_WriteToPort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(wram_globals0)
</UL>
<P><STRONG><a name="[3f]"></a>PPU_R</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(CPU_GPU))
<BR><BR>[Calls]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPU_ReadFromPort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(wram_globals0)
</UL>
<P><STRONG><a name="[9b]"></a>_00</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR><BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VecCont
</UL>
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[9c]"></a>_01</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[9f]"></a>_05</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[a0]"></a>_06</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[a2]"></a>_08</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[a3]"></a>_09</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[a4]"></a>_0A</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[a5]"></a>_0D</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[a6]"></a>_0E</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[a7]"></a>_10</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[a8]"></a>_11</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[aa]"></a>_15</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[ab]"></a>_16</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[ac]"></a>_18</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[ad]"></a>_19</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[ae]"></a>_1D</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[af]"></a>_1E</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[b0]"></a>_20</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[b1]"></a>_21</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[b2]"></a>_24</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[b3]"></a>_25</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[b4]"></a>_26</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[b5]"></a>_28</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[b6]"></a>_29</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[b7]"></a>_2A</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[b8]"></a>_2C</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[b9]"></a>_2D</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[ba]"></a>_2E</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[bb]"></a>_30</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[bc]"></a>_31</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[bd]"></a>_35</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[be]"></a>_36</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[bf]"></a>_38</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[c0]"></a>_39</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[c1]"></a>_3D</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[c2]"></a>_3E</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[c3]"></a>_40</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[c4]"></a>_41</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[c5]"></a>_45</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[c6]"></a>_46</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[c7]"></a>_48</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[c8]"></a>_49</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[c9]"></a>_4A</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[ca]"></a>_4C</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[cb]"></a>_4D</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[cc]"></a>_4E</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[cd]"></a>_50</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[ce]"></a>_51</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[cf]"></a>_55</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[d0]"></a>_56</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[d1]"></a>_58</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[d2]"></a>_59</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[d3]"></a>_5D</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[d4]"></a>_5E</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[d5]"></a>_60</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[d6]"></a>_61</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[d7]"></a>_65</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[d8]"></a>_66</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[da]"></a>_68</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[db]"></a>_69</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[dc]"></a>_6A</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[dd]"></a>_6C</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[de]"></a>_6D</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[df]"></a>_6E</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[e0]"></a>_70</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[e1]"></a>_71</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[e2]"></a>_75</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[e3]"></a>_76</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[e4]"></a>_78</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[e5]"></a>_79</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[e6]"></a>_7D</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[e7]"></a>_7E</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[e8]"></a>_81</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[e9]"></a>_84</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[ea]"></a>_85</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[eb]"></a>_86</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[ec]"></a>_88</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[ed]"></a>_8A</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[ee]"></a>_8C</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[ef]"></a>_8D</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[f0]"></a>_8E</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[f1]"></a>_90</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[f2]"></a>_91</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[f3]"></a>_94</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[f4]"></a>_95</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[f5]"></a>_96</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[f6]"></a>_98</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[f7]"></a>_99</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[f8]"></a>_9A</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[f9]"></a>_9D</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[fa]"></a>_A0</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[fb]"></a>_A1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[fc]"></a>_A2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[fd]"></a>_A4</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[fe]"></a>_A5</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[ff]"></a>_A6</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[100]"></a>_A8</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[101]"></a>_A9</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[102]"></a>_AA</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[103]"></a>_AC</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[104]"></a>_AD</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[105]"></a>_AE</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[106]"></a>_B0</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[107]"></a>_B1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[108]"></a>_B4</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[109]"></a>_B5</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[10a]"></a>_B6</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[10b]"></a>_B8</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[10c]"></a>_B9</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[10d]"></a>_BA</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[10e]"></a>_BC</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[10f]"></a>_BD</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[110]"></a>_BE</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[111]"></a>_C0</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[112]"></a>_C1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[113]"></a>_C4</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[114]"></a>_C5</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[115]"></a>_C6</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[116]"></a>_C8</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[117]"></a>_C9</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[118]"></a>_CA</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[119]"></a>_CC</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[11a]"></a>_CD</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[11b]"></a>_CE</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[11c]"></a>_D0</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[11d]"></a>_D1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[11e]"></a>_D5</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[11f]"></a>_D6</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[120]"></a>_D8</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[121]"></a>_D9</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[122]"></a>_DD</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[123]"></a>_DE</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[124]"></a>_E0</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[125]"></a>_E1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[126]"></a>_E4</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[127]"></a>_E5</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[128]"></a>_E6</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[129]"></a>_E8</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[12a]"></a>_E9</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[12b]"></a>_EA</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[12c]"></a>_EC</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[12d]"></a>_ED</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[12e]"></a>_EE</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[12f]"></a>_F0</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[130]"></a>_F1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[131]"></a>_F5</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[132]"></a>_F6</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[133]"></a>_F8</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[134]"></a>_F9</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[136]"></a>_FD</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[137]"></a>_FE</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[138]"></a>_FF</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[135]"></a>_FB</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[a9]"></a>_14</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[d9]"></a>_67</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[9e]"></a>_03</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[a1]"></a>_07</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[9d]"></a>_xx</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = _xx &rArr; debug_6502 &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_6502
</UL>
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[4b]"></a>exit_run</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_run))
<BR>[Address Reference Count : 2]<UL><LI> 6502.o(cpu_run)
<LI> 6502.o(wram_globals0)
</UL>
<P><STRONG><a name="[29a]"></a>VecCont</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_run))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_00
</UL>

<P><STRONG><a name="[40]"></a>IO_R</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(io_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = IO_R &rArr; empty_R &rArr; debug_6502 &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;empty_R
<LI><a href="#[7f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Low
</UL>
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(wram_globals0)
</UL>
<P><STRONG><a name="[48]"></a>IO_W</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(io_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = IO_W &rArr; empty_R &rArr; debug_6502 &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;empty_R
<LI><a href="#[7f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Low
</UL>
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(wram_globals0)
</UL>
<P><STRONG><a name="[7f1]"></a>Read_Low</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, 6502.o(io_code))
<BR><BR>[Calls]<UL><LI><a href="#[7f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asm_Mapper_ReadLow
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_R
</UL>

<P><STRONG><a name="[7f3]"></a>Write_Low</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, 6502.o(io_code))
<BR><BR>[Calls]<UL><LI><a href="#[7f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asm_Mapper_WriteLow
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_W
</UL>

<P><STRONG><a name="[1fa]"></a>apu_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(io_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 28 + Unknown Stack Size
<LI>Call Chain = apu_w &rArr; Apu_Write &rArr; apu_enqueue
</UL>
<BR>[Calls]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Apu_Write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(io_code)
</UL>
<P><STRONG><a name="[1fc]"></a>apu_4015w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(io_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 28 + Unknown Stack Size
<LI>Call Chain = apu_4015w &rArr; Apu_Write4015 &rArr; apu_enqueue
</UL>
<BR>[Calls]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Apu_Write4015
</UL>
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(io_code)
</UL>
<P><STRONG><a name="[1fe]"></a>apu_4017w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(io_code))
<BR><BR>[Calls]<UL><LI><a href="#[7f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Apu_Write4017
</UL>
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(io_code)
</UL>
<P><STRONG><a name="[1f7]"></a>apu_4015R</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(io_code))
<BR><BR>[Calls]<UL><LI><a href="#[7f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Apu_Read4015
</UL>
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(io_code)
</UL>
<P><STRONG><a name="[1fb]"></a>dma_W</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(io_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(io_code)
</UL>
<P><STRONG><a name="[1fd]"></a>joy0_W</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(io_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(io_code)
</UL>
<P><STRONG><a name="[1f8]"></a>joy0_R</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(io_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(io_code)
</UL>
<P><STRONG><a name="[1f9]"></a>joy1_R</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(io_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(io_code)
</UL>
<P><STRONG><a name="[1ff]"></a>Mapper_W</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(rom_code))
<BR><BR>[Calls]<UL><LI><a href="#[7f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asm_Mapper_Write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(rom_code)
</UL>
<P><STRONG><a name="[7f2]"></a>empty_R</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(rwram_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = empty_R &rArr; debug_6502 &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_6502
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_W
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_R
</UL>

<P><STRONG><a name="[4a]"></a>void</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, 6502.o(rwram_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(wram_globals0)
</UL>
<P><STRONG><a name="[3e]"></a>ram_R</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(rwram_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(wram_globals0)
</UL>
<P><STRONG><a name="[46]"></a>ram_W</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(rwram_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(wram_globals0)
</UL>
<P><STRONG><a name="[41]"></a>sram_R</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(rwram_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(wram_globals0)
</UL>
<P><STRONG><a name="[49]"></a>sram_W</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(rwram_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(wram_globals0)
</UL>
<P><STRONG><a name="[42]"></a>rom_R80</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(rwram_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(wram_globals0)
</UL>
<P><STRONG><a name="[43]"></a>rom_RA0</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(rwram_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(wram_globals0)
</UL>
<P><STRONG><a name="[44]"></a>rom_RC0</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(rwram_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(wram_globals0)
</UL>
<P><STRONG><a name="[45]"></a>rom_RE0</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(rwram_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(wram_globals0)
</UL>
<P><STRONG><a name="[2f1]"></a>DataStageIn</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, usb_core.o(i.DataStageIn))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DataStageIn &rArr; UserToPMABufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserToPMABufferCopy
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPTxCount
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetEPTxAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;In0_Process
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_Setup0
</UL>

<P><STRONG><a name="[2f5]"></a>DataStageOut</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, usb_core.o(i.DataStageOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DataStageOut
</UL>
<BR>[Calls]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPTxCount
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMAToUserBufferCopy
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetEPRxAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Out0_Process
</UL>

<P><STRONG><a name="[2f8]"></a>Data_Setup0</STRONG> (Thumb, 376 bytes, Stack size 24 bytes, usb_core.o(i.Data_Setup0))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Data_Setup0 &rArr; DataStageIn &rArr; UserToPMABufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataStageIn
</UL>
<BR>[Called By]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup0_Process
</UL>

<P><STRONG><a name="[3b5]"></a>NoData_Setup0</STRONG> (Thumb, 190 bytes, Stack size 16 bytes, usb_core.o(i.NoData_Setup0))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = NoData_Setup0 &rArr; Standard_ClearFeature
</UL>
<BR>[Calls]<UL><LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_SetInterface
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_SetEndPointFeature
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_SetDeviceFeature
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_SetConfiguration
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_ClearFeature
</UL>
<BR>[Called By]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup0_Process
</UL>

<P><STRONG><a name="[63b]"></a>fs_free</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, fs.o(i.fs_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = fs_free &rArr; myfree &rArr; my_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myfree
</UL>
<BR>[Called By]<UL><LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_open
</UL>

<P><STRONG><a name="[611]"></a>extract_uri_parameters</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, httpd.o(i.extract_uri_parameters))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = extract_uri_parameters
</UL>
<BR>[Calls]<UL><LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Called By]<UL><LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_find_file
</UL>

<P><STRONG><a name="[643]"></a>get_tag_insert</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, httpd.o(i.get_tag_insert))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = get_tag_insert &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_send_data
</UL>

<P><STRONG><a name="[1c9]"></a>http_accept</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, httpd.o(i.http_accept))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = http_accept &rArr; mem_malloc &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_setprio
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_sent
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_poll
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_err
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_arg
<LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc
<LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> httpd.o(i.httpd_init_addr)
</UL>
<P><STRONG><a name="[65e]"></a>http_close_conn</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, httpd.o(i.http_close_conn))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = http_close_conn &rArr; http_state_free &rArr; mem_free &rArr; plug_holes &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_sent
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_poll
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_err
<LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_arg
<LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_state_free
</UL>
<BR>[Called By]<UL><LI><a href="#[668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_send_data
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_recv
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_poll
</UL>

<P><STRONG><a name="[1c6]"></a>http_err</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, httpd.o(i.http_err))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = http_err &rArr; http_state_free &rArr; mem_free &rArr; plug_holes &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_state_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> httpd.o(i.http_accept)
</UL>
<P><STRONG><a name="[660]"></a>http_find_file</STRONG> (Thumb, 252 bytes, Stack size 40 bytes, httpd.o(i.http_find_file))
<BR><BR>[Stack]<UL><LI>Max Depth = 616 + Unknown Stack Size
<LI>Call Chain = http_find_file &rArr; http_get_404_file &rArr; fs_open &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Erase_Sector &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_open
<LI><a href="#[662]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_init_file
<LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_get_404_file
<LI><a href="#[611]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extract_uri_parameters
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Called By]<UL><LI><a href="#[664]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_parse_request
</UL>

<P><STRONG><a name="[661]"></a>http_get_404_file</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, httpd.o(i.http_get_404_file))
<BR><BR>[Stack]<UL><LI>Max Depth = 576 + Unknown Stack Size
<LI>Call Chain = http_get_404_file &rArr; fs_open &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Erase_Sector &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_open
</UL>
<BR>[Called By]<UL><LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_find_file
</UL>

<P><STRONG><a name="[662]"></a>http_init_file</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, httpd.o(i.http_init_file))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = http_init_file &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strnstr
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_find_file
</UL>

<P><STRONG><a name="[664]"></a>http_parse_request</STRONG> (Thumb, 242 bytes, Stack size 32 bytes, httpd.o(i.http_parse_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 648 + Unknown Stack Size
<LI>Call Chain = http_parse_request &rArr; http_find_file &rArr; http_get_404_file &rArr; fs_open &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Erase_Sector &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy_partial
<LI><a href="#[667]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clen
<LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
<LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strnstr
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_find_file
<LI><a href="#[666]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_recv
</UL>

<P><STRONG><a name="[1c7]"></a>http_poll</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, httpd.o(i.http_poll))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = http_poll &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_send_data
<LI><a href="#[65e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_close_conn
</UL>
<BR>[Address Reference Count : 2]<UL><LI> httpd.o(i.http_accept)
<LI> httpd.o(i.http_close_conn)
</UL>
<P><STRONG><a name="[1c5]"></a>http_recv</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, httpd.o(i.http_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 680 + Unknown Stack Size
<LI>Call Chain = http_recv &rArr; http_parse_request &rArr; http_find_file &rArr; http_get_404_file &rArr; fs_open &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Erase_Sector &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<LI><a href="#[668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_send_data
<LI><a href="#[664]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_parse_request
<LI><a href="#[65e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_close_conn
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> httpd.o(i.http_accept)
</UL>
<P><STRONG><a name="[668]"></a>http_send_data</STRONG> (Thumb, 1036 bytes, Stack size 40 bytes, httpd.o(i.http_send_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = http_send_data &rArr; http_write &rArr; tcp_write &rArr; tcp_pbuf_prealloc &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[63d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_read
<LI><a href="#[669]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_bytes_left
<LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc
<LI><a href="#[66a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_write
<LI><a href="#[65e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_close_conn
<LI><a href="#[643]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_tag_insert
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_sent
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_recv
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_poll
</UL>

<P><STRONG><a name="[1c8]"></a>http_sent</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, httpd.o(i.http_sent))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = http_sent &rArr; http_send_data &rArr; http_write &rArr; tcp_write &rArr; tcp_pbuf_prealloc &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_send_data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> httpd.o(i.http_accept)
</UL>
<P><STRONG><a name="[65f]"></a>http_state_free</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, httpd.o(i.http_state_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = http_state_free &rArr; mem_free &rArr; plug_holes &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_close
<LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_err
<LI><a href="#[65e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_close_conn
</UL>

<P><STRONG><a name="[66a]"></a>http_write</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, httpd.o(i.http_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = http_write &rArr; tcp_write &rArr; tcp_pbuf_prealloc &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_send_data
</UL>

<P><STRONG><a name="[672]"></a>httpd_init_addr</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, httpd.o(i.httpd_init_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 560 + Unknown Stack Size
<LI>Call Chain = httpd_init_addr &rArr; tcp_new &rArr; tcp_alloc &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_setprio
<LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_new
<LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_with_backlog
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_bind
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_arg
<LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_accept
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpd_init
</UL>

<P><STRONG><a name="[663]"></a>strnstr</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, httpd.o(i.strnstr))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = strnstr &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[666]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[664]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_parse_request
<LI><a href="#[662]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_init_file
</UL>

<P><STRONG><a name="[2b3]"></a>FindCGIParameter</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, httpd_cgi_ssi.o(i.FindCGIParameter))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FindCGIParameter
</UL>
<BR>[Calls]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDS_CGI_Handler
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BEEP_CGI_Handler
</UL>

<P><STRONG><a name="[1ca]"></a>SSIHandler</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, httpd_cgi_ssi.o(i.SSIHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = SSIHandler &rArr; Temperate_Handler &rArr; Get_Temprate &rArr; Get_Adc_Average &rArr; delay_ms &rArr; delay_us &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperate_Handler
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCdate_Handler
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCTime_Handler
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Handler
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> httpd_cgi_ssi.o(i.httpd_ssi_init)
</UL>
<P><STRONG><a name="[5f4]"></a>etharp_arp_input</STRONG> (Thumb, 252 bytes, Stack size 40 bytes, etharp.o(i.etharp_arp_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + Unknown Stack Size
<LI>Call Chain = etharp_arp_input &rArr; dhcp_arp_reply &rArr; dhcp_decline &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_arp_reply
<LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_update_arp_entry
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
</UL>

<P><STRONG><a name="[5f9]"></a>etharp_find_entry</STRONG> (Thumb, 332 bytes, Stack size 64 bytes, etharp.o(i.etharp_find_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = etharp_find_entry &rArr; etharp_free_entry &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_free_entry
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_update_arp_entry
</UL>

<P><STRONG><a name="[5f8]"></a>etharp_free_entry</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, etharp.o(i.etharp_free_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = etharp_free_entry &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>
<BR>[Called By]<UL><LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_tmr
<LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_cleanup_netif
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_find_entry
</UL>

<P><STRONG><a name="[5fd]"></a>etharp_output_to_arp_index</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, etharp.o(i.etharp_output_to_arp_index))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = etharp_output_to_arp_index &rArr; etharp_request &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request
<LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_send_ip
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
</UL>

<P><STRONG><a name="[601]"></a>etharp_raw</STRONG> (Thumb, 220 bytes, Stack size 40 bytes, etharp.o(i.etharp_raw))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = etharp_raw &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request
</UL>

<P><STRONG><a name="[5fc]"></a>etharp_send_ip</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, etharp.o(i.etharp_send_ip))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = etharp_send_ip &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
<LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_update_arp_entry
<LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output_to_arp_index
</UL>

<P><STRONG><a name="[5f5]"></a>etharp_update_arp_entry</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, etharp.o(i.etharp_update_arp_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = etharp_update_arp_entry &rArr; etharp_find_entry &rArr; etharp_free_entry &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast
<LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_send_ip
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_find_entry
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_arp_input
</UL>

<P><STRONG><a name="[1c0]"></a>low_level_output</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ethernetif.o(i.low_level_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = low_level_output &rArr; DM9000_SendPacket &rArr; OSMutexPend &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM9000_SendPacket
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ethernetif.o(i.ethernetif_init)
</UL>
<P><STRONG><a name="[675]"></a>icmp_send_response</STRONG> (Thumb, 120 bytes, Stack size 40 bytes, icmp.o(i.icmp_send_response))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = icmp_send_response &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[67a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
<LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[67b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_time_exceeded
<LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_dest_unreach
</UL>

<P><STRONG><a name="[67c]"></a>lwip_standard_chksum</STRONG> (Thumb, 86 bytes, Stack size 12 bytes, inet_chksum.o(i.lwip_standard_chksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = lwip_standard_chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[67d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo
<LI><a href="#[677]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pbuf
<LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
</UL>

<P><STRONG><a name="[684]"></a>ip_frag_free_pbuf_custom_ref</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, ip_frag.o(i.ip_frag_free_pbuf_custom_ref))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = ip_frag_free_pbuf_custom_ref &rArr; memp_free &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[685]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipfrag_free_pbuf_custom
<LI><a href="#[680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag
</UL>

<P><STRONG><a name="[68c]"></a>ip_reass_chain_frag_into_datagram_and_validate</STRONG> (Thumb, 346 bytes, Stack size 32 bytes, ip_frag.o(i.ip_reass_chain_frag_into_datagram_and_validate))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = ip_reass_chain_frag_into_datagram_and_validate &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[681]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
<LI><a href="#[667]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clen
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[686]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass
</UL>

<P><STRONG><a name="[68d]"></a>ip_reass_dequeue_datagram</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, ip_frag.o(i.ip_reass_dequeue_datagram))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = ip_reass_dequeue_datagram &rArr; memp_free &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[685]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[68e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_free_complete_datagram
<LI><a href="#[686]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass
</UL>

<P><STRONG><a name="[68e]"></a>ip_reass_free_complete_datagram</STRONG> (Thumb, 202 bytes, Stack size 32 bytes, ip_frag.o(i.ip_reass_free_complete_datagram))
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + Unknown Stack Size
<LI>Call Chain = ip_reass_free_complete_datagram &rArr; icmp_time_exceeded &rArr; icmp_send_response &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[68d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_dequeue_datagram
<LI><a href="#[67b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_time_exceeded
<LI><a href="#[667]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clen
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_tmr
<LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_remove_oldest_datagram
</UL>

<P><STRONG><a name="[68b]"></a>ip_reass_remove_oldest_datagram</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, ip_frag.o(i.ip_reass_remove_oldest_datagram))
<BR><BR>[Stack]<UL><LI>Max Depth = 504 + Unknown Stack Size
<LI>Call Chain = ip_reass_remove_oldest_datagram &rArr; ip_reass_free_complete_datagram &rArr; icmp_time_exceeded &rArr; icmp_send_response &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[68e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_free_complete_datagram
</UL>
<BR>[Called By]<UL><LI><a href="#[686]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass
</UL>

<P><STRONG><a name="[1cb]"></a>ipfrag_free_pbuf_custom</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, ip_frag.o(i.ipfrag_free_pbuf_custom))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = ipfrag_free_pbuf_custom &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[684]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag_free_pbuf_custom_ref
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ip_frag.o(i.ip_frag)
</UL>
<P><STRONG><a name="[572]"></a>dhcp_bind</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, dhcp.o(i.dhcp_bind))
<BR><BR>[Stack]<UL><LI>Max Depth = 568 + Unknown Stack Size
<LI>Call Chain = dhcp_bind &rArr; netif_set_ipaddr &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_up
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_netmask
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_ipaddr
<LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_gw
<LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
</UL>

<P><STRONG><a name="[578]"></a>dhcp_check</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, dhcp.o(i.dhcp_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = dhcp_check &rArr; etharp_query &rArr; etharp_request &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
</UL>
<BR>[Called By]<UL><LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
</UL>

<P><STRONG><a name="[57d]"></a>dhcp_create_msg</STRONG> (Thumb, 372 bytes, Stack size 24 bytes, dhcp.o(i.dhcp_create_msg))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = dhcp_create_msg &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_byte
<LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
</UL>

<P><STRONG><a name="[571]"></a>dhcp_decline</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, dhcp.o(i.dhcp_decline))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = dhcp_decline &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_long
<LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_msg
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohl
<LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_arp_reply
</UL>

<P><STRONG><a name="[586]"></a>dhcp_delete_msg</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, dhcp.o(i.dhcp_delete_msg))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = dhcp_delete_msg &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
</UL>

<P><STRONG><a name="[587]"></a>dhcp_discover</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, dhcp.o(i.dhcp_discover))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = dhcp_discover &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_short
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_byte
<LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_msg
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
</UL>

<P><STRONG><a name="[58b]"></a>dhcp_handle_ack</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, dhcp.o(i.dhcp_handle_ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dhcp_handle_ack
</UL>
<BR>[Calls]<UL><LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
</UL>

<P><STRONG><a name="[57f]"></a>dhcp_option</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, dhcp.o(i.dhcp_option))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = dhcp_option &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
</UL>

<P><STRONG><a name="[580]"></a>dhcp_option_byte</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, dhcp.o(i.dhcp_option_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = dhcp_option_byte &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
</UL>

<P><STRONG><a name="[582]"></a>dhcp_option_long</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, dhcp.o(i.dhcp_option_long))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = dhcp_option_long &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
</UL>

<P><STRONG><a name="[588]"></a>dhcp_option_short</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, dhcp.o(i.dhcp_option_short))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = dhcp_option_short &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
</UL>

<P><STRONG><a name="[583]"></a>dhcp_option_trailer</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, dhcp.o(i.dhcp_option_trailer))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = dhcp_option_trailer &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
</UL>

<P><STRONG><a name="[58c]"></a>dhcp_parse_reply</STRONG> (Thumb, 660 bytes, Stack size 56 bytes, dhcp.o(i.dhcp_parse_reply))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = dhcp_parse_reply &rArr; pbuf_copy_partial &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohl
<LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy_partial
<LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
</UL>

<P><STRONG><a name="[57b]"></a>dhcp_rebind</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, dhcp.o(i.dhcp_rebind))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = dhcp_rebind &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_short
<LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_msg
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_coarse_tmr
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
</UL>

<P><STRONG><a name="[58f]"></a>dhcp_reboot</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, dhcp.o(i.dhcp_reboot))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = dhcp_reboot &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_short
<LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_long
<LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_msg
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohl
<LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
</UL>

<P><STRONG><a name="[1b9]"></a>dhcp_recv</STRONG> (Thumb, 284 bytes, Stack size 24 bytes, dhcp.o(i.dhcp_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 592 + Unknown Stack Size
<LI>Call Chain = dhcp_recv &rArr; dhcp_bind &rArr; netif_set_ipaddr &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_netmask
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_ipaddr
<LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_gw
<LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_down
<LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_parse_reply
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_ack
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_check
<LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
<LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohl
<LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dhcp.o(i.dhcp_start)
</UL>
<P><STRONG><a name="[591]"></a>dhcp_select</STRONG> (Thumb, 228 bytes, Stack size 24 bytes, dhcp.o(i.dhcp_select))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = dhcp_select &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_short
<LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_long
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_byte
<LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_msg
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohl
<LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
</UL>

<P><STRONG><a name="[577]"></a>dhcp_set_state</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, dhcp.o(i.dhcp_set_state))
<BR><BR>[Called By]<UL><LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_stop
<LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
<LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_check
<LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
</UL>

<P><STRONG><a name="[58a]"></a>dhcp_timeout</STRONG> (Thumb, 136 bytes, Stack size 8 bytes, dhcp.o(i.dhcp_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 576 + Unknown Stack Size
<LI>Call Chain = dhcp_timeout &rArr; dhcp_bind &rArr; netif_set_ipaddr &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_check
<LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
</UL>
<BR>[Called By]<UL><LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_fine_tmr
</UL>

<P><STRONG><a name="[6c9]"></a>plug_holes</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, mem.o(i.plug_holes))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = plug_holes &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
</UL>

<P><STRONG><a name="[1e4]"></a>pbuf_free_ooseq_callback</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, pbuf.o(i.pbuf_free_ooseq_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = pbuf_free_ooseq_callback &rArr; tcp_segs_free &rArr; tcp_seg_free &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[734]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pbuf.o(i.pbuf_pool_is_empty)
</UL>
<P><STRONG><a name="[732]"></a>pbuf_pool_is_empty</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, pbuf.o(i.pbuf_pool_is_empty))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_free &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[735]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_callback_with_block
</UL>
<BR>[Called By]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
</UL>

<P><STRONG><a name="[1f4]"></a>tcp_accept_null</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tcp.o(i.tcp_accept_null))
<BR>[Address Reference Count : 1]<UL><LI> tcp.o(i.tcp_listen_with_backlog)
</UL>
<P><STRONG><a name="[7bd]"></a>tcp_close_shutdown</STRONG> (Thumb, 308 bytes, Stack size 40 bytes, tcp.o(i.tcp_close_shutdown))
<BR><BR>[Stack]<UL><LI>Max Depth = 520 + Unknown Stack Size
<LI>Call Chain = tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[712]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
<LI><a href="#[685]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[7bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timer_needed
<LI><a href="#[7be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_fin
<LI><a href="#[7b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[7b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_shutdown
</UL>

<P><STRONG><a name="[7bb]"></a>tcp_new_port</STRONG> (Thumb, 82 bytes, Stack size 20 bytes, tcp.o(i.tcp_new_port))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = tcp_new_port
</UL>
<BR>[Called By]<UL><LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_bind
<LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
</UL>

<P><STRONG><a name="[7c6]"></a>tcp_listen_input</STRONG> (Thumb, 208 bytes, Stack size 24 bytes, tcp_in.o(i.tcp_listen_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 568 + Unknown Stack Size
<LI>Call Chain = tcp_listen_input &rArr; tcp_alloc &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[7ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_parseopt
<LI><a href="#[7bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timer_needed
<LI><a href="#[7b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[7c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
<LI><a href="#[7bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_eff_send_mss
<LI><a href="#[7b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
<LI><a href="#[7b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
</UL>
<BR>[Called By]<UL><LI><a href="#[689]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL>

<P><STRONG><a name="[7cb]"></a>tcp_oos_insert_segment</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, tcp_in.o(i.tcp_oos_insert_segment))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = tcp_oos_insert_segment &rArr; pbuf_realloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[681]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
<LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[7c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[734]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
</UL>
<BR>[Called By]<UL><LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
</UL>

<P><STRONG><a name="[7ca]"></a>tcp_parseopt</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, tcp_in.o(i.tcp_parseopt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tcp_parseopt
</UL>
<BR>[Calls]<UL><LI><a href="#[681]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
</UL>
<BR>[Called By]<UL><LI><a href="#[7c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[7c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
</UL>

<P><STRONG><a name="[7c7]"></a>tcp_process</STRONG> (Thumb, 864 bytes, Stack size 48 bytes, tcp_in.o(i.tcp_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 568 + Unknown Stack Size
<LI>Call Chain = tcp_process &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[712]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
<LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohl
<LI><a href="#[7d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit
<LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[7ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_parseopt
<LI><a href="#[7bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timer_needed
<LI><a href="#[7b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[7c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[7bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_eff_send_mss
<LI><a href="#[728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[689]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL>

<P><STRONG><a name="[7cf]"></a>tcp_receive</STRONG> (Thumb, 2604 bytes, Stack size 32 bytes, tcp_in.o(i.tcp_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = tcp_receive &rArr; tcp_send_empty_ack &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohl
<LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[681]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
<LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[667]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clen
<LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
<LI><a href="#[7cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[7d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_fast
<LI><a href="#[7cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_oos_insert_segment
<LI><a href="#[7d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_update_rcv_ann_wnd
<LI><a href="#[7c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[7d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_copy
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[7c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
</UL>

<P><STRONG><a name="[7c5]"></a>tcp_timewait_input</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, tcp_in.o(i.tcp_timewait_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 488 + Unknown Stack Size
<LI>Call Chain = tcp_timewait_input &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[7b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
</UL>
<BR>[Called By]<UL><LI><a href="#[689]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL>

<P><STRONG><a name="[7c1]"></a>tcp_create_segment</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, tcp_out.o(i.tcp_create_segment))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = tcp_create_segment &rArr; tcp_seg_free &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[682]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[7c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
</UL>
<BR>[Called By]<UL><LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[7c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
</UL>

<P><STRONG><a name="[7c9]"></a>tcp_output_alloc_header</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, tcp_out.o(i.tcp_output_alloc_header))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[7cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[7d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[7c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
</UL>

<P><STRONG><a name="[7cd]"></a>tcp_output_segment</STRONG> (Thumb, 190 bytes, Stack size 24 bytes, tcp_out.o(i.tcp_output_segment))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohl
<LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[68a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_route
<LI><a href="#[67d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo
<LI><a href="#[67a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
<LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[7bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_eff_send_mss
</UL>
<BR>[Called By]<UL><LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
</UL>

<P><STRONG><a name="[7ce]"></a>tcp_pbuf_prealloc</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, tcp_out.o(i.tcp_pbuf_prealloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = tcp_pbuf_prealloc &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
</UL>

<P><STRONG><a name="[7d8]"></a>tcp_write_checks</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, tcp_out.o(i.tcp_write_checks))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = tcp_write_checks &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
</UL>

<P><STRONG><a name="[1f5]"></a>tcpip_tcp_timer</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, timers.o(i.tcpip_tcp_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 552 + Unknown Stack Size
<LI>Call Chain = tcpip_tcp_timer &rArr; tcp_tmr &rArr; tcp_fasttmr &rArr; tcp_process_refused_data &rArr; tcp_recv_null &rArr; tcp_recved &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_tmr
<LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
</UL>
<BR>[Address Reference Count : 2]<UL><LI> timers.o(i.tcp_timer_needed)
<LI> timers.o(i.tcpip_tcp_timer)
</UL>
<P><STRONG><a name="[726]"></a>netconn_close_shutdown</STRONG> (Thumb, 72 bytes, Stack size 40 bytes, api_lib.o(i.netconn_close_shutdown))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = netconn_close_shutdown &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[725]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_apimsg
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[708]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_close
</UL>

<P><STRONG><a name="[72a]"></a>netconn_recv_data</STRONG> (Thumb, 260 bytes, Stack size 48 bytes, api_lib.o(i.netconn_recv_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = netconn_recv_data &rArr; sys_arch_mbox_fetch &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[725]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_apimsg
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<LI><a href="#[723]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_fetch
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[71f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv
</UL>

<P><STRONG><a name="[1be]"></a>accept_function</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, api_msg.o(i.accept_function))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = accept_function &rArr; netconn_alloc &rArr; memp_free &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_free
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_sent
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_poll
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_err
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_arg
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_tcp
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_free
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_alloc
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_trypost
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_set_invalid
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_msg.o(i.do_listen)
</UL>
<P><STRONG><a name="[5c7]"></a>do_close_internal</STRONG> (Thumb, 342 bytes, Stack size 24 bytes, api_msg.o(i.do_close_internal))
<BR><BR>[Stack]<UL><LI>Max Depth = 552 + Unknown Stack Size
<LI>Call Chain = do_close_internal &rArr; tcp_shutdown &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_sent
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_poll
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_err
<LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_arg
<LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_accept
<LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_shutdown
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sent_tcp
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poll_tcp
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_delconn
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_close
</UL>

<P><STRONG><a name="[1bd]"></a>do_connected</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, api_msg.o(i.do_connected))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = do_connected &rArr; setup_tcp &rArr; tcp_sent &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_tcp
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_msg.o(i.do_connect)
</UL>
<P><STRONG><a name="[5de]"></a>do_writemore</STRONG> (Thumb, 390 bytes, Stack size 32 bytes, api_msg.o(i.do_writemore))
<BR><BR>[Stack]<UL><LI>Max Depth = 496 + Unknown Stack Size
<LI>Call Chain = do_writemore &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sent_tcp
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poll_tcp
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_write
</UL>

<P><STRONG><a name="[1bc]"></a>err_tcp</STRONG> (Thumb, 214 bytes, Stack size 24 bytes, api_msg.o(i.err_tcp))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = err_tcp &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_trypost
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 2]<UL><LI> api_msg.o(i.setup_tcp)
<LI> api_msg.o(i.do_close_internal)
</UL>
<P><STRONG><a name="[5c6]"></a>netconn_drain</STRONG> (Thumb, 176 bytes, Stack size 32 bytes, api_msg.o(i.netconn_drain))
<BR><BR>[Stack]<UL><LI>Max Depth = 552 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = netconn_drain &rArr;  netconn_drain (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[71e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_delete
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_free
<LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<LI><a href="#[728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_free
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_set_invalid
<LI><a href="#[727]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_tryfetch
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_delconn
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_close
</UL>

<P><STRONG><a name="[5d2]"></a>pcb_new</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, api_msg.o(i.pcb_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 560 + Unknown Stack Size
<LI>Call Chain = pcb_new &rArr; tcp_new &rArr; tcp_alloc &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_recv
<LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new
<LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_new
<LI><a href="#[737]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_recv
<LI><a href="#[736]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_new
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_tcp
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_newconn
</UL>

<P><STRONG><a name="[1bb]"></a>poll_tcp</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, api_msg.o(i.poll_tcp))
<BR><BR>[Stack]<UL><LI>Max Depth = 560 + Unknown Stack Size
<LI>Call Chain = poll_tcp &rArr; do_close_internal &rArr; tcp_shutdown &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_writemore
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_close_internal
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 2]<UL><LI> api_msg.o(i.setup_tcp)
<LI> api_msg.o(i.do_close_internal)
</UL>
<P><STRONG><a name="[1e5]"></a>recv_raw</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, api_msg.o(i.recv_raw))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = recv_raw &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[71e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_delete
<LI><a href="#[682]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_trypost
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_msg.o(i.pcb_new)
</UL>
<P><STRONG><a name="[1ea]"></a>recv_tcp</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, api_msg.o(i.recv_tcp))
<BR><BR>[Stack]<UL><LI>Max Depth = 504 + Unknown Stack Size
<LI>Call Chain = recv_tcp &rArr; tcp_recved &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_trypost
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_msg.o(i.setup_tcp)
</UL>
<P><STRONG><a name="[1e6]"></a>recv_udp</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, api_msg.o(i.recv_udp))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = recv_udp &rArr; netbuf_delete &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[71e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_delete
<LI><a href="#[682]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_trypost
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_msg.o(i.pcb_new)
</UL>
<P><STRONG><a name="[1ba]"></a>sent_tcp</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, api_msg.o(i.sent_tcp))
<BR><BR>[Stack]<UL><LI>Max Depth = 568 + Unknown Stack Size
<LI>Call Chain = sent_tcp &rArr; do_close_internal &rArr; tcp_shutdown &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_writemore
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_close_internal
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 2]<UL><LI> api_msg.o(i.setup_tcp)
<LI> api_msg.o(i.do_close_internal)
</UL>
<P><STRONG><a name="[49e]"></a>setup_tcp</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, api_msg.o(i.setup_tcp))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = setup_tcp &rArr; tcp_sent &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_sent
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_poll
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_err
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_arg
</UL>
<BR>[Called By]<UL><LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcb_new
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_connected
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept_function
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_connect
</UL>

<P><STRONG><a name="[1f6]"></a>tcpip_thread</STRONG> (Thumb, 138 bytes, Stack size 8 bytes, tcpip.o(i.tcpip_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 672 + Unknown Stack Size
<LI>Call Chain = tcpip_thread &rArr; ethernet_input &rArr; ip_input &rArr; tcp_input &rArr; tcp_process &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[685]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_untimeout
<LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
<LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
<LI><a href="#[781]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeouts_mbox_fetch
<LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tcpip.o(i.tcpip_init)
</UL>
<P><STRONG><a name="[80c]"></a>_dadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[80d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[80b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
</UL>

<P><STRONG><a name="[7fe]"></a>_dsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[80b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
<LI><a href="#[7fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[81b]"></a>_fadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, faddsub_clz.o(x$fpl$fadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[81c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub
<LI><a href="#[81a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frsb
</UL>

<P><STRONG><a name="[811]"></a>_fsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, faddsub_clz.o(x$fpl$fsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[81a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frsb
<LI><a href="#[810]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
</UL>

<P><STRONG><a name="[271]"></a>_fp_digits</STRONG> (Thumb, 432 bytes, Stack size 96 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[96]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL>
<P><STRONG><a name="[27f]"></a>_local_sscanf</STRONG> (Thumb, 60 bytes, Stack size 56 bytes, strtod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_real
</UL>
<BR>[Called By]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtod_int
</UL>

<P><STRONG><a name="[287]"></a>_fp_value</STRONG> (Thumb, 588 bytes, Stack size 96 bytes, scanf_fp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emuld
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_edivd
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee_status
</UL>
<BR>[Called By]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
